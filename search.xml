<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从0到-1搭建个人博客</title>
      <link href="/2024/03/19/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/03/19/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用Hexo和GitHub搭建博客的原理主要涉及静态网站生成与托管两个核心环节：</p><p>首先，Hexo是一个基于Node.js的静态博客框架。它的工作原理是解析使用Markdown（或其他渲染引擎）编写的文章，并利用主题模板生成静态网页。这意味着，当使用Hexo创建博客时，其实是在本地编写和预览博客的内容。Hexo的优势在于其快速、简洁且高效，使创作者无需关注太多技术细节。</p><p>然后，生成的静态网页需要托管到网络上以供他人访问。GitHub Pages是一个很好的选择，它是一个允许用户在其GitHub仓库上托管静态网页的服务。通过将Hexo生成的静态网页推送到GitHub仓库，并利用GitHub Pages的设置功能，就可以将博客发布到互联网上。</p><p>因此，使用Hexo+GitHub搭建博客的原理就是：利用Hexo生成静态网页，然后将这些网页托管到GitHub Pages上，从而实现博客的在线发布和访问。</p><p>具体来说，搭建过程主要包括以下几个步骤：</p><ol><li>安装Git和Node.js，这是使用Hexo和GitHub的前提。</li><li>安装Hexo，并初始化博客项目。</li><li>在GitHub上创建个人仓库，用于存放博客的源代码和静态网页。</li><li>将Hexo生成的静态网页推送到GitHub仓库。</li><li>在GitHub仓库中设置GitHub Pages，选择正确的分支和目录，以便正确托管静态网页。</li><li>更改Hexo的主题，以定制博客外观。</li><li>设置个人域名（可选），以便使用自定义域名访问博客。</li><li>开始使用Hexo编写和发布文章，每次发布新文章时，只需运行Hexo的生成命令，然后将生成的静态网页推送到GitHub即可。</li></ol><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h4><p>前往github官网进行账号注册。（若已有账号，此步骤可忽略）</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">https://www.github.com/    </span><br></pre></td></tr></table></figure><p>注册之后，要记住邮箱和用户名，这块在后面会用到。</p><h4 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h4><p>Hexo是基于NodeJS的静态框架博客，所以，如果要安装Hexo，前提条件是要有NodeJS的环境。<br>进入NodeJS官网，下载对应的版本。</p><p><img src="/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240319094941328.png" alt="image-20240319094941328"></p><p>如果是windows，安装的时候建议无脑下一步就行，如果 C 盘不吃紧的话，然后勾选所有组件，并勾选 Add to Path 将其添加到系统环境变量。</p><p>如果是Linux，可以参考这篇文章：</p><p><a href="https://blog.csdn.net/qq_41974199/article/details/119328353">https://blog.csdn.net/qq_41974199/article/details/119328353</a></p><p>安装Node.js 会包含环境变量以及 npm 的安装，安装后，可以在命令行输入如下命令检测是否安装成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v   //显示 nodejs 的版本号。</span><br><span class="line">npm -v    //显示 npm 的版本号</span><br></pre></td></tr></table></figure><p><img src="/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240319095721226.png" alt="image-20240319095721226"> </p><p>【注】这块推荐使用14以上的nodeJS版本，之前用的v10的版本，会报错。</p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p><a href="https://git-scm.com/">https://git-scm.com/</a></p><p>若为windows，需要安装Git bash，所有安装建议都无脑下一步即可。</p><p><img src="/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240319100028253.png" alt="image-20240319100028253"> </p><p>若为Linux，直接命令行在线安装即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><p><img src="/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240319100111677.png" alt="image-20240319100111677"> </p><h4 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱"></a>设置用户名和邮箱</h4><p>因为 Git 是分布式版本控制系统，所以需要设置用户名和邮箱作为一个标识，在命令行输入如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;user_name&quot;</span> <span class="comment"># user_name 填入 GitHub 用户名</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;user_email&quot;</span> <span class="comment"># user_email 填入 GitHub 注册的邮箱</span></span><br></pre></td></tr></table></figure><p>此处全局设置用户名和邮箱后，将作为本地和github同步的 **[UserName]**。</p><h3 id="搭建github仓库"><a href="#搭建github仓库" class="headerlink" title="搭建github仓库"></a>搭建github仓库</h3><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><p>登录github官网后，点击 “New repository”，创建一个名字为username.github.io（这里的 username 要替换成自己的实际的用户名） 的仓库。</p><p>比如，之前设置的用户名为 “muhe”，则这块创建的仓库名字为 muhe.github.io</p><p><img src="/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240319100237552.png" alt="image-20240319100237552"> </p><p><img src="/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240319100350011.png" alt="image-20240319100350011"> </p><h4 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h4><p>使用git，输入如下命令，生成一对公私钥</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;user.email&quot;</span> # user.email 为GitHub 上注册的邮箱</span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码。查看是否已经有 ssh 密钥。打开用户目录 &#x2F;root&#x2F;.ssh</p><p><img src="/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240319100418393.png" alt="image-20240319100418393"> </p><p>然后找到生成的 .ssh 的文件夹中的 id_rsa.pub 密钥，将内容全部复制。</p><p>其中 id_rsa 是私钥不能泄露，id_rsa.pub 是公钥可以放心告诉他人。</p><p>打开<a href="https://github.com/settings/ssh/new">GitHub SSH and GPG keys</a> 页面，新建一个 ssh key：</p><p><img src="/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240319100443173.png" alt="image-20240319100443173"> </p><p>Title 为标题，任意填即可，将刚刚复制的 id_rsa.pub 内容粘贴进去，最后点击 Add SSH key。在 Git Bash 中检测 GitHub 公钥设置是否成功，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>验证是否可以连接成功，若连接成功的话，显示如下：</p><p><img src="/%E4%BB%8E0%E5%88%B0-1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240319100518436.png" alt="image-20240319100518436"> </p><p>这一步骤，相当于生成了本地和github仓库的 <strong>[Password]</strong></p><h3 id="使用Hexo博客框架"><a href="#使用Hexo博客框架" class="headerlink" title="使用Hexo博客框架"></a>使用Hexo博客框架</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Hexo 是一个简单、快速、强大的基于 Github Pages 的博客框架，支持 Markdown 格式。</p><p>集成了众多优秀插件和主题。</p><p>由于 Github Pages 存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以 Hexo 所做的就是将这些 md 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到 GitHub 。</p><h4 id="安装与初始化"><a href="#安装与初始化" class="headerlink" title="安装与初始化"></a>安装与初始化</h4><p>输入如下命令进行安装：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli # 此命令完成对 hexo 的安装</span><br></pre></td></tr></table></figure><p>安装完成后，在电脑的某个地方新建一个文件夹（名字可以随便取）专门用于存放博客代码，比如我的是 &#x2F;root&#x2F;blog，由于这个文件夹将来存放博客的所有内容和素材，以及所有的博客操作都会在其中完成，所以最好不要随便放。</p><p>进入上面新建的目录，输入如下命令进行初始化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ hexo init # 该命令完成 hexo 在本地博客目录的初始化</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710577896315-33e95c14-7d6b-4b51-be39-cbe3f8a59807.png" alt="img"> </p><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><p>输入如下命令，生成所需的静态文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ hexo g # 生成静态文件</span><br></pre></td></tr></table></figure><p>执行以上命令后，Hexo 就会在 public 文件夹中生成相关的 html 文件，这些文件将来都是要提交到 GitHub 上的 username.github.io 的仓库中去的。</p><h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ hexo s # 开启本地预览</span><br></pre></td></tr></table></figure><p>hexo s 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，Ctrl+C 停止本地预览。本地预览可以实时查看博客的编辑情况，待博客写完后一起部署到 GitHub 上。</p><p>第一次初始化的时候 hexo 已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710578068127-9a6d7a37-e2af-417e-add4-908e65d4e855.png" alt="img"> </p><h3 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h3><h4 id="设置站点配置文件"><a href="#设置站点配置文件" class="headerlink" title="设置站点配置文件"></a>设置站点配置文件</h4><p>hexo 有 2 种 _config.yml 文件，一个是根目录下的全局的 _config.yml，一个是各个主体 theme 下的 _config.yml。将前者称为站点配置文件， 后者称为主题配置文件。</p><p>打开根目录下站点配置文件 _config.yml，配置有关 deploy 的部分：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git<span class="meta">@github</span>.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这块在动配置文件的时候，需要主要变量和值之前是要用空格来进行分隔的。</p><p>如 “type:git”，会报错；但使用”type: git”，不会报错。</p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>输入如下命令，安装部署插件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save # 安装部署插件</span><br></pre></td></tr></table></figure><p>若并进行上述操作，直接部署的时候，会报错。</p><h4 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h4><p>输入如下命令，将本地的文件+资源等上传到github</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>部署成功后，打开对应的网址 <a href="https://www.username.github.io,如果出现了和本地预览一样的效果,那么,表明部署成功./">https://www.username.github.io，如果出现了和本地预览一样的效果，那么，表明部署成功。</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710578390546-e5ed80f8-a01e-4182-80e2-2a225d5fbc97.png" alt="img"></p><h3 id="网站基本信息的修改"><a href="#网站基本信息的修改" class="headerlink" title="网站基本信息的修改"></a><strong>网站基本信息的修改</strong></h3><p>搭建好网站之后，有许多配置信息需要我们去修改，比如网站的标题、标签等选项，具体修改步骤如下：</p><ol><li>打开博客目录下的_config.yml文件，找到如图所示的选项</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710581519428-b3094a98-4012-4610-9ca0-b594320caa41.png" alt="img"> </p><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>title</td><td>网站的标题</td></tr><tr><td>subtitle</td><td>网站的副标题</td></tr><tr><td>description</td><td>对于网站的描述，主要用于SEO</td></tr><tr><td>keywords</td><td>网站的关键词，支持多个关键词</td></tr><tr><td>author</td><td>作者名</td></tr><tr><td>language</td><td>网站使用的语言，对于简体中文用户来说，语言的设置跟使用不同的主题有关，可以参考各自主题的文档自行配置，一般为zh-CN</td></tr><tr><td>timezone</td><td>设置网站的时区，如果不填则默认使用你电脑的时区</td></tr></tbody></table><p>ps：更多的配置信息修改可以去hexo的官方文档，<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/docs/configuration.html">戳我跳转</a>，可以修改一个选项之后，执行hexo clean、hexo g、hexo s在本地看一下效果，等全部修改好之后再推送到仓库。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710582352316-97f39e28-888b-4876-9878-ad671918411d.png" alt="img"></p><h3 id="更换Hexo主题"><a href="#更换Hexo主题" class="headerlink" title="更换Hexo主题"></a>更换Hexo主题</h3><p>hexo默认的主题有点ugly，修改好基本配置信息之后，可以考虑换一个主题，主题多可以说的上是hexo框架的一大卖点，<a href="https://link.zhihu.com/?target=https://hexo.io/themes/">戳我去挑选主题</a>，界面如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710582419209-1ce77997-1133-4360-bdef-6f9149f05807.png" alt="img"></p><p>下面推荐几种看起来不错的主题：</p><h4 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h4><ul><li><a href="https://link.zhihu.com/?target=https://github.com/theme-next/hexo-theme-next">仓库地址</a></li><li><a href="https://link.zhihu.com/?target=https://theme-next.js.org/">预览地址</a></li><li>首先就是大名鼎鼎的Next主题了，页面简洁，功能全，用的人多，网上的个性化配置教程也超级多，用这个主题如果遇到问题，在网上基本上能找到对应的解决办法。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710582488070-5882765b-ed0d-4c78-8bb0-8b6b618976f4.png" alt="img"></p><h4 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a>Butterfly</h4><ul><li><a href="https://link.zhihu.com/?target=https://github.com/jerryc127/hexo-theme-butterfly">仓库地址</a></li><li><a href="https://link.zhihu.com/?target=https://demo.jerryc.me/">预览地址</a></li><li>挺好看的一个主题，用的人也挺多的：</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710582604583-8bf59db0-98e2-4496-9658-5a58d8895228.png" alt="img"></p><h4 id="Nexmoe"><a href="#Nexmoe" class="headerlink" title="Nexmoe"></a>Nexmoe</h4><ul><li><a href="https://link.zhihu.com/?target=https://github.com/theme-nexmoe/hexo-theme-nexmoe">仓库地址</a></li><li><a href="https://link.zhihu.com/?target=https://suikastar.com/">预览地址</a></li><li>看起来不错~~</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710582759943-df89240c-a1cd-42d2-b2f8-b12aef7cc06b.png" alt="img"></p><h4 id="……"><a href="#……" class="headerlink" title="……"></a>……</h4><h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h4><p>这块个人比较喜欢的一款主题<strong>Metery</strong>，部署过程如下：</p><ol><li>Hexo的所有主题源代码都是托管在Github的，更换主题第一步：<strong>将该主题的源代码clone下来，放到本地Hexo站点根目录下的<strong><strong>themes</strong></strong>文件夹中</strong>。</li></ol><p>访问Metery主题的Github仓库,复制仓库地址：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710582910364-0471dd53-17b4-4b37-99db-f285ba459087.png" alt="img"></p><ol><li>然后在本地<strong>站点根目录</strong>打开git bash 命令行，进入themes文件夹，开始拉取代码到本地：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cd themes</span><br><span class="line">git clone https:<span class="comment">//github.com/blinkfox/hexo-theme-matery.git</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710583009118-f922cf91-125b-4393-bbed-4bd37f3ebb1a.png" alt="img"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710583051340-441fda17-1d89-46a0-9bc4-675bf300bae9.png" alt="img"></p><ol><li>更换主题</li></ol><p>下载Hexo的主题到&#x2F;themes文件夹之后，要在<strong>站点配置文件</strong>中配置使用该主题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vim config.yml</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710583191892-56d86862-0242-41a8-b3cf-fe0b5d8e4c14.png" alt="img"></p><ol><li>hexo一键三连后，查看效果</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710583414299-ffd05e01-5ea6-4380-a281-bf02b5e58093.png" alt="img"></p><h3 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h3><h4 id="404-There-isnt-a-GitHub-Pages-site-here"><a href="#404-There-isnt-a-GitHub-Pages-site-here" class="headerlink" title="404 There isnt a GitHub Pages site here"></a>404 There isnt a GitHub Pages site here</h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710578586932-8cb8e82c-aff3-4249-8d17-0aaeda290979.png" alt="img"></p><p><strong>简单分析</strong>：本地 “hexo s” 后，能够正常访问，但“username.github.io”打开后却是404。</p><p>一般为以下三种原因：</p><ol><li>github上仓库名字有误</li></ol><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710577285830-fea5eae6-4a90-46cb-bd93-9dcfefcfc10f.png" alt="img"> </p><ol><li>yml配置文件有误</li></ol><p>yml文件对数据格式有着严格的要求，需要检查文件下面位置是否有使用了空格。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710579686592-0450eca6-8a26-460f-b687-0f3418cf6c10.png" alt="img"> </p><ol><li>当前仓库被设置成了private</li></ol><p>若GitHub仓库被设置为了私密的话，调用GitHub Pages是不能访问的。</p><p>解决办法：private —&gt;  public</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710579820601-791bf421-50be-4e03-86ee-2d6d2c56ca38.png" alt="img"> </p><h4 id="fatal-could-not-read-Username-for-‘https-github-com’-No-error"><a href="#fatal-could-not-read-Username-for-‘https-github-com’-No-error" class="headerlink" title="fatal: could not read Username for ‘https://github.com’: No error"></a><strong>fatal: could not read Username for ‘<a href="https://github.com’/">https://github.com’</a>: No error</strong></h4><p>在上传Hexo博客到搭建到 Github 的项目时，已经使用 hexo s 预览成功了，但在 hexo d 部署到个人博客的时候出现了以下问题：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710579919212-ee47a0ce-ed7a-4c3d-81c8-0f711eafa6e2.png" alt="img"> </p><p>解决办法：同理，这块还是配置文件没写好的原因。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710579686592-0450eca6-8a26-460f-b687-0f3418cf6c10.png" alt="img"> </p><h4 id="fatal-err-Error-Spawn-failed-…"><a href="#fatal-err-Error-Spawn-failed-…" class="headerlink" title="fatal{err: Error : Spawn failed …}"></a><strong>fatal{err: Error : Spawn failed …}</strong></h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2167914/1710580016192-d2947c18-f2e1-46c6-b06b-1e720bfd7b1e.png" alt="img"> </p><p>这说明，是Github公钥出现错误，重新添加公钥即可。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
